[1,["87GExM4B1OYaiGH3CfdSKF@f9941","2c4cbRG/BPOo7BFvkgPTb9","3bdub1s8ZO+ZiplxYcda98","198db801b@6c48a","f6SJZOjTJB/JrJeh5xTdF7","603nxUMvNDDqKukZMGLKLQ","03PD58W7FEGbo6PSAlXlPW@6c48a","11968946c@6c48a","07/Te5U/hHho+kFhpl48Ns","b9w4TyU+VFxbHFdpiOCy05@f9941","12MtymGW9JPIihst66in9w","3cD8my0AZD2YXGIkdc4svr@f9941","e4eWD3/FFFQZTMselW6zAm@f9941","20aMDK56ZOEZT1C7IvGa7w","abv7HgVkVDEa7wAX9hIl3l@f9941","58D1IjOVJLPpONBi869EGZ@f9941","ebKpsMQQxJxojbvRNfU08o@f9941","12Y9dMgWdJKJGmTiZyQR9H@fc873","05B79pCQJKuIX0SzOpubYH","e7A2coe99LqaiFnPaE7g5l","16TOclJGRD4Lkgd4FX+zPJ","62WZl2hXtBT6pQNFNrLQax","baIUdvKGZPgZxNbjWTFuRI","34vGRg2HdLAbLFwCDheEfk@f9941","a3zQCfCrBCDZJ4uf2rk5u8","19287a1ca@6c48a","eeqmMi7l5CKpfdCjIV532r@f9941","01nCweA2FOfrtNo0XHVF8q@f9941","2exfYQPMxFt731xjSUxCmk","43Rsm9E8FBYo1tXTLflkrH@f9941","cb9QrXHtNJ4692ETRaBp+H","7bTvr2Nf9IopyJVnCZDUY2","fdHtHTIhtChaj5cX1PSwMw","5ehJr4h4BHYJydlaedshv6","53RvwWfhdES4TDRRBwPYY1","0aV+pCdn5CxqcFDSLZijlO","d0XS495GRCL48eE/atgSgC","d3aK5TlJtCFpAJPezCWB1C@f9941","44KXZBN6lJqYy++jWUtNh8@f9941","87M2pv+khNcZv+ag/lkMn5@f9941","7eVcPIbR5I1aH4oFQvffz9@2b8d2","f3NNqfLGpPqoqsbNYjQrRA@84ff4","99ASpVr/BIB5xDDY4v2kto@f9941","a1lreGTc9AeZTH9iNhMYrb@6c48a","609xlc7CpF67qUiVX2DoHQ","1bHcaPL9VF3Lm88AvaNwvI@16037","8dtgqpeedBD7PbjC6K9nGr@6c48a","fd+bn0ExVPFawLpQLlYeJI@ac3f0","30p0aUh6xBObJtP9jlotVF@ac3f0","f7QBB6XHNGqpvj36JZSi16@b5890","b4BXX6M/ZMW5/O35mX1dQH","49QkzciLVJipd7xbXL2klT@f9941","f5RXmgcktJfYzbqcQtoez9@f9941","1eSBl043VCoJM0y+WqQqjx","e3HTp4JPFDOoc9OB835/0d@f9941","beaQA8K+5A75PCEhwQQaPn@f9941","f3PPkqh2BIDpiFvsVqYNx5@f9941","b2pPk4Zf9G4KurYjDXYAWa@65acf","62lFzr6d1CwqT6Doxzqm9R@99f57","6e5d/5In1F+qOVgdFwONlW@ac3f0","84CCtPNSBEp7d34XPliSTx@4b064","dd2sovHlNMLog4+nXTt0Jw@ac3f0","33keQt8SdFIqvqSAY1yUSv@f9941","a4QhkPIuVF1aPlSE1eESC3@ac3f0","a88mYVh3ZMhLWefZN8iJlh@ac3f0","06+3n+f5VKaaMzRiV2DL9q@5a217","1ab8QTlfVCq6DUFNwxMM7o@a7cb0","5brUlo/IxAibFjFOWVegqx@01491","71EVySz6FBVLWw12yKrzg2","60gyGh13hN45fkhuH5L5E3@af529","508OLTCnZPz7smjwMlD59J@5b558","13197a6fd@6c48a","efflqohGhM4J2Hxw/saC6v@f9941","1e7de0b3c@6c48a","aaUqn5ocdDLZYcLK2toxeL@caa71","59ULXs6CZCOY80VtHQFS2X@c6160","82h/EJaC5B/rUD5h/wzhOh@f9941","36Iwdr2kRKgIgiVTEFSX96@f9941","a8up658iNIhplkjXshFrEe@f9941","a5tUNG35BGG64CwocBVjaA@eaa71","b2Rr4IZvNMhr4VJEjWcqzA@f9941","8aAtMhVZNP1qcKDttXRLis@f9941","07SwK8Ne5CHKdOoIC0xd8z@12a71","07SwK8Ne5CHKdOoIC0xd8z@5b30f","0831cpd21Anr0xsRQdBBkv@5b30f","0dXJ6biapOeohpFFivTS7D@c6160","160cK3mg5OZoO4dDbeGKor@2c3f2","1bHcaPL9VF3Lm88AvaNwvI@77ec7","1bHcaPL9VF3Lm88AvaNwvI@438fe","1bHcaPL9VF3Lm88AvaNwvI@42243","1bHcaPL9VF3Lm88AvaNwvI@ac3f0","1bHcaPL9VF3Lm88AvaNwvI@2c581","1bHcaPL9VF3Lm88AvaNwvI@f83c3","1bHcaPL9VF3Lm88AvaNwvI@0dcb8","1bHcaPL9VF3Lm88AvaNwvI@803f9","1bHcaPL9VF3Lm88AvaNwvI@79e35","1bHcaPL9VF3Lm88AvaNwvI@b1515","1bHcaPL9VF3Lm88AvaNwvI@2ecf8","1bHcaPL9VF3Lm88AvaNwvI@84ced","1bHcaPL9VF3Lm88AvaNwvI@67d12","1bHcaPL9VF3Lm88AvaNwvI@549c5","1bHcaPL9VF3Lm88AvaNwvI@a6d70","1bHcaPL9VF3Lm88AvaNwvI@734c6","1bHcaPL9VF3Lm88AvaNwvI@25b66","fd+bn0ExVPFawLpQLlYeJI@2c581","fd+bn0ExVPFawLpQLlYeJI@84ced","fd+bn0ExVPFawLpQLlYeJI@79e35","fd+bn0ExVPFawLpQLlYeJI@b1515","fd+bn0ExVPFawLpQLlYeJI@f83c3","fd+bn0ExVPFawLpQLlYeJI@0dcb8","fd+bn0ExVPFawLpQLlYeJI@2ecf8","fd+bn0ExVPFawLpQLlYeJI@803f9","fd+bn0ExVPFawLpQLlYeJI@a9790","fd+bn0ExVPFawLpQLlYeJI@da7de","fd+bn0ExVPFawLpQLlYeJI@438fe","23jBCFLnpCBJwQXJQ4CwUm@07568","23jBCFLnpCBJwQXJQ4CwUm@5b30f","ccpt3VjhtLip2NxIY0mecA","betySqTfdPPaPBO5Ghqsns@6c48a","e1r9YgU5tNRZvVA+DdqgQ9","6262J/+z5AL64wHT8iGhnG@aa492","6262J/+z5AL64wHT8iGhnG@2a925","89p5YeOodHdagnc6zUAiMS","deqDKcvalLT7wSdyMSQKJK","deLtUDkolFWI1cAExPGeDV@7d6c8","60ErW61FpEzb3k+PwfvCPp@8182a","66lPHAdWdM54CF4kqArdic@21811","ab99yYPkBJhJksYU84RzCO@c0665","46BKQUnitJ2ovHZ7jyEvy6@16d6f","8eq4ymAcVEfZZmAMt3z4Ft@36f08","9fmr3SnHlFrIXMLa7yX48Y@3e9cd","74VCyyhUFPlqw+tSEhjeHl@3f71c","afI7KemC1Guos0LzoHq9Ls@49299","b3mJlTcT5FO6HX/Hod13Kz@b74e2","c0c7egjONMTb8ejGcuadkR@b43d4","4b5EWkkAZE/7Y3Wzs8vMY1","30p0aUh6xBObJtP9jlotVF@e68e6","30p0aUh6xBObJtP9jlotVF@438fe","30p0aUh6xBObJtP9jlotVF@2c581","30p0aUh6xBObJtP9jlotVF@b1515","30p0aUh6xBObJtP9jlotVF@a9790","30p0aUh6xBObJtP9jlotVF@79e35","30p0aUh6xBObJtP9jlotVF@f83c3","30p0aUh6xBObJtP9jlotVF@0dcb8","30p0aUh6xBObJtP9jlotVF@2ecf8","30p0aUh6xBObJtP9jlotVF@803f9","30p0aUh6xBObJtP9jlotVF@84ced","1b3aVkNXZGbb12l6Kdx2HY","9dOrAmrvpLj60hwPRvEFRH","b4Xh1pN11FFqulIQ9aWemb","46BKQUnitJ2ovHZ7jyEvy6@5b30f","e2r0kxGBNLg6e7UCLIDD5Q","f7QBB6XHNGqpvj36JZSi16@274bb","f7QBB6XHNGqpvj36JZSi16@438fe","0boTIkr6dJyJByEKjDlvad","f5cMTSpgZJcIoMGPFz8mPO@f9941","dffa7xTdNJ3pqHjPcjZDGL@f9941","cb0nG0rUBNuIn2OARXlqkh","a2IImmmkNM1bwVvVE/BxhJ","21B/ZKbsxKd7dhDRdlRx7t","8bVQVgjxxJNpr9nxzws8rf@f9941","7dC31g4gtGSKaCpQZS1u+o@f9941","ca95evxdpLca+5ICcs/Sq2@f9941","56FDs++axFHroM8HSRnB5p@f9941","31jUbE72lLlpGAbuEdh5Tq@f9941","240IbWbgJEq58c1i5VK/1b@f9941","7c0ry80PlNxrc77Lx/Zrbk@f9941","508GRqYWhDnKwc4IME5SHo@f9941","30scPbQ0tHLJWoGDO0n0Zr","c1fsW6Hd5D1KpDXGbooYAc@f9941","11G01nBfBNDKracJKvIIp4@f9941","a240Zpd39JVJ/2qQkgVq3Y@f9941","20irTVYTFLLJCRAHWXBkjM@f9941","fdguHeGOhL4qhRAnIPPbG/@f9941","8epTw98txCKZrcPmtiGNgM@f9941","8dah0fkbxAn5xVppq4w5G7@f9941","c0PgpcviNIJqlqEM812wrO@f9941","55VHIOzJ9Mxaq0/mmrKQin","b2pPk4Zf9G4KurYjDXYAWa@700ec","b2pPk4Zf9G4KurYjDXYAWa@438fe","ab9QfJ6JxJZLRxBZbJHxjC@cae50","ab9QfJ6JxJZLRxBZbJHxjC@fe8b3","ab9QfJ6JxJZLRxBZbJHxjC@d5c35","ab9QfJ6JxJZLRxBZbJHxjC@5a639","ab9QfJ6JxJZLRxBZbJHxjC@6982a","e0t8HyxClN+KiNr6wRvqf/","cd6QXeqsxPi6Z06g5FBSPl","62lFzr6d1CwqT6Doxzqm9R@7df16","62lFzr6d1CwqT6Doxzqm9R@438fe","1drASGrVlMWJLCTVAAsV5R","a5aRR+vAhKyrTrAD1+askg","58D1IjOVJLPpONBi869EGZ@6c48a","d5WA4CKDZFQZJgBjASafVr","e03EajarFIlpmP+U2Rv800","59ULXs6CZCOY80VtHQFS2X@320af","f7k9kVKRxHJ5K1kulPK7gy","60ErW61FpEzb3k+PwfvCPp@5b30f","61wSCwCn1ObIccFY28KD1l@5b30f","6262J/+z5AL64wHT8iGhnG@12176","66lPHAdWdM54CF4kqArdic@5b30f","6e5d/5In1F+qOVgdFwONlW@ff19d","6e5d/5In1F+qOVgdFwONlW@438fe","6e5d/5In1F+qOVgdFwONlW@2c581","6e5d/5In1F+qOVgdFwONlW@79e35","6e5d/5In1F+qOVgdFwONlW@b1515","6e5d/5In1F+qOVgdFwONlW@f83c3","6e5d/5In1F+qOVgdFwONlW@0dcb8","6e5d/5In1F+qOVgdFwONlW@2ecf8","6e5d/5In1F+qOVgdFwONlW@803f9","6e5d/5In1F+qOVgdFwONlW@84ced","6e5d/5In1F+qOVgdFwONlW@a9790","6e5d/5In1F+qOVgdFwONlW@2fd2b","70Bcy6IKtGKJt3M8TewvXu","74VCyyhUFPlqw+tSEhjeHl@5b30f","2fZNklDsRDZZqqT+1hvvgV","7aCc9ii0dEAIrwcu+f7dsh@5b30f","095XHcDpxJ7qV9LoP0eFgv@6c48a","84CCtPNSBEp7d34XPliSTx@1fbcb","84CCtPNSBEp7d34XPliSTx@c28f0","84CCtPNSBEp7d34XPliSTx@7ff75","84CCtPNSBEp7d34XPliSTx@8e342","84CCtPNSBEp7d34XPliSTx@c0964","84CCtPNSBEp7d34XPliSTx@438fe","8eq4ymAcVEfZZmAMt3z4Ft@5b30f","ecpfrjIwxG4ZSefUPwS2Jf@f9941","c9zDQtptlAi5uoADZ5361q","dd2sovHlNMLog4+nXTt0Jw@2c581","dd2sovHlNMLog4+nXTt0Jw@84ced","dd2sovHlNMLog4+nXTt0Jw@79e35","dd2sovHlNMLog4+nXTt0Jw@b1515","dd2sovHlNMLog4+nXTt0Jw@f83c3","dd2sovHlNMLog4+nXTt0Jw@0dcb8","dd2sovHlNMLog4+nXTt0Jw@2ecf8","dd2sovHlNMLog4+nXTt0Jw@803f9","dd2sovHlNMLog4+nXTt0Jw@a9790","dd2sovHlNMLog4+nXTt0Jw@989ed","85rp13L+FO3ZTfKzDIQkeJ","dd2sovHlNMLog4+nXTt0Jw@743bc","dd2sovHlNMLog4+nXTt0Jw@438fe","9fmr3SnHlFrIXMLa7yX48Y@5b30f","ac9m2QVaZHfLhSEDln2k0o","a4QhkPIuVF1aPlSE1eESC3@f6cce","a4QhkPIuVF1aPlSE1eESC3@438fe","a4QhkPIuVF1aPlSE1eESC3@2c581","a4QhkPIuVF1aPlSE1eESC3@b1515","a4QhkPIuVF1aPlSE1eESC3@a9790","a4QhkPIuVF1aPlSE1eESC3@79e35","a4QhkPIuVF1aPlSE1eESC3@f83c3","a4QhkPIuVF1aPlSE1eESC3@0dcb8","a4QhkPIuVF1aPlSE1eESC3@2ecf8","a4QhkPIuVF1aPlSE1eESC3@803f9","a4QhkPIuVF1aPlSE1eESC3@84ced","58HmOeWGND6YtuB1y+hYBM","dfgKQvAhdPBptDqRUtQppv@c0d28","a88mYVh3ZMhLWefZN8iJlh@6cf84","a88mYVh3ZMhLWefZN8iJlh@438fe","a88mYVh3ZMhLWefZN8iJlh@2c581","a88mYVh3ZMhLWefZN8iJlh@79e35","a88mYVh3ZMhLWefZN8iJlh@b1515","a88mYVh3ZMhLWefZN8iJlh@f83c3","a88mYVh3ZMhLWefZN8iJlh@0dcb8","a88mYVh3ZMhLWefZN8iJlh@2ecf8","a88mYVh3ZMhLWefZN8iJlh@803f9","a88mYVh3ZMhLWefZN8iJlh@84ced","a88mYVh3ZMhLWefZN8iJlh@a9790","abv7HgVkVDEa7wAX9hIl3l@6c48a","ab9QfJ6JxJZLRxBZbJHxjC@65acf","ab99yYPkBJhJksYU84RzCO@5b30f","afI7KemC1Guos0LzoHq9Ls@5b30f","b3mJlTcT5FO6HX/Hod13Kz@5b30f","ebKpsMQQxJxojbvRNfU08o@6c48a","c0c7egjONMTb8ejGcuadkR@5b30f","e0xJjVOqJA2YD3UQRtxsxu@f9941","d6lBFRl21F/YvhL3/+QSRz","deLtUDkolFWI1cAExPGeDV@5b30f","444/coFq9FCoxAVKpKVi+U","63p6BdcjhH+pf+s5i0kw/3","787hBlP2tBx6FpDKR2NuZ8","f7Bl1dYOlGQbd2zyhTHh+7","944vZIk0xGy45OloVZ3sgp","3daB1dt3tGeI+OyG9aNcFJ","41eLo59L9NQ4jU7EeH2c3k@6c48a","06+3n+f5VKaaMzRiV2DL9q@be90b","06+3n+f5VKaaMzRiV2DL9q@fddea","07SwK8Ne5CHKdOoIC0xd8z@e3cf8","0831cpd21Anr0xsRQdBBkv@e3cf8","0831cpd21Anr0xsRQdBBkv@ccbd5","e0vQ+jxw1CcpcuYt4ztaEm@f9941","0dXJ6biapOeohpFFivTS7D@6e70c","0dXJ6biapOeohpFFivTS7D@b1faf","160cK3mg5OZoO4dDbeGKor@c511c","160cK3mg5OZoO4dDbeGKor@cae2f","1ab8QTlfVCq6DUFNwxMM7o@be90b","1ab8QTlfVCq6DUFNwxMM7o@fddea","1bHcaPL9VF3Lm88AvaNwvI@3cdc1","1bHcaPL9VF3Lm88AvaNwvI@a0427","98xLej0K5DqbTavizErXth@f9941","406xMMtNxJz5j3UvsPWHGo","23jBCFLnpCBJwQXJQ4CwUm@e3cf8","84WfhMphBDdrtku4CTnG4C","35aoJX3xhOJZ7IbKwQLZm4","bbyKWaiUhBILFIaDoXlElH","324/242BpECIUjJVdyzNMB","eadHiwQI1AUrcD8NI1Xglf","f3W3ohbFRCCaMp+ns9ACVB","30p0aUh6xBObJtP9jlotVF@adc5c","30p0aUh6xBObJtP9jlotVF@8b7bb","22Sv9kHUxNm5wQmpYuriDe@f9941","d3/ZG2Nq1LhaO8hqrkjcyf@6c48a","96iGVSgndMapePO7/d3GSo@6c48a","724LHufd9J+a2uiLGOdzGR@6c48a","53wZdvKRZML55AygrofcJz","dcUdwTSMJDdZBrZGJzUlRl","491kpyR9xJZqhHUzD/sEdo@f9941","20L8sCfopODK95NG0Q5Z8d@6c48a","55yd8KnBhK95n0S/7evIhG@f9941","c19H2ZvK5BM5otDC2TJF+U@f9941","88adoQvJ5AE6enyL4x5OMb@cd952","88adoQvJ5AE6enyL4x5OMb@9e2de","88adoQvJ5AE6enyL4x5OMb@580a7","88adoQvJ5AE6enyL4x5OMb@db9f1","7di/+l0LBFwrFA/NOu5Ryg","fdoJXLgx1GAa2UhGATlj3o","4cgWks6wJBTr1bix4YjIbQ@f9941","433HVWiv1MvJ3Uq5atZ2Ge@f9941","15LnVO2OlHb6PiNeX0JlbM@f9941","9feo575slFL5qydtFkkQj/@f9941","433HVWiv1MvJ3Uq5atZ2Ge@6c48a","46BKQUnitJ2ovHZ7jyEvy6@e3cf8","abd1tYuO5GvogAIDqk5T7v","9aKBPaQXdHt7usmG5O8WFt","0fz1J/DIVJ4Zp3JLC4aY50@f9941","163EM9mJ1K54zB/wc767d5@f9941","4cgWks6wJBTr1bix4YjIbQ@6c48a","4cs6EWZ1VM2IHbS7H6wj2C@fddea","4cs6EWZ1VM2IHbS7H6wj2C@be90b","4cs6EWZ1VM2IHbS7H6wj2C@df79d","696yELaMFFBol1xYbd25bn","52UmKbB0JEaYf3H1BOJtLb","ebCEsLhWpD/50/c0xazkYH","1dycITEuRAI6PaX2QIE8pw","97XIbE0IJN8phbdI6ONJsO","34Y/Vm1vtCEqERYQv3NFzU","2cGHFKxXVHDLfVO5hrTKwy","96NqF5D89Crb25B8qDEEQt","d6U+SsvuFDuJK1BOnVNumF","508OLTCnZPz7smjwMlD59J@4600c","508OLTCnZPz7smjwMlD59J@c21b7","508OLTCnZPz7smjwMlD59J@5227b","051iZBj6NI4LkohiaRBOAu","bfWWTG/RVLXoX8XbtmmP+d@f9941","062ceg3txIHZqlicQ9VHGd@6c48a","7b6nO+QllERqjg0WYl8/MK","89kku7yJpD85nVpzF02cKs@6c48a","1eyKcukm5J5b0oxWNeMRF9","eelXhVyMRObazbp8KxoHWp","59ULXs6CZCOY80VtHQFS2X@9d630","5brUlo/IxAibFjFOWVegqx@be90b","5brUlo/IxAibFjFOWVegqx@fddea","4e6ASrrshPFbQlMs3QGsh4","a4lSXzVadOuoU4DxIiKeuZ","59E9Pmuo9Ahr51+VuDum7Q","770CvTJjhNKZOeF7ZsPAv8","7cXiod2xBAlbANnrbxejzs","48PfAzH3RJeqBhmhm+EiJj","d5E9Whe2ZPF49yA63PZhv4","05A6AmkKlHW7trjyXAFVIw","a8DudX1+JLRpSZkztdRSQN","413LLdR1BNtr0hTU1RAllI","34tSGdX6BJv5cafCXNcmGS","ccqtoNkh5B/K6/zP6rasZS","22KKFRHWpAeary8XOXdBeQ","d5hb9p0H5IU7MjjSTTYTgm","e5IwBbccxIuow8KahXxzVm","e0ApDer0BPpaXfaAn1OFBY","9b7FAg/BVBV6nubo8j9bM4","249nCaE7hIWaSHBFOAX2fE","60ErW61FpEzb3k+PwfvCPp@e3cf8","60gyGh13hN45fkhuH5L5E3@5227b","60gyGh13hN45fkhuH5L5E3@4600c","60gyGh13hN45fkhuH5L5E3@c21b7","61wSCwCn1ObIccFY28KD1l@e3cf8","61wSCwCn1ObIccFY28KD1l@f620b","62lFzr6d1CwqT6Doxzqm9R@eb2d4","62lFzr6d1CwqT6Doxzqm9R@163e8","6262J/+z5AL64wHT8iGhnG@1cf40","6262J/+z5AL64wHT8iGhnG@cc04f","1ahA6OJ3hCE7JTkLm/83UG@6c48a","66lPHAdWdM54CF4kqArdic@e3cf8","65Yrylyi9Pj5G7VkB3P9iQ@6c48a","6e5d/5In1F+qOVgdFwONlW@958b3","6e5d/5In1F+qOVgdFwONlW@0edaf","97buOjJiNGQpAA8CMY/TDE@6c48a","74VCyyhUFPlqw+tSEhjeHl@e3cf8","7aCc9ii0dEAIrwcu+f7dsh@e3cf8","7aCc9ii0dEAIrwcu+f7dsh@fed65","4265k0sJFFh4IoLKXonRcs","9cPPKwOlBHgrv43p02o29N@f9941","7eVcPIbR5I1aH4oFQvffz9@8bf0b","7eVcPIbR5I1aH4oFQvffz9@2c8ed","c6F2Y8Bd9P3pHMf/TTiFnB@6c48a","73gumfuq1AHZaON3DtJxWv@6c48a","36TD0aeulGOq2+FiDDxCVR@6c48a","523qym62NHwbRRfXn3ecFi","9aVzaif7FEPL930cs7R3iW@6c48a","16uV2JcDVEsYBaH61UGk6g@6c48a","12xHBA7w5KN61sw6aEa2ck@6c48a","8epTw98txCKZrcPmtiGNgM@6c48a","8eq4ymAcVEfZZmAMt3z4Ft@e3cf8","22SPOrKyRL4p0X3Y7OYHfk@6c48a","64E1bcbwlG5pT3sfvfSswv@6c48a","81JxK28h5CFbIJ2KSb7W9T","2eFDJy0a5Cv4qWz+PcN8r0@f9941","a62D9iukVGvafS1WKrSRyH","f5UALSUoJNtZ/gmwfJc38R","46O+Mt2aNJwYz33PqzYwi7","72xGU27e9Pm4C3PFItLJiI","9cPPKwOlBHgrv43p02o29N@6c48a","9fmr3SnHlFrIXMLa7yX48Y@e3cf8","09ZycOnvBBro0K8im6SyS5@f9941","5deZlkNYZLzIrQBrs3npHD","a4QhkPIuVF1aPlSE1eESC3@f3416","a4QhkPIuVF1aPlSE1eESC3@958b3","4bkklVHntCroZhBxUuwgVz","a5tUNG35BGG64CwocBVjaA@be90b","a5tUNG35BGG64CwocBVjaA@fddea","a88mYVh3ZMhLWefZN8iJlh@58717","a88mYVh3ZMhLWefZN8iJlh@60318","a4p7jiTvJEhI0JwTlStgGL@6c48a","ab9QfJ6JxJZLRxBZbJHxjC@af548","ab9QfJ6JxJZLRxBZbJHxjC@c6160","ab9QfJ6JxJZLRxBZbJHxjC@438fe","ab9QfJ6JxJZLRxBZbJHxjC@caa71","ab9QfJ6JxJZLRxBZbJHxjC@d3609","ab9QfJ6JxJZLRxBZbJHxjC@1c01a","ab9QfJ6JxJZLRxBZbJHxjC@668f9","ab9QfJ6JxJZLRxBZbJHxjC@ee043","ab9QfJ6JxJZLRxBZbJHxjC@9a9bb","ab99yYPkBJhJksYU84RzCO@e3cf8","afI7KemC1Guos0LzoHq9Ls@e3cf8","b07i9zzQhDb78NN7Qzp49t@be90b","b07i9zzQhDb78NN7Qzp49t@0ed46","b07i9zzQhDb78NN7Qzp49t@fddea","b2pPk4Zf9G4KurYjDXYAWa@be63d","b2pPk4Zf9G4KurYjDXYAWa@3e201","b3mJlTcT5FO6HX/Hod13Kz@e3cf8","57mS1wqVFMVJwTsoTVxvVr@f9941","fa5t6mym1LtbVDmFcTZt8v","c0c7egjONMTb8ejGcuadkR@e3cf8","b0/JnvPPRL9a5UhgGLzFbp@6c48a","76OuKgg0lH+K+eYz7cWz/M@6c48a","beRZ0Yw+VBMIN624US7zdD@6c48a","97G9sjP/ZD67QiHDAWWjZj","b7C6ZCMYxMrZWYnoNAi9oa","d11XxHuR9O2Zb4+8+WPAi1","62+Fz3ACZOp6EmxF9Up0Ul","02VDWtzQRMh7c98TjT+g0/@f9941","e34rTCtjtGUKq/hZ8Uarv4@f9941","e2TZg8BSBHcpuY4dZCNmgH@6c48a","920uN3d0pFq7QlDMI/l5rl","91e5bqTsBFGZ7CLdzBsBF4@6c48a","1cP73ctqBJ8Kz2HTgxvk23@6c48a","dd2sovHlNMLog4+nXTt0Jw@66c2c","dd2sovHlNMLog4+nXTt0Jw@d4958","deLtUDkolFWI1cAExPGeDV@e3cf8","dfgKQvAhdPBptDqRUtQppv@fc89a","dfgKQvAhdPBptDqRUtQppv@9d0e0","dfgKQvAhdPBptDqRUtQppv@0041c","dfgKQvAhdPBptDqRUtQppv@09868","c5xqhSVzBKVZWSXu2oLBHi","acL4T1NRZNC7Auo9E6GYQa","84XjUfwbZFkb+Cg8M1O9DD@f9941","33pMoGLAdHS6wtfv9ebKPK@f9941","d5yxFG1QRFjbitgcvy1QZ2","e0M88rVztPIrZw/71rIAU2","ee8ujOAtBN+YI7gPo7O54l","45CekgLTJH7o1v4N2qd5Ar@6c48a","634wrQyDpIl6bDfF+jY7jE","c9ITfnqWlGabJwQPBr3XUf","9dsSOANqBKWYYH4WSNVscz@6c48a","b5snqx50BDmLQHhI/CssiX@6c48a","d1NGQ2rJZCcbhjH0/erZWw","51VnDZIClNmapNduJQb7MD@f9941","d6nFvo2sBMdp2IpEiuqDHi@f9941","49hMQh+rBA8J6gJLp2P1I/@f9941","f3cc00tMVFvK/2E7aFCYB+@f9941","f3NNqfLGpPqoqsbNYjQrRA@be90b","f3NNqfLGpPqoqsbNYjQrRA@fddea","5f8Zmn1gZJW5UVkMnUmQFW","25fYQFYXlObL8cB3TpQ6Iw","8aRi4qNztDp62U57VG3Mel@f9941","04WNmt16tLoLgSCwPacxFh@f9941","43VpIMgIpClII6WbUeEUjb@f9941","f7QBB6XHNGqpvj36JZSi16@5c895","c2eL/tNB9M1aKPBki0Br7X","4cevAlP5lOSYwLtcfnhZN+@f9941","fd+bn0ExVPFawLpQLlYeJI@67be6","fd+bn0ExVPFawLpQLlYeJI@11873"],["node","_parent","_spriteFrame","_customMaterial","root","_textureSource","_mesh","_defaultClip","_effectAsset","data","mainTexture","target","source","_skeleton","transparencyMap","_font","_material","targetInfo","asset","spriteFrame","oddsText","_normalSprite","_file","bottom","top","right","left","cursorNode","meshRenderer","rotNode","hitFxPrefab","attackFxPrefab","clockTimerUIPrefab","_cpuMaterial","_gpuMaterial","_mainTexture","prefabRootNode","scene","normalTexture","shineTexture","contentText","normalCannonPivot","normalCannonPrefab","changeFxPrefab","glowTexture","diffuseTexture","lightNode","moveNode","queenCannonPrefab","normalBulletPrefab","axeBulletPrefab","axeBulletTrackFxPrefab","axeModelPrefab","smallCoinPrefab","bossCoinPrefab","winNumPrefab","missTextPrefab","bossComingPrefab","waterRipplePrefab","waterSplashPrefab","noiseTexture","heartFxNode","petrificationFxPrefab","magicLightFxPrefab","stoneBrokenFxPrefab","timeText","lightBGNode","explosionPrefab","glassBrokenFxPrefab","toast","blackScreenNode","plusBetBtn","minusBetBtn","playerCoinsText","playerBetText","sessionText","locationHintNode"],["cc.SpriteFrame","cc.Texture2D",["cc.Node",["_name","_layer","_active","_objFlags","__editorExtras__","_id","_prefab","_components","_parent","_children","_lpos","_lscale","_lrot","_euler"],-3,4,9,1,2,5,5,5,5],"cc.ImageAsset",["cc.Sprite",["_sizeMode","_dstBlendFactor","_isTrimmedMode","_type","node","__prefab","_spriteFrame","_customMaterial","_color"],-1,1,4,6,6,5],["cc.Node",["_name","_layer","_prefab","_parent","_lrot","_euler","_components","_children","_lpos","_lscale"],1,4,1,5,5,2,9,5,5],["cc.MeshRenderer",["_shadowReceivingMode","_shadowCastingMode","_name","node","__prefab","_materials","lightmapSettings","_mesh"],0,1,4,3,4,6],["cc.Node",["_name","_active","_layer","_prefab","_lpos","_components","_lrot","_euler","_parent","_children","_lscale"],0,4,5,12,5,5,1,12,5],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_enableWrapText","_isSystemFontUsed","_spacingX","_overflow","_horizontalAlign","_verticalAlign","_underlineHeight","_isBold","node","__prefab","_font"],-9,1,4,6],["cc.SkeletalAnimation",["playOnLoad","_useBakedAnimation","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.Widget",["_alignFlags","_left","_right","_top","_bottom","_originalWidth","_originalHeight","node","__prefab","_target"],-4,1,4,1],["cc.ParticleSystem2D",["_dstBlendFactor","emissionRate","life","lifeVar","angleVar","startSize","speed","speedVar","tangentialAccel","_custom","_positionType","startSizeVar","endSize","_name","duration","endSizeVar","angle","endSpin","endSpinVar","tangentialAccelVar","radialAccel","radialAccelVar","node","__prefab","_startColor","_endColor","_customMaterial","gravity","_startColorVar","_file","posVar","_spriteFrame","_endColorVar"],-19,1,4,5,5,6,5,5,6,5,6,5],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.Material",["_defines","_name","_states","_techIdx","_props"],-1,12],["cc.SkinnedMeshRenderer",["_shadowReceivingMode","_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],1,1,4,3,4,1,6,6],["cc.Prefab",["_name","optimizationPolicy"],1],["cc.Node",["_name","_children","_components","_prefab","_lrot","_euler","_lscale","_lpos"],2,2,2,4,5,5,5,5],["cc.Node",["_name","_children","_components","_prefab","_parent","_lrot","_lscale","_euler"],2,12,9,4,1,5,5,5],["cc.CurveRange",["constant","mode","constantMin","constantMax"],-1],["cc.Button",["_transition","_zoomScale","node","__prefab","_normalSprite"],1,1,4,6],["bff92KP9EJFQ6/76WiJo/eS",["_string","_actualFontSize","_fontSize","_lineHeight","_enableWrapText","_overflow","_isBold","_spacingX","node","__prefab","_color"],-5,1,4,5],["cc.LabelOutline",["_width","node","__prefab","_color"],2,1,4,5],["cc.Node",["_name","_objFlags","__editorExtras__","_prefab","_children","_components","_parent"],0,4,2,12,4],["cc.Node",["_name","_layer","_parent","_children","_components","_prefab","_lpos"],1,1,2,12,4,5],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.PrefabInfo",["fileId","root","instance","asset","targetOverrides"],2,1,4,6,9],["dd5ab+VncJNL62qvX8nNZBZ",["isNormalMonster","hitBackMaxDist","oddsList","maxHitCnt","node","__prefab","monsterAnims","aimNodes","colliders","oddsText"],-1,1,4,2,2,2,1],["78a67/+LbZNJ6UO9Dj7LNsD",["useInstancing","node","__prefab","meshRenderers"],2,1,4,2],["cc.Animation",["playOnLoad","node","__prefab","_clips","_defaultClip"],2,1,4,3,6],["cc.BoxCollider",["_isTrigger","node","__prefab","_size","_center","_material"],2,1,4,5,5,6],["cc.GradientRange",["_mode","color","gradient"],2,5,4],["cc.AlphaKey",["alpha","time"],1],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode"],2,9,1],["cc.TargetOverrideInfo",["propertyPath","target","targetInfo","source"],2,1,4,1],["cc.Camera",["_projection","_priority","_orthoHeight","_far","_visibility","_clearFlags","node","__prefab","_color"],-3,1,4,5],"cc.SpriteAtlas",["cc.AudioClip",["_name","_native","_duration"],0],["cc.Node",["_name","_children","_components","_prefab","_lrot","_lscale","_euler"],2,12,2,4,5,5,5],["cc.CompPrefabInfo",["fileId"],2],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.ModelLightmapSettings",[],3],["cc.BitmapFont",["_name","fontSize","fntConfig"],0],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.RigidBody",["_group","_type","node","__prefab"],1,1,4],["54b3dZegeNNOrVwh3UnBfEW",["isBossMonster","oddsList","node","__prefab","monsterAnims","aimNodes","colliders","attackFxPrefab","clockTimerUIPrefab"],1,1,4,2,2,2,6,6],["ce586Jwu4dHL69MYH0RNiIy",["node","__prefab"],3,1,4],["23681h4cBRJwZT9Z0yN+YOx",["node","__prefab"],3,1,4],["cc.DirectionalLight",["_shadowEnabled","_shadowPcf","_shadowSaturation","_csmLevel","_shadowFixedArea","_shadowNear","_shadowFar","_shadowOrthoSize","node","__prefab","_color","_staticSettings"],-5,1,4,5,4],["cc.StaticLightSettings",[],3],["cc.ParticleSystem",["startRotation3D","duration","_aabbHalfX","_aabbHalfY","_aabbHalfZ","_dataCulling","_prewarm","_capacity","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","renderer"],-5,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.Gradient",["alphaKeys"],3,9],["cc.ShapeModule",["_enable","_shapeType","length","_angle","arcSpeed","_scale"],-1,4,5],["cc.ParticleSystemRenderer",["_renderMode","_useGPU","_alignSpace","_mesh","_cpuMaterial","_gpuMaterial","_mainTexture"],0,6,6,6,6],["cc.SceneAsset",["_name"],2],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.Canvas",["_alignCanvasWithScreen","node"],2,1],["cc.TargetInfo",["localID"],2],["cc.Scene",["_name","autoReleaseAssets","_children","_prefab","_globals"],1,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5],["cc.ShadowsInfo",["_enabled","_type","_shadowColor","_size"],1,5,5],["cc.SkyboxInfo",["_useHDR"],2],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["34e9bj9PbpAB7jFZUXrqZCj",["node","__prefab","left","right","top","bottom"],3,1,4,1,1,1,1],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.LabelShadow",["_blur","node","__prefab","_color","_offset"],2,1,4,5,5],["8a9186QtEVL+a3eVbp8Y+OV",["node","__prefab","pivotNode","contentText"],3,1,4,1,1],["6169ee5JrVJjZ/zn6vYo383",["node","__prefab","cursorNode"],3,1,4,1],["c6efbo2rYhG8ZzR8riyIheD",["node","__prefab","normalCannonPivot","axeThrowPivots","normalCannonPrefab","changeFxPrefab"],3,1,4,1,2,6,6],["065aaClfoVGGaktqR57EFic",["glowing","node","__prefab","meshRenderer","moving"],2,1,4,1,5],["5f5e4xMk1JGqZfKsiLzgu6G",["node","__prefab","moveNode","rotNode","lightNode","hitFxPrefab"],3,1,4,1,1,1,6],["98a8ceZmqJH7rt2sZa1J+Uo",["node","__prefab","monsterPrefabs","queenCannonPrefab","normalBulletPrefab","axeBulletPrefab","axeBulletTrackFxPrefab","axeModelPrefab","smallCoinPrefab","bossCoinPrefab","winNumPrefab","missTextPrefab","bossComingPrefab","waterRipplePrefab","waterSplashPrefab"],3,1,4,3,6,6,6,6,6,6,6,6,6,6,6,6],["ba352QJP2hI/57jk4wRXEdj",["isSpecialMonster","hitBackMaxDist","maxHitCnt","oddsList","node","__prefab","monsterAnims","aimNodes","colliders","oddsText","heartFxNode","petrificationFxPrefab","magicLightFxPrefab","stoneBrokenFxPrefab"],-1,1,4,2,2,2,1,1,6,6,6],["92466bMH11EPrIe1fnWyAUU",["node","__prefab","rotNode","hitFxPrefab"],3,1,4,1,6],["cc.ParticleAsset",["_name","_native"],1],["92ddena355CAJX0VeNg/pt5",["node","__prefab","timeText"],3,1,4,1],["cc.Layout",["_resizeMode","_layoutType","_spacingX","node","__prefab"],0,1,4],["9a717fq0whErYgz/TjM+b5x",["isSpecialMonster","hitBackMaxDist","maxHitCnt","oddsList","node","__prefab","monsterAnims","aimNodes","colliders","oddsText","lightBGNode","explosionPrefab","glassBrokenFxPrefab"],-1,1,4,2,2,2,1,1,6,6],["70fa928PtNCcZvsXNQKVFFh",["node","__prefab"],3,1,4],["eddb44fuedAkaRRnjMbkOmr",["node","__prefab"],3,1,4],["c35afVxNP9MhKZ3SNf03MsK",["__prefab","lstFuncBtn","lstFuncBtnFx","lstFuncBtnCost","lstFuncBtnName"],3,4,2,2,2,2],["1a13aE5xjZMs4t9B/A6DFt0",["node","__prefab"],3,1,4],["495daYmr7pLHaRJnstXPUSd",["node","__prefab"],3,1,4],["94712DiPYlOmbWcQipkuTnf",["node","__prefab"],3,1,4],["1fa10p2fVpLhbtMp8tgHSbs",["node","__prefab"],3,1,4],["25105/RSTZP2L02gEEuwI8M",["node","__prefab"],3,1,4],["60cddKwsYdEB4ZLq3a5U+nO",["node","__prefab"],3,1,4],["1ffc26Wtj9PULuC9ZYwWo8L",["node","__prefab"],3,1,4],["aed29q0X5NEnqte/Iy6p1vR",["node","__prefab"],3,1,4],["819e0ivTqxPD46918g9gWGI",["node","__prefab"],3,1,4],["f7368jQW95DXJ73KtTLgq69",["node","__prefab"],3,1,4]],[[13,0,1,2,2],[39,0,2],[12,0,1,2,1],[2,0,8,9,6,10,12,13,2],[25,1,2,1],[5,0,3,7,2,8,4,5,2],[2,0,8,6,10,12,13,2],[42,1],[12,0,1,2,3,1],[2,0,8,7,6,10,11,2],[2,0,8,6,10,2],[4,0,2,4,5,8,6,3],[2,0,8,6,10,12,11,13,2],[4,1,0,2,4,5,8,7,6,4],[61,0,2],[25,0,1,2,2],[2,0,8,6,12,11,13,2],[2,0,1,8,7,6,10,3],[41,0,1,2,3],[16,1],[2,0,9,6,10,12,13,2],[29,0,1,2,3,4,2],[2,0,1,8,9,7,6,10,3],[14,1,2,0,4,4],[4,1,4,5,8,7,6,2],[12,0,1,1],[14,1,3,2,0,4,5],[2,0,8,7,6,11,2],[2,0,8,7,6,12,11,13,2],[2,0,2,1,8,7,6,11,4],[6,3,4,5,6,7,1],[37,0,1,2,4],[2,0,9,6,2],[16,0,2],[4,0,2,4,5,6,3],[4,4,5,6,1],[59,0,1,2,2],[2,0,1,8,7,6,3],[2,0,8,7,6,10,2],[4,1,0,2,4,5,7,6,4],[29,1,2,3,4,1],[34,0,1,2,2],[34,0,3,1,2,2],[7,0,9,3,4,6,7,2],[2,0,8,7,6,12,13,2],[2,0,1,9,7,6,3],[2,0,1,8,9,7,6,3],[2,0,9,7,6,2],[2,0,8,9,6,2],[2,0,2,8,7,6,10,12,11,13,3],[6,0,3,4,5,6,7,2],[70,0,1,1],[2,0,2,8,9,7,6,10,12,11,13,3],[2,0,8,6,10,11,2],[2,0,8,9,6,12,13,2],[2,0,8,6,2],[2,0,8,9,6,10,11,2],[2,0,1,8,7,6,11,3],[2,0,2,1,8,7,6,10,4],[58,0,1,2,3],[2,0,8,7,6,10,12,13,2],[2,0,1,8,7,6,12,11,13,3],[7,0,8,9,3,4,6,7,2],[9,2,3,4,5,1],[15,2,3,4,5,6,7,8,1],[45,0,1,2,3,4],[46,0,1,2,3,3],[2,0,8,7,6,2],[4,0,2,4,5,7,6,3],[4,4,5,7,6,1],[28,0,1,2,3,2],[21,0,1,2,3,5,4,6,8,9,8],[2,0,9,7,6,11,2],[2,0,1,9,7,6,10,3],[6,1,0,3,4,5,6,7,3],[10,0,5,6,7,8,4],[2,0,9,6,12,13,2],[2,0,8,9,7,6,2],[2,0,8,9,6,11,2],[2,0,8,6,11,2],[7,0,1,2,8,5,3,4,4],[5,0,7,2,8,4,5,2],[26,0,1,2,3,2],[6,2,0,3,4,5,6,7,3],[4,4,5,8,6,1],[4,3,0,4,5,8,6,3],[4,1,4,5,7,6,2],[4,3,0,4,5,8,7,6,3],[4,1,0,4,5,7,6,3],[33,0,2,1,2],[20,2,3,1],[22,1,2,3,1],[2,3,4,8,6,3],[2,0,8,9,6,10,2],[23,0,4,5,3,2],[15,1,0,2,3,4,5,6,3],[30,0,1,2,4,3,2],[19,1],[10,0,7,8,2],[16,0,1,3],[2,0,8,9,7,6,12,13,2],[2,0,8,9,6,10,12,11,13,2],[2,0,8,9,7,6,10,11,2],[2,0,3,1,8,9,7,6,4],[2,0,2,1,9,7,6,4],[2,0,2,1,8,7,6,4],[2,0,1,7,6,10,3],[2,0,3,1,8,7,6,4],[7,0,8,5,3,4,2],[7,0,2,8,5,3,4,3],[24,0,1,2,3,4,5,6,3],[8,0,1,2,3,4,5,12,13,7],[8,0,1,2,3,7,4,5,6,12,13,14,9],[6,1,3,4,5,6,7,2],[43,0,1,2,4],[4,0,4,5,6,2],[4,3,0,4,5,6,3],[21,0,1,2,3,4,8,9,10,6],[2,0,8,7,6,10,12,11,13,2],[2,0,8,9,7,6,10,2],[2,0,1,8,7,6,10,11,3],[2,0,1,8,7,6,10,12,11,13,3],[2,0,2,1,8,9,7,6,4],[18,0,1,2,3,2],[14,3,2,0,4,4],[44,0,1,2,4],[9,0,2,3,4,2],[30,0,1,2,3,5,2],[2,0,9,6,10,2],[2,0,2,1,9,7,6,10,4],[2,0,2,1,8,7,6,10,11,4],[2,0,3,1,8,7,6,10,4],[2,0,1,8,7,6,10,12,13,3],[5,0,3,6,2,8,4,5,2],[17,0,1,2,3,4,6,5,2],[40,0,1,2,3,5],[6,2,0,3,4,5,6,3],[6,0,3,4,5,6,2],[4,0,4,5,8,6,2],[49,0,1,1],[20,0,1,2,3,4,3],[2,0,8,6,12,13,2],[2,0,2,8,7,6,3],[2,0,1,8,9,7,6,11,3],[2,0,1,9,7,6,11,3],[5,0,3,6,2,4,9,5,2],[5,0,3,6,2,8,9,2],[4,3,0,2,4,5,8,6,4],[4,1,0,4,5,8,7,6,3],[27,0,1,3,2,4,5,6,7,8,9,5],[28,1,2,3,1],[48,0,1,1],[19,0,2],[19,1,2,3,4],[32,0,1,3],[71,0,1,2,3,4,2],[80,0,1,3],[2,0,9,7,6,12,13,2],[2,0,3,1,9,7,6,4],[2,0,2,1,7,6,4],[2,0,3,1,8,7,6,10,11,4],[2,0,8,9,7,6,10,12,11,13,2],[2,0,2,8,7,6,11,3],[2,0,1,8,9,6,3],[7,0,1,5,3,6,7,3],[7,0,5,3,6,10,7,2],[5,0,3,7,2,8,4,9,5,2],[8,0,1,4,11,12,13,5],[8,0,1,2,3,7,12,13,6],[8,0,1,2,3,7,4,5,6,12,13,9],[9,1,2,3,4,5,2],[15,0,2,3,4,5,6,2],[15,0,2,3,4,5,6,7,8,2],[4,1,3,0,4,5,7,4],[69,0,1,2,3,4,5,1],[20,0,1,2,3,3],[22,0,1,2,2],[72,0,1,2,3,1],[73,0,1,2,1],[75,0,1,2,3,4,2],[91,0,1,1],[2,0,9,6,10,11,2],[2,0,3,8,7,6,10,12,11,13,3],[2,0,2],[2,0,1,5,9,7,10,4],[2,0,9,7,6,10,12,11,13,2],[2,0,8,9,7,6,10,12,13,2],[2,0,9,7,6,10,2],[2,0,9,7,6,10,11,2],[2,0,8,9,7,6,11,2],[2,0,8,9,6,12,11,13,2],[2,0,2,8,9,7,6,11,3],[2,0,1,7,6,3],[2,0,1,9,7,6,12,11,13,3],[2,0,7,6,10,12,13,2],[2,0,9,7,6,12,11,13,2],[2,3,4,6,3],[7,0,9,3,2],[5,0,3,6,2,9,2],[5,0,3,7,2,2],[5,0,7,2,4,5,2],[5,0,3,6,2,2],[5,0,3,6,2,4,5,2],[5,0,3,6,2,8,2],[5,0,1,3,6,2,3],[5,0,3,7,2,4,5,2],[23,1,2,6,3,3],[17,0,1,2,3,4,5,2],[17,0,1,2,3,7,6,2],[18,0,4,1,2,3,2],[18,0,4,1,2,3,5,6,7,2],[38,0,1,2,3,4,5,6,2],[24,0,1,2,3,4,5,3],[12,0,2,1],[13,0,3,2],[13,0,1,2,3,2],[13,0,1,2,4,3,2],[26,0,1,2,4,3,2],[8,0,1,2,3,4,5,6,12,13,14,8],[8,0,8,9,1,2,3,5,10,12,13,14,9],[8,0,1,2,3,4,5,6,12,13,8],[14,1,0,4,3],[6,2,3,4,5,6,7,2],[6,1,0,3,4,5,6,3],[9,1,2,3,4,2],[9,0,2,3,4,5,2],[9,0,1,2,3,4,3],[9,0,1,2,3,4,5,3],[4,1,0,2,4,5,6,4],[27,0,1,2,4,5,6,7,8,9,4],[47,0,1,2,3,4,5,6,7,8,3],[50,0,1,2,3,4,5,6,7,8,9,10,11,9],[51,1],[52,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,9],[31,1,1],[31,0,2,2],[53,0,1,2],[54,0,1],[32,0,2],[55,0,1,2,3,4,5,5],[56,0,1,2,3,4,5,6,4],[57,0,2],[33,0,1,2],[60,0,1,2],[10,0,1,2,3,4,7,6],[10,0,1,2,3,4,5,6,7,8,8],[10,0,7,8,9,2],[62,0,1,2,3,4,3],[63,0,1,2,3,4,1],[64,0,1,2,3,2],[65,0,1,2,3,3],[66,0,2],[67,1],[68,1],[21,0,1,2,3,4,7,8,9,10,7],[22,0,1,2,3,2],[74,0,1,2,3,4,5,1],[76,0,1,2,3,4,5,1],[77,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1],[78,0,1,2,3,4,5,6,7,8,9,10,11,12,13,5],[11,0,14,1,2,3,4,5,11,12,15,6,7,8,9,10,22,23,27,24,28,25,32,26,29,16],[11,13,0,1,2,3,4,5,11,6,7,8,9,10,22,23,30,27,24,28,25,26,29,31,14],[11,13,0,1,2,3,16,4,5,12,15,17,18,6,7,8,9,10,22,23,24,25,26,31,18],[11,13,0,1,2,3,4,5,11,12,6,7,8,9,10,22,23,30,27,24,25,26,29,15],[11,0,14,1,2,3,16,4,5,11,6,7,8,19,20,21,9,10,22,23,30,24,28,25,32,31,18],[79,0,1,2,3,1],[81,0,1,2,1],[82,0,1,2,3,4,4],[83,0,1,2,3,4,5,6,7,8,9,10,11,12,5],[84,0,1,1],[85,0,1,1],[86,0,1,2,3,4,1],[87,0,1,1],[88,0,1,1],[89,0,1,1],[90,0,1,1],[35,0,1,2,3,4,6,7,8,6],[35,0,1,2,3,5,4,6,7,8,7],[92,0,1,1],[93,0,1,1],[94,0,1,1],[95,0,1,1],[96,0,1,1]],[[[{"name":"RR_ef_CardLight01","rect":{"x":220,"y":619,"width":81,"height":81},"offset":{"x":0,"y":0},"originalSize":{"width":81,"height":81},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Giant_Yell",".mp3",1.750204],-1],0,0,[],[],[]],[[{"name":"h5bonusFont","rect":{"x":2,"y":2,"width":253,"height":88},"offset":{"x":-1.5,"y":84},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@93","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["03PD58W7FEGbo6PSAlXlPW"]}],[1],0,[],[],[]],[[{"name":"Petrifation_eye","rect":{"x":2,"y":700,"width":221,"height":116},"offset":{"x":0,"y":0},"originalSize":{"width":221,"height":116},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[33,"WinNum"],[45,"WinNum",33554432,[-4],[[2,-2,[1,"49aFXk3rVCFbgVNeswkaBY"],[5,0,0]],[4,-3,[1,"7fkfpEfGdPBoTjaygCmaz+"]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[37,"Num",33554432,1,[[8,-5,[1,"d0Y4WQweRDOZT8IGLCqI9l"],[5,118.38,20],[0,0.5,-0.25]],[218,"+0.00",18,18,20,false,false,-5,-6,[1,"b8Ieag1c1L7r9/jt8ysSCj"],0]],[0,"9ewM+nzaZBgLGyLB9uF36h",1,0]]],0,[0,4,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,9,1,6],[0],[15],[280]],[[[26,"S1_Object","1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[43,24]],[[[23,"CannonLv_01",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[281,10]],[[{"name":"roll_light0009","rect":{"x":222,"y":578,"width":37,"height":80},"offset":{"x":31.5,"y":10},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["062ceg3txIHZqlicQ9VHGd"]}],[1],0,[],[],[]],[[[18,".bin",40324223,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2656,"length":1452,"count":363,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2656,"count":83,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-2.0470128059387207,-2.063481092453003,-3.130140542984009],"maxPosition",8,[1,2.0664381980895996,2.05995774269104,-0.5004949569702148]]],-1],0,0,[],[],[]],[[[19],[32,"island_Grass_S",[-2],[0,"a4RJ7XT1lWQqoBFkWGeCWC",-1,0]],[44,"island_Grass_S",1,[[30,-3,[1,"5aukGqF0pRmbCVxuBhFbrY"],[0],[7],1]],[0,"0dilTOeNhbe44RwJk/G4pc",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[282,65]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[283,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[[31,"Monster_Hurt_03",".mp3",0.417959],-1],0,0,[],[],[]],[[[18,".bin",1059999688,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":256,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":256,"count":8,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.064255952835083,-1.5895397663116455,-5.3819444900682356e-8],"maxPosition",8,[1,4.968072891235352,1.589539885520935,0.11023510992527008]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["07SwK8Ne5CHKdOoIC0xd8z@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[19],[32,"s1_14",[-2],[0,"d2XYPfgAVbA50Z1c+NDBhL",-1,0]],[27,"Plane015",1,[[30,-3,[1,"adDiqWIElTHJDUbxlJISRb"],[0],[7],1]],[0,"beoK1AL5tbI64Y11UmcTWA",1,0],[1,0.06396088749170303,0.06396088749170303,0.06396088749170303]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[284,82]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[83,83,4]],[[[135,"2d-sprite-depth-blend",[{}],[{"rasterizerState":{},"depthStencilState":{"depthTest":true},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[44]],[[{"base":"2,2,0,0,0,0","mipmaps":["0831cpd21Anr0xsRQdBBkv@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_11",[-2],[0,"bb5PA7x61f6Iw9LObm1zWQ",-1,0]],[27,"Plane016",1,[[30,-3,[1,"55jBSXfzhZuYjY6al6w4tS"],[0],[7],1]],[0,"03qnhimwBelbZYAwY3vUqq",1,0],[1,0.09471142292022705,0.09471142292022705,0.09471142292022705]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[285,286]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[18,".bin",2736596,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-2.32487154006958,-2.087146043777466,-0.0000020776451492565684],"maxPosition",8,[1,2.3248708248138428,2.087146282196045,-0.0000018949341438201373]]],-1],0,0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[84,84,4]],[[{"name":"Aim_01","rect":{"x":222,"y":494,"width":80,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["095XHcDpxJ7qV9LoP0eFgv"]}],[1],0,[],[],[]],[[[114,"number_20_w",43,{"commonHeight":50,"fontSize":43,"atlasName":"number_20_w.png","fontDefDictionary":{"32":{"xOffset":-4,"yOffset":-4,"xAdvance":11,"rect":{"x":38,"y":235,"width":9,"height":9}},"33":{"xOffset":-3,"yOffset":8,"xAdvance":14,"rect":{"x":236,"y":0,"width":19,"height":37}},"36":{"xOffset":-4,"yOffset":5,"xAdvance":25,"rect":{"x":77,"y":0,"width":32,"height":43}},"37":{"xOffset":-4,"yOffset":8,"xAdvance":31,"rect":{"x":40,"y":45,"width":37,"height":37}},"40":{"xOffset":-4,"yOffset":8,"xAdvance":13,"rect":{"x":33,"y":0,"width":21,"height":44}},"41":{"xOffset":-4,"yOffset":8,"xAdvance":13,"rect":{"x":55,"y":0,"width":21,"height":44}},"43":{"xOffset":-3,"yOffset":12,"xAdvance":25,"rect":{"x":152,"y":197,"width":30,"height":30}},"44":{"xOffset":-3,"yOffset":29,"xAdvance":12,"rect":{"x":201,"y":195,"width":17,"height":23}},"45":{"xOffset":-4,"yOffset":23,"xAdvance":12,"rect":{"x":0,"y":235,"width":19,"height":16}},"46":{"xOffset":-3,"yOffset":29,"xAdvance":12,"rect":{"x":20,"y":235,"width":17,"height":16}},"47":{"xOffset":-7,"yOffset":8,"xAdvance":22,"rect":{"x":0,"y":0,"width":32,"height":44}},"48":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":32,"y":159,"width":31,"height":37}},"49":{"xOffset":-2,"yOffset":8,"xAdvance":25,"rect":{"x":0,"y":159,"width":31,"height":37}},"50":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":64,"y":159,"width":31,"height":37}},"51":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":96,"y":159,"width":31,"height":37}},"52":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":102,"y":121,"width":33,"height":37}},"53":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":128,"y":159,"width":31,"height":37}},"54":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":160,"y":158,"width":31,"height":37}},"55":{"xOffset":-3,"yOffset":8,"xAdvance":25,"rect":{"x":92,"y":197,"width":29,"height":37}},"56":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":202,"y":114,"width":31,"height":37}},"57":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":192,"y":157,"width":31,"height":37}},"58":{"xOffset":-3,"yOffset":15,"xAdvance":12,"rect":{"x":183,"y":196,"width":17,"height":30}},"61":{"xOffset":-3,"yOffset":16,"xAdvance":25,"rect":{"x":219,"y":195,"width":30,"height":22}},"64":{"xOffset":-4,"yOffset":8,"xAdvance":33,"rect":{"x":0,"y":45,"width":39,"height":37}},"65":{"xOffset":-5,"yOffset":8,"xAdvance":27,"rect":{"x":153,"y":38,"width":36,"height":37}},"66":{"xOffset":-3,"yOffset":8,"xAdvance":28,"rect":{"x":68,"y":121,"width":33,"height":37}},"67":{"xOffset":-4,"yOffset":8,"xAdvance":27,"rect":{"x":177,"y":76,"width":34,"height":37}},"68":{"xOffset":-3,"yOffset":8,"xAdvance":29,"rect":{"x":142,"y":81,"width":34,"height":37}},"69":{"xOffset":-3,"yOffset":8,"xAdvance":25,"rect":{"x":0,"y":197,"width":30,"height":37}},"70":{"xOffset":-3,"yOffset":8,"xAdvance":24,"rect":{"x":31,"y":197,"width":30,"height":37}},"71":{"xOffset":-4,"yOffset":8,"xAdvance":29,"rect":{"x":72,"y":83,"width":34,"height":37}},"72":{"xOffset":-3,"yOffset":8,"xAdvance":29,"rect":{"x":34,"y":121,"width":33,"height":37}},"73":{"xOffset":-3,"yOffset":8,"xAdvance":14,"rect":{"x":234,"y":114,"width":18,"height":37}},"74":{"xOffset":-4,"yOffset":8,"xAdvance":18,"rect":{"x":227,"y":38,"width":23,"height":37}},"75":{"xOffset":-3,"yOffset":8,"xAdvance":28,"rect":{"x":0,"y":83,"width":35,"height":37}},"76":{"xOffset":-3,"yOffset":8,"xAdvance":23,"rect":{"x":62,"y":197,"width":29,"height":37}},"77":{"xOffset":-3,"yOffset":8,"xAdvance":36,"rect":{"x":195,"y":0,"width":40,"height":37}},"78":{"xOffset":-3,"yOffset":8,"xAdvance":30,"rect":{"x":107,"y":82,"width":34,"height":37}},"79":{"xOffset":-4,"yOffset":8,"xAdvance":30,"rect":{"x":116,"y":43,"width":36,"height":37}},"80":{"xOffset":-3,"yOffset":8,"xAdvance":28,"rect":{"x":0,"y":121,"width":33,"height":37}},"81":{"xOffset":-4,"yOffset":8,"xAdvance":30,"rect":{"x":110,"y":0,"width":36,"height":42}},"82":{"xOffset":-3,"yOffset":8,"xAdvance":30,"rect":{"x":36,"y":83,"width":35,"height":37}},"83":{"xOffset":-4,"yOffset":8,"xAdvance":26,"rect":{"x":136,"y":120,"width":32,"height":37}},"84":{"xOffset":-4,"yOffset":8,"xAdvance":20,"rect":{"x":122,"y":197,"width":29,"height":37}},"85":{"xOffset":-3,"yOffset":8,"xAdvance":28,"rect":{"x":169,"y":119,"width":32,"height":37}},"86":{"xOffset":-5,"yOffset":8,"xAdvance":27,"rect":{"x":190,"y":38,"width":36,"height":37}},"87":{"xOffset":-4,"yOffset":8,"xAdvance":39,"rect":{"x":147,"y":0,"width":47,"height":37}},"88":{"xOffset":-5,"yOffset":8,"xAdvance":28,"rect":{"x":78,"y":44,"width":37,"height":37}},"89":{"xOffset":-5,"yOffset":8,"xAdvance":25,"rect":{"x":212,"y":76,"width":34,"height":37}},"90":{"xOffset":-4,"yOffset":8,"xAdvance":25,"rect":{"x":224,"y":152,"width":31,"height":37}}},"kerningDict":{"2949185":1,"2949209":-2,"3145777":-1,"3145783":-1,"3211308":2,"3211310":2,"3211319":-2,"3211320":1,"3276849":-1,"3276855":-1,"3342385":-1,"3342391":-1,"3407927":-1,"3473457":-1,"3473463":-1,"3538993":-1,"3604526":-3,"3604529":-2,"3604532":-3,"3604534":-1,"3604535":-1,"3604538":-2,"3670065":-1,"3670071":-1,"3735601":-1,"3735607":-1,"4259884":1,"4259885":1,"4259886":1,"4259907":-1,"4259911":-1,"4259919":-1,"4259921":-1,"4259924":-2,"4259925":-1,"4259926":-2,"4259927":-2,"4259929":-2,"4325462":-1,"4325465":-1,"4456513":-1,"4456534":-1,"4456537":-2,"4587564":-2,"4587566":-2,"4587585":-1,"4587594":-2,"4653142":-1,"4653143":-1,"4653145":-2,"4849729":-1,"4915267":-1,"4915271":-1,"4915279":-1,"4980781":1,"4980820":-2,"4980822":-2,"4980823":-2,"4980825":-3,"5111852":1,"5111854":1,"5177409":-1,"5177430":-1,"5177431":-1,"5177432":-1,"5177433":-2,"5242924":-3,"5242926":-3,"5242945":-2,"5242954":-2,"5374038":-1,"5374039":-1,"5374041":-1,"5439574":-1,"5439575":-1,"5439577":-1,"5505068":-1,"5505070":-1,"5505082":-1,"5505089":-2,"5505098":-2,"5505107":1,"5505110":1,"5505111":1,"5505113":2,"5570625":-1,"5636140":-2,"5636142":-2,"5636154":-1,"5636161":-2,"5636163":-1,"5636167":-1,"5636175":-1,"5636180":1,"5701676":-1,"5701678":-1,"5701690":-1,"5701697":-1,"5701699":-1,"5701703":-1,"5701711":-1,"5701716":1,"5767235":-1,"5767247":-1,"5767249":-1,"5832748":-2,"5832749":-1,"5832750":-2,"5832762":-1,"5832769":-2,"5832771":-1,"5832775":-1,"5832783":-1,"5832787":-1,"5832788":2}}]],0,0,[0],[19],[287]],[[{"base":"2,2,0,0,0,0","mipmaps":["0dXJ6biapOeohpFFivTS7D@a2364"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[23,"Material #3",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[288,4]],[[[18,".bin",377549989,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2176,"length":768,"count":192,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2176,"count":68,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.481469988822937,-1.481469988822937,-0.23673787713050842],"maxPosition",8,[1,1.481469988822937,1.481469988822937,0.23673787713050842]]],-1],0,0,[],[],[]],[[[19],[32,"Coin_LP",[-2],[0,"43gluo5xlZYo2hLq1SpACI",-1,0]],[60,"Cylinder001",1,[[30,-3,[1,"f9aalN8ZhR1rJQG1xqRxS6"],[0],[7],1]],[0,"73PlbMpDtWhL3gyYUwRZ/Z",1,0],[1,0.015940463170409203,0.002730138599872589,1.5235717296600342],[3,-5.338508038181775e-8,0.7071067811865455,0.7071067811865455,5.338508038181775e-8],[1,-89.99999999999999,179.9999913485774,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[289,85]],[[{"name":"Bullet_Hit_sparks","rect":{"x":227,"y":700,"width":128,"height":143},"offset":{"x":4,"y":-3.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"card_01","rect":{"x":209,"y":744,"width":90,"height":90},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":847,"h":846},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["11968946c"]}],[1],0,[],[],[]],[[[125,"../game/res/shader/3d-custom-unlit",[{"hash":3729191248,"name":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"tilingOffset","type":16,"count":1}],"defines":[]},{"name":"MY_VALUES","stageFlags":16,"binding":1,"members":[{"name":"grayScale","type":13,"count":1}],"defines":[]},{"name":"BleachValue","stageFlags":16,"binding":2,"members":[{"name":"bleachColor","type":16,"count":1}],"defines":["USE_BLEACH_COLOR"]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":4,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":5,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":6,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_custom_color_ctrl","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_INSTANCING\n  in vec4 a_custom_color_ctrl;\n  out vec4 v_custom_color_ctrl;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  #if USE_INSTANCING\n    v_custom_color_ctrl = a_custom_color_ctrl;\n  #endif\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nlayout(std140) uniform MY_VALUES {\n  float grayScale;\n};\n#if USE_INSTANCING\n  in vec4 v_custom_color_ctrl;\n#endif\n#if USE_BLEACH_COLOR\n  layout(std140) uniform BleachValue {\n    vec4 bleachColor;\n  };\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\n#if USE_BLEACH_COLOR\n  vec3 bleach(vec3 oldColor, float lerpValue) {\n    vec3 worldNor = normalize(v_normal);\n    vec3 viewDir = normalize(cc_cameraPos.xyz - v_position);\n    float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));\n    float scalar = 1.7;\n    return mix(oldColor, bleachColor.rgb * scalar, lerpValue * pow(theta, 2.7));\n  }\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  #if USE_INSTANCING\n    if (v_custom_color_ctrl.b >= 0.01) {\n      float gray = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\n      baseColor.rgb = mix(baseColor.rgb, vec3(gray), v_custom_color_ctrl.b);\n    }\n  #else\n    if (grayScale >= 0.01) {\n      float gray = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\n      baseColor.rgb = mix(baseColor.rgb, vec3(gray), grayScale);\n    }\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n}\nvec4 MyUnlitShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb;\n  #if USE_INSTANCING\n    s.albedo.a *= (1. - v_custom_color_ctrl.x);\n  #endif\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  #if USE_BLEACH_COLOR\n    #if USE_INSTANCING\n      if (v_custom_color_ctrl.y > 0.) diffuse = bleach(diffuse, v_custom_color_ctrl.y);\n    #else\n      if (bleachColor.w > 0.) diffuse = bleach(diffuse, bleachColor.w);\n    #endif\n  #endif\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  vec3 finalColor = diffuse * shadow;\n  return vec4(finalColor, s.albedo.a);\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(MyUnlitShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_custom_color_ctrl;\n  varying vec4 v_custom_color_ctrl;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  #if USE_INSTANCING\n    v_custom_color_ctrl = a_custom_color_ctrl;\n  #endif\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\n    uniform float grayScale;\n#if USE_INSTANCING\n  varying vec4 v_custom_color_ctrl;\n#endif\n#if USE_BLEACH_COLOR\n      uniform vec4 bleachColor;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\n#if USE_BLEACH_COLOR\n  vec3 bleach(vec3 oldColor, float lerpValue) {\n    vec3 worldNor = normalize(v_normal);\n    vec3 viewDir = normalize(cc_cameraPos.xyz - v_position);\n    float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));\n    float scalar = 1.7;\n    return mix(oldColor, bleachColor.rgb * scalar, lerpValue * pow(theta, 2.7));\n  }\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  #if USE_INSTANCING\n    if (v_custom_color_ctrl.b >= 0.01) {\n      float gray = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\n      baseColor.rgb = mix(baseColor.rgb, vec3(gray), v_custom_color_ctrl.b);\n    }\n  #else\n    if (grayScale >= 0.01) {\n      float gray = dot(baseColor.rgb, vec3(0.299, 0.587, 0.114));\n      baseColor.rgb = mix(baseColor.rgb, vec3(gray), grayScale);\n    }\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n}\nvec4 MyUnlitShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb;\n  #if USE_INSTANCING\n    s.albedo.a *= (1. - v_custom_color_ctrl.x);\n  #endif\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  #if USE_BLEACH_COLOR\n    #if USE_INSTANCING\n      if (v_custom_color_ctrl.y > 0.) diffuse = bleach(diffuse, v_custom_color_ctrl.y);\n    #else\n      if (bleachColor.w > 0.) diffuse = bleach(diffuse, bleachColor.w);\n    #endif\n  #endif\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  vec3 finalColor = diffuse * shadow;\n  return vec4(finalColor, s.albedo.a);\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(MyUnlitShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":132,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":106}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"USE_BLEACH_COLOR","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2293664903,"name":"../game/res/shader/3d-custom-unlit|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":13,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALPHA_TEST\n    #if USE_ALBEDO_MAP\n      baseColor *= texture(albedoMap, ALBEDO_UV);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALPHA_TEST\n    #if USE_ALBEDO_MAP\n      baseColor *= texture2D(albedoMap, ALBEDO_UV);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":47,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":104}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"bleachColor":{"linear":true,"type":16,"value":[1,1,1,0]},"grayScale":{"type":13,"value":[0]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../game/res/shader/3d-custom-unlit|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"bleachColor":{"linear":true,"type":16,"value":[1,1,1,0]},"grayScale":{"type":13,"value":[0]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../game/res/shader/3d-custom-unlit|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"add","passes":[{"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"bleachColor":{"linear":true,"type":16,"value":[1,1,1,0]},"grayScale":{"type":13,"value":[0]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"alpha-blend","passes":[{"program":"../game/res/shader/3d-custom-unlit|standard-vs|standard-fs","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"bleachColor":{"linear":true,"type":16,"value":[1,1,1,0]},"grayScale":{"type":13,"value":[0]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[18,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["12xHBA7w5KN61sw6aEa2ck"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":132,"h":297},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["13197a6fd"]}],[1],0,[],[],[]],[[{"name":"S_coin0008","rect":{"x":310,"y":310,"width":137,"height":141},"offset":{"x":6,"y":-4.5},"originalSize":{"width":149,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[{"name":"DFrameEF","rect":{"x":175,"y":858,"width":27,"height":27},"offset":{"x":0,"y":0},"originalSize":{"width":27,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["16uV2JcDVEsYBaH61UGk6g"]}],[1],0,[],[],[]],[[[18,".bin",1538778346,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5.308649063110352,-1.6856493949890137,0],"maxPosition",8,[1,5.308649063110352,3.370903491973877,7.126944812085867e-9]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[19],[32,"water_wave_01",[-2],[0,"4edh9ZmotRBKLzErZn17rZ",-1,0]],[28,"Plane028",1,[[30,-3,[1,"5c/kBgUKRYRrEg8uJ5vEmH"],[0],[7],1]],[0,"901GnA02dYqaUI/ctxAmfJ",1,0],[3,-5.338508038181775e-8,0.7071067811865455,0.7071067811865455,5.338508038181775e-8],[1,0.5012754797935486,0.15776722133159637,1],[1,-89.99999999999999,179.9999913485774,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[290,86]],[[[23,"19 - Default",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":1.9999998807907104,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[291,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["160cK3mg5OZoO4dDbeGKor@6df82"]}],[1],0,[],[],[]],[[{"name":"Bullet_Hit","rect":{"x":592,"y":499,"width":122,"height":131},"offset":{"x":-1,"y":-2.5},"originalSize":{"width":150,"height":150},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[31,"Male_Hurt_04",".mp3",0.653061],-1],0,0,[],[],[]],[[{"fmt":"0_4_7@89","w":462,"h":462},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["19287a1ca"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":304,"h":1024},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["198db801b"]}],[1],0,[],[],[]],[[[19],[32,"island_Grass_M",[-2],[0,"d4Bo1yY+FSHY/x2JT5Vbm9",-1,0]],[44,"island_Grass_M",1,[[30,-3,[1,"44LA7VVu5RYo9vuMbGwhhn"],[0],[7],1]],[0,"38otWbl0pa+5vUrXJvlqjt",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[292,66]],[[[18,".bin",2647673150,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2592,"length":1440,"count":360,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2592,"count":81,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.242079257965088,-2.819981813430786,-3.043921947479248],"maxPosition",8,[1,3.31898832321167,2.8155462741851807,-0.5004950761795044]]],-1],0,0,[],[],[]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[293,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["1ahA6OJ3hCE7JTkLm/83UG"]}],[1],0,[],[],[]],[[[19],[47,"monster_L_001",[-3,-4],[[63,-2,[1,"6eh+IJwI1RhITxoL7ZWMCS"],[3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],19]],[0,"f5c871mzBaTaMhnC2D7LWm",-1,0]],[43,"Bip001 Head",[[-5,[6,"Bone004",-6,[0,"a7sd8q40xXtob8YpJa5NWU",1,0],[1,0.7084650993347168,-0.4011831283569336,-0.005548000335693359],[3,0.6163999314503358,0.7874332508268537,1.8156302052476644e-7,-4.918174355595857e-7],[1,-0.00021291828245277678,-179.9997617563886,76.10742474132984]],[53,"black_eyes",-7,[0,"eaBVxK9b5XKppiN+6d7Lgo",1,0],[1,1.4747509956359863,0.2833731174468994,0.0000019669532775878906],[1,0.30820432305336,0.30820438265800476,0.30820441246032715]],[10,"red_eyes",-8,[0,"80YLwbWdFYyY+PbsKrUQHq",1,0],[1,1.0890388488769531,0.838005542755127,0.0000019073486328125]]],1,4,4,4],[0,"c8TvVnn7FegKQVInVxJD5X",1,0],[1,0.3269519805908203,-4.440892098500626e-16,2.9802322387695312e-8],[3,-0.0726567891371402,0.023494424688128023,-0.05906063043692518,0.9953295157550829],[1,-8.21623837330153,2.204692945916836,-6.948874412102258]],[20,"Bip001 L Hand",[-9,-10,-11,-12],[0,"cac/PItUVXcYuS+i6NHECr",1,0],[1,0.8494701385498047,1.1920928955078125e-7,-8.881784197001252e-16],[3,-0.783334869648605,0.08601701461481595,0.07030068502902105,0.6115924859527035],[1,-103.7327767190426,12.451272385426602,-2.7953961036884274]],[20,"Bip001 R Hand",[-13,-14,-15,-16],[0,"706Fv2D0FWaqwFzHJr/0O2",1,0],[1,0.8494699001312256,0,8.881784197001252e-16],[3,0.6841250038596911,-0.18402768608589,-0.08508427412027737,0.700619337547342],[1,86.94644381996528,-8.761520710729418,-21.778491326999433]],[76,"Bip001 Pelvis",[-17,-18,-19],[0,"82eCv1B59QbJznO3BMhL+i",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[2,-20,-21],[0,"9cJAUNYUxQFYzp2ehHqbbk",1,0],[1,0.8626184463500977,0.5116574168205261,0.00007328391075134277],[3,-0.15198056497381437,0.02160798772138933,0.0903622141320503,0.9840069476350389],[1,-17.9115868580643,4.073784797910501,9.861441210402798]],[43,"Bip001",[[[6,"Bip001 Footsteps",-22,[0,"c7OCYfCoJU0ZwJxtPxE1w1",1,0],[1,0.15258456766605377,0.08010691404342651,-7.650567054748535],[3,-0.0009419146312682023,-0.011221250621566202,0.5372310329829778,0.8433599549014394],[1,1.4184117808479109,-2.4279504651117896,64.98260229852183]],5],4,1],[0,"a8KhKDHgtS2La2APWP6+pN",1,0],[1,-0.3817705810070038,0.0851251482963562,2.8599209785461426],[3,0.0009419148058910317,0.011221250621564356,-0.5372310329828894,0.8433599549013008],[1,1.8486948018282523,2.7018825750632414,-64.97687489193879]],[43,"Bip001 Spine1",[[6,[6,"Bone006",-23,[0,"5b7zg0/g5UL7/Spz0D2ZqO",1,0],[1,0.11568927764892578,1.111314296722412,-0.0055484771728515625],[3,0.05420689004984699,0.7050251485291261,0.7050268174592084,0.054206454190874616],[1,-90.0001391760988,-179.99995387807894,8.793194160750966]]],1,4],[0,"6aM2PGhAVRm4pSIpz8inWT",1,0],[1,0.7855498790740967,-0.0006796717643737793,0.000011831521987915039],[3,-0.008548791763912284,-0.0010417298477844027,0.07336233765331114,0.9972681687351417],[1,-0.9787701314343442,-0.047693641877659,8.414979431105412]],[60,"Object024",1,[[64,-24,[1,"75GSIWRfdboZ6R0ali9Fzf"],[0],[7],1,1,2]],[0,"94GQ59ys5TN5ibdHVYfP5I",1,0],[1,0,0,1.1156005859375],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[54,"Root",1,[7],[0,"824dThRBtV2bFyei2BsH4g",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Spine",5,[8],[0,"cd2Ua2zgRVBLVvYJInUGCz",1,0],[1,0.5603694915771484,-0.04974028468132019,-0.00004038214683532715],[3,0.032141580297708264,0.01517672329566962,0.05460819825030065,0.9978750074883269],[1,3.6045776178186975,1.5438458887573028,6.313005151491113]],[3,"Bone001",2,[-25],[0,"3aa2tX5eNavrFwJPj0Kxs7",1,0],[1,1.9788670539855957,0.07126498222351074,0.4396589696407318],[3,0.9426572837792251,0.2508918621412756,0.12778873631686227,-0.17922209049053073],[1,-153.60047483186239,-21.4645092416148,25.290309809105842]],[5,"Bone002",12,[[6,"Bone003",-26,[0,"2fHglQaT5dTK8GgEDVxpx+",1,0],[1,0.5738060474395752,-4.76837158203125e-7,-5.960464477539063e-8],[3,-0.0000015720716973670622,0.003694259531575583,0.020453275946454824,0.9997839846422328],[1,-0.008846013307212821,0.42360146439407526,2.3439195467043867]]],[0,"d4O4fpiYNZKIQYYETp2Ra5",1,0],[1,0.5004358291625977,4.76837158203125e-7,2.220446049250313e-16],[3,0.005848095816995079,0.013540052027289359,-0.3517651000790945,0.9359721048902891],[1,1.5585472179783013,2.243021323316196,-41.17234960943597]],[3,"Bip001 L Clavicle",6,[-27],[0,"77JqVu7eFcypkDBY254Jli",1,0],[1,0.42334413528442383,-1.2965025901794434,0.8862261772155762],[3,0.6205033414516398,-0.14786758434059008,0.7701240473373474,-0.0044421235205151935],[1,166.91602082906468,-103.54408799653746,-10.973013968843782]],[3,"Bip001 L UpperArm",14,[-28],[0,"0arIoYr29ZKJvvxkhrO+Cv",1,0],[1,1.2365801334381104,-2.384185791015625e-7,-4.76837158203125e-7],[3,-0.07074257099855008,0.4819666224542432,0.15889814750922632,0.8587520260277122],[1,-16.29666642096828,60.303122275528736,11.812938634538954]],[3,"Bip001 L Forearm",15,[3],[0,"79n399n/VZMoKEeB/Ai8BX",1,0],[1,1.077972173690796,0,0],[3,-1.670972367230521e-17,3.28781568850229e-17,-0.3725497793826994,0.9280122099853548],[1,-5.168068857507426e-16,3.8523447489426074e-15,-43.74590995029855]],[5,"Bip001 L Finger0",3,[[6,"Bip001 L Finger01",-29,[0,"23YIwAhIJaa5VHznpAPFy2",1,0],[1,1.0051121711730957,2.384185791015625e-7,-2.384185791015625e-7],[3,0.04534794322894484,-0.3548631019374286,0.11836964461352512,0.9262852531279543],[1,9.848341571106138,-42.855832223572406,10.783795154474074]]],[0,"10CAXLQJhUnJ2QIUKy2gka",1,0],[1,0.7325212955474854,0.1589491367340088,-0.6290496587753296],[3,0.10326521364939899,0.3803890445585015,0.2996840852302997,0.8688094840006598],[1,-3.4775258667797395,48.44808952628125,36.81968456586434]],[5,"Bip001 L Finger1",3,[[6,"Bip001 L Finger11",-30,[0,"fdXAAwFWJY6o3PH6xLSmsQ",1,0],[1,0.8108019828796387,4.76837158203125e-7,1.1102230246251565e-16],[3,8.80190065621796e-9,1.9147213841415647e-8,0.3471310481867737,0.9378166320687383],[1,2.427674670660364e-7,0.0000022497329303413908,40.62387453861438]]],[0,"90ZoDQw8VXzZpRCs4fIkOE",1,0],[1,1.2804954051971436,0.06489276885986328,-0.629083514213562],[3,0.24237684545932653,0.08938011394454883,0.013698304800113525,0.9659591173864701],[1,27.83598541597992,9.580932956330109,4.002002854686753]],[5,"Bip001 L Finger2",3,[[6,"Bip001 L Finger21",-31,[0,"2ffmvVX/VfYabZX34NLxvo",1,0],[1,0.8106169700622559,2.384185791015625e-7,0],[3,-5.389266312958962e-8,5.211816790054387e-8,0.7188422130899349,0.6951732680993705],[1,-179.99974344985174,179.99974330604695,88.08205209113184]]],[0,"69GJKzQXhZPbaBrzGmvMvR",1,0],[1,1.374708652496338,-0.06161785125732422,0.23816335201263428],[3,-0.07526373993002339,0.03094704502540775,0.04281566365877312,0.995763259415309],[1,-8.803012802340442,3.9162966797953604,4.623637964894903]],[5,"Bip001 L Finger3",3,[[6,"Bip001 L Finger31",-32,[0,"53zGApO95SFKL53WIyY1lE",1,0],[1,0.5862767696380615,2.220446049250313e-16,1.1920928955078125e-7],[3,4.89248464850513e-9,6.805870990231258e-9,0.8119721427371016,0.5836961876001246],[1,-179.99999903950484,-179.9999999999999,71.42186990223429]]],[0,"e1/JNUuylYypj3BdV9LJ4i",1,0],[1,1.240714430809021,0.14339184761047363,0.8769489526748657],[3,-0.29627558815822763,-0.18947330262294432,0.08072597595271658,0.9326328110575629],[1,-32.75632053955844,-18.464711925025814,15.239120689605782]],[3,"Bip001 R Clavicle",6,[-33],[0,"bcorzNImBfPKmO9/NzUp6K",1,0],[1,0.5909914970397949,-0.5894322395324707,-1.3961296081542969],[3,0.7043035850570176,0.12384190059469216,-0.6529515593442673,-0.24954740007224446],[1,-167.33810924552503,82.25826718391716,30.02178984018819]],[3,"Bip001 R UpperArm",21,[-34],[0,"e1Wlj4xz5V+qxhDRUW54vZ",1,0],[1,1.2365798950195312,1.1920928955078125e-7,0],[3,0.22075499073861019,-0.5656145677757625,0.2843824856005531,0.7419393483752461],[1,41.23347095100075,-78.37971708411469,9.919515886693077]],[3,"Bip001 R Forearm",22,[4],[0,"7c5KyfUx1UB4Emb+HFM1aJ",1,0],[1,1.0779719352722168,-2.220446049250313e-16,8.881784197001252e-16],[3,-6.555193055031563e-18,2.2754541700155177e-18,-0.3279275354720998,0.9447028799994179],[1,-7.951386802660246e-16,-2.8520617736927696e-23,-38.28606701889631]],[5,"Bip001 R Finger0",4,[[6,"Bip001 R Finger01",-35,[0,"6d6XWEY7Nepabs+ohS1J/X",1,0],[1,1.0051120519638062,0,-2.384185791015625e-7],[3,0.033102091671898565,0.16067600381341238,0.3955185147608108,0.9036883189501232],[1,-5.609436443125452,22.575816788252826,46.50948772052168]]],[0,"17/8H4iI9eGpEWLtCDoLXU",1,0],[1,0.7325212955474854,0.15894842147827148,0.6290497779846191],[3,-0.5047301132674192,-0.4427519211640384,0.257195446923922,0.6950314749334849],[1,-52.91390719422636,-36.79987900703372,53.55797433320994]],[5,"Bip001 R Finger1",4,[[6,"Bip001 R Finger11",-36,[0,"2e2mu8Ij9Zt5I2uzHcBYuQ",1,0],[1,0.8108017444610596,-4.76837158203125e-7,-2.220446049250313e-16],[3,-2.7845444393376422e-8,-1.0621178348691467e-8,0.3563876364633618,0.9343381896166172],[1,-0.0000034150941237218945,-6.701892149207312e-14,41.75702680358506]]],[0,"a4SZLRbc9QepkCECvn1+pp",1,0],[1,1.2804957628250122,0.06489229202270508,0.6290833950042725],[3,-0.25672021730778016,-0.02881134326401747,0.24434930297972174,0.9346432766880063],[1,-31.88518341368614,4.6573416804363585,28.135072838118433]],[5,"Bip001 R Finger2",4,[[6,"Bip001 R Finger21",-37,[0,"35KSfpLB1emJ1cv09dvrL7",1,0],[1,0.8106169700622559,0,-4.440892098500626e-16],[3,-3.107666677680783e-8,-3.213475018240755e-8,0.7188422130899361,0.6951732680993717],[1,179.9999948773603,179.9999999999979,88.08205209115086]]],[0,"2duqp86VxTrZKf0nEtIiBV",1,0],[1,1.374709129333496,-0.06161785125732422,-0.23816347122192383],[3,0.004272468465552951,0.07773494861415191,0.3111716863313112,0.9471595459070737],[1,-2.8602092016586957,10.317774243310087,36.1657163082294]],[5,"Bip001 R Finger3",4,[[6,"Bip001 R Finger31",-38,[0,"b78HJzI0pSlIFhIZJawvIN",1,0],[1,0.5862767696380615,1.1920928955078125e-7,0],[3,2.3108692614457474e-9,-8.003051512307196e-9,0.6777881347912743,0.7352572640485541],[1,0.000010052004834046938,-0.00001051361494149488,85.34208189673834]]],[0,"4bx27GcJBfI4Xr1JZc0CNm",1,0],[1,1.2407147884368896,0.14339160919189453,-0.8769490718841553],[3,0.25852051840146195,0.278662120324573,0.3671812480862351,0.848936096131792],[1,21.437903567482056,26.226052919382916,50.13050707951681]],[3,"Bip001 L Thigh",5,[-39],[0,"2eWpbfOFhSrJJYiWVs40nD",1,0],[1,-9.5367431640625e-7,0.0000011920928955078125,0.790573000907898],[3,0.2851010827304034,0.9467438354100751,0.00874689863579757,-0.14938866925984445],[1,-6.928436672854194,-160.0448619277717,32.49472851199061]],[3,"Bip001 L Calf",28,[-40],[0,"969pTU8ylfh4g4afur91kN",1,0],[1,1.2089800834655762,-2.220446049250313e-16,1.1920928955078125e-7],[3,-3.626833689967431e-17,5.0363349247129365e-17,-0.4644714988574344,0.885588068319085],[1,-1.758878230212335e-15,5.594323226956882e-15,-55.35204745173201]],[5,"Bip001 L Foot",29,[[6,"Bip001 L Toe0",-41,[0,"45v5VhFeZbM6t9sB/Vei3C",1,0],[1,1.1288789510726929,0.8454828858375549,-2.220446049250313e-16],[3,-0.019309764867162686,-0.03608364265349345,0.6933196833050261,0.7194671086682476],[1,30.435306586168515,-34.92598217716766,87.4826264957381]]],[0,"eaNM3y9iNYyoOpuaP9eA4s",1,0],[1,0.8395750522613525,-1.942890293094024e-16,0],[3,-0.06842880094606177,-0.10354360410312691,0.16573460747918273,0.9783293214118345],[1,-6.074141600868105,-11.02292859345688,19.782880723363796]],[3,"Bip001 R Thigh",5,[-42],[0,"d99UwGRxZU25LstrxBagzp",1,0],[1,9.5367431640625e-7,-9.834766387939453e-7,-0.7905730605125427],[3,0.30394016820728925,0.9267220826189143,-0.15586675254473395,0.1565634414151195],[1,26.609052079775186,153.32607662411445,30.966048780945425]],[3,"Bip001 R Calf",31,[-43],[0,"45FAJtwYRd95shj+iGmFaJ",1,0],[1,1.2089803218841553,-2.220446049250313e-16,1.1920928955078125e-7],[3,-7.784566194419368e-18,-2.235790794910183e-17,-0.463667843063253,0.8860091034007893],[1,-3.4705369739536702e-15,-4.707856731296548e-15,-55.24808232294459]],[5,"Bip001 R Foot",32,[[6,"Bip001 R Toe0",-44,[0,"71J7Dh+bhV+IZsmFfTwwe+",1,0],[1,1.1288790702819824,0.8454830050468445,-1.1920928955078125e-7],[3,0.027531238260165333,0.04450460148797728,0.704335152779995,0.7079359885785153],[1,-75.10253297874047,80.94245371455186,88.59403071678298]]],[0,"5diq8hwUhVXa32B06v8+vg",1,0],[1,0.8395751118659973,8.940696716308594e-8,0],[3,0.09266620980641892,0.07387007112552646,0.12570576513877535,0.9849640839964154],[1,9.78066295935617,7.274390588671203,15.148510306518965]]],0,[0,4,1,0,0,1,0,-1,9,0,-2,10,0,-1,12,0,1,2,0,1,2,0,1,2,0,-1,17,0,-2,18,0,-3,19,0,-4,20,0,-1,24,0,-2,25,0,-3,26,0,-4,27,0,-1,11,0,-2,28,0,-3,31,0,-2,14,0,-3,21,0,1,7,0,1,8,0,0,9,0,-1,13,0,1,13,0,-1,15,0,-1,16,0,1,17,0,1,18,0,1,19,0,1,20,0,-1,22,0,-1,23,0,1,24,0,1,25,0,1,26,0,1,27,0,-1,29,0,-1,30,0,1,30,0,-1,32,0,-1,33,0,1,33,0,9,1,2,1,6,3,1,16,4,1,23,5,1,7,6,1,8,7,1,10,8,1,11,44],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,7],[294,87,88,45,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,45]],[[[23,"Material #604",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[295,4]],[[[65,"Skin-0",1894792634,["Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Root/Bip001/Bip001 Pelvis/Bip001 Spine","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone004","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Root/Bip001/Bip001 Pelvis","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Root/Bip001/Bip001 Pelvis/Bip001 R Thigh","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone006","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Root/Bip001/Bip001 Pelvis/Bip001 L Thigh","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/red_eyes","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone001","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone001/Bone002","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone001/Bone002/Bone003","Root/Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Root/Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Root/Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Root/Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Root/Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Root/Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/black_eyes"],[[[7,4.910134521196596e-8,-0.0000026016327865363564,1,0,-0.29069259762763977,-0.956816554069519,-0.000002475011797287152,0,0.9568164944648743,-0.29069262742996216,-8.03256398285157e-7,0,-5.2794318199157715,2.069540500640869,-0.0059900409542024136,1],[7,2.7399494229030097e-7,-0.0000024975151973194443,1,0,-0.15286871790885925,-0.9882465600967407,-0.0000024262753868242726,0,0.988246500492096,-0.15286873281002045,-6.52566541248234e-7,0,-4.328982353210449,1.8160580396652222,-0.005994495004415512,1],[7,2.7399494229030097e-7,-0.0000024975151973194443,1,0,-0.15286871790885925,-0.9882465600967407,-0.0000024262753868242726,0,0.988246500492096,-0.15286873281002045,-6.52566541248234e-7,0,-3.5435328483581543,1.8153709173202515,-0.005994497332721949,1],[7,2.7399494229030097e-7,-0.0000024975151973194443,1,0,-0.15286871790885925,-0.9882465600967407,-0.0000024262753868242726,0,0.988246500492096,-0.15286873281002045,-6.52566541248234e-7,0,-5.191552639007568,1.3044168949127197,-0.005990914534777403,1],[7,-0.0000015373179849120788,-9.028343583850074e-7,-1,0,-0.8590314388275146,-0.5119230151176453,0.0000017827860574470833,0,-0.51192307472229,0.8590313792228699,1.1425414392363109e-8,0,3.8361570835113525,-5.219510078430176,0.0004475778841879219,1],[7,-0.9356913566589355,-0.11941634118556976,0.33199626207351685,0,-0.060378558933734894,0.9812955260276794,0.1827942430973053,0,-0.3476150631904602,0.15099354088306427,-0.9253997802734375,0,1.0898101329803467,-2.300873041152954,5.833157062530518,1],[7,0.0000013898131783207646,0.0000015656141840736382,1,0,6.123234262925839e-17,-1,0.0000015656141840736382,0,1,-2.175849994970336e-12,-0.0000013898132920076023,0,-3.2190001010894775,1.2026005983352661,-0.005997421685606241,1],[7,-0.9475365877151489,0.01571161299943924,0.31926092505455017,0,-0.011859062127768993,0.9963756799697876,-0.08423066884279251,0,-0.3194272518157959,-0.08359777927398682,-0.9439160227775574,0,-0.39248743653297424,-0.6654793620109558,6.224496364593506,1],[7,-0.07044325023889542,-0.05970565974712372,-0.9957274198532104,0,0.05312217399477959,-0.9970151782035828,0.05602472648024559,0,-0.9961002469062805,-0.04894864186644554,0.07340468466281891,0,3.087294340133667,1.3097330331802368,-1.084885835647583,1],[7,3.48826745266706e-7,1,-2.831220058396866e-7,0,-6.123229630714409e-17,-2.8312206268310547e-7,-0.9999997615814209,0,-0.9999992847442627,3.4882700106209086e-7,-9.869936221399908e-14,0,4.500161170959473,-0.00045059097465127707,0.017009135335683823,1],[7,0.935691237449646,0.119415782392025,0.3319967985153198,0,-0.06037797033786774,0.9812955856323242,-0.1827940195798874,0,-0.34761548042297363,0.1509934812784195,0.9253996014595032,0,1.078582525253296,-2.3023056983947754,-5.837140083312988,1],[7,0.9475365877151489,-0.015711968764662743,0.3192608952522278,0,-0.011858723126351833,0.9963756799697876,0.08423078060150146,0,-0.3194272518157959,-0.08359777927398682,0.9439160227775574,0,-0.40385955572128296,-0.6652915477752686,-6.22832727432251,1],[7,0.0704430565237999,0.05970608443021774,-0.9957274198532104,0,0.053122200071811676,-0.997015118598938,-0.05602515861392021,0,-0.9961003065109253,-0.04894864186644554,-0.07340451329946518,0,3.086449146270752,1.309016466140747,1.0968345403671265,1],[7,1.3652328334501362e-7,-0.000002577783106971765,1,0,-0.29069292545318604,-0.9568164944648743,-0.000002426778792141704,0,0.9568164944648743,-0.29069292545318604,-8.799709121376509e-7,0,-6.368471145629883,1.231537103652954,-0.005991420708596706,1],[7,0.3118664026260376,-0.2538040578365326,-0.9155995845794678,0,-0.7016610503196716,0.588237464427948,-0.40205514430999756,0,0.6406333446502686,0.767828106880188,0.00536706717684865,0,-5.099122524261475,-5.548925399780273,0.28806233406066895,1],[7,0.3973196744918823,0.029989460483193398,-0.9171899557113647,0,-0.9152780175209045,-0.05931949242949486,-0.3984309434890747,0,-0.06635598093271255,0.9977884888648987,0.0038798910100013018,0,-0.2209937572479248,-7.879603862762451,0.3026781976222992,1],[7,0.39325040578842163,0.03296952322125435,-0.9188398718833923,0,-0.9165869355201721,-0.06448984891176224,-0.3946000933647156,0,-0.0722656324505806,0.9973735213279724,0.0048587741330266,0,-0.7466853857040405,-7.884390830993652,0.3005191683769226,1],[7,4.242488671479805e-8,0.2767639458179474,-0.960938036441803,0,-6.123233601181349e-17,-0.960938036441803,-0.2767639458179474,0,-1,1.1741678740406769e-8,-4.076768789218477e-8,0,1.1787607669830322,1.0058479309082031,1.2684372663497925,1],[7,0.06999947875738144,0.0602254681289196,-0.9957274198532104,0,0.060495778918266296,-0.9965949058532715,-0.056025102734565735,0,-0.9957109689712524,-0.05631557106971741,-0.07340451329946518,0,1.8677347898483276,1.3228684663772583,1.096834421157837,1],[7,0.2767639458179474,-3.0113076476823153e-9,-0.960938036441803,0,-0.960938036441803,-4.231798911291662e-8,-0.2767639458179474,0,-3.9831544285107157e-8,1,-1.4605773479559048e-8,0,0.16036498546600342,-0.04988176375627518,1.2684372663497925,1],[7,4.242488671479805e-8,-0.27676355838775635,-0.9609380960464478,0,-6.123233601181349e-17,-0.9609380960464478,0.27676355838775635,0,-1,-1.1741662753195214e-8,-4.0767691444898446e-8,0,1.1787607669830322,1.0091692209243774,-1.2569057941436768,1],[7,-0.06999967247247696,-0.06022505834698677,-0.9957274198532104,0,0.060495756566524506,-0.9965949058532715,0.05602468550205231,0,-0.9957109689712524,-0.05631557106971741,0.07340468466281891,0,1.868574619293213,1.3235912322998047,-1.084885835647583,1],[7,-0.27676355838775635,-3.0138478379626576e-9,-0.9609380960464478,0,-0.9609380960464478,-4.2317477522146874e-8,0.27676355838775635,0,-4.149860188817911e-8,1,8.815814744878026e-9,0,0.16368615627288818,-0.049881771206855774,-1.2569059133529663,1],[7,0.9011187553405762,-0.3282506465911865,0.28326040506362915,0,-0.19255901873111725,0.2823602855205536,0.9397839307785034,0,-0.38846614956855774,-0.901401162147522,0.1912325769662857,0,-2.9344162940979004,5.92701530456543,-2.7734785079956055,1],[7,0.7339298725128174,-0.6173413395881653,0.28326040506362915,0,-0.08406398445367813,0.33126965165138245,0.9397839307785034,0,-0.6740029454231262,-0.7135475277900696,0.1912325769662857,0,-1.485795259475708,6.851903915405273,-2.7734787464141846,1],[7,0.9500259757041931,-0.310984343290329,-0.02719145454466343,0,-0.04929206147789955,-0.23545141518115997,0.9706353545188904,0,-0.3082546889781952,-0.9207882881164551,-0.23901405930519104,0,-3.728749990463257,6.361652374267578,0.07950639724731445,1],[7,0.9569084644317627,-0.2894015312194824,0.023936700075864792,0,-0.055914174765348434,-0.10273735225200653,0.9931358098983765,0,-0.28495585918426514,-0.9516782760620117,-0.11449190974235535,0,-2.4940035343170166,6.162708282470703,-0.5811967849731445,1],[7,0.7321518063545227,-0.5560982823371887,-0.3933298587799072,0,-0.10297806560993195,-0.661189079284668,0.7431180477142334,0,-0.6733120679855347,-0.5035709142684937,-0.5413567423820496,0,-1.2488707304000854,6.669544696807861,3.158709764480591,1],[7,0.8784483075141907,-0.2713302969932556,-0.39332982897758484,0,0.12998546659946442,-0.6564139723777771,0.7431180477142334,0,-0.45981764793395996,-0.7039179801940918,-0.5413567423820496,0,-2.873850107192993,5.8369526863098145,3.158709764480591,1],[7,0.7857925295829773,-0.6178920865058899,-0.02719145640730858,0,-0.12703938782215118,-0.2042744755744934,0.9706353545188904,0,-0.6053023934364319,-0.7592635750770569,-0.23901402950286865,0,-2.0827600955963135,7.532501697540283,0.0795062929391861,1],[7,0.9439348578453064,0.08402124047279358,0.31926095485687256,0,-0.11657514423131943,0.9896036982536316,0.08423076570034027,0,-0.30886468291282654,-0.11672624945640564,0.9439160227775574,0,-1.403650164604187,-0.8174368739128113,-6.22832727432251,1],[7,0.5756447315216064,-0.3072347640991211,0.7577862739562988,0,-0.25365620851516724,0.8139188885688782,0.5226803421974182,0,-0.7773621082305908,-0.49309536814689636,0.39059603214263916,0,0.19251352548599243,3.8769025802612305,-5.344680309295654,1],[7,0.30502501130104065,-0.21572081744670868,0.9275906682014465,0,-0.6983996033668518,0.611513614654541,0.3718726634979248,0,-0.6474549174308777,-0.7612592577934265,0.03586762025952339,0,1.9077959060668945,4.456623077392578,-4.791316509246826,1],[7,-0.9439347982406616,-0.08402159065008163,0.31926095485687256,0,-0.11657547950744629,0.9896036386489868,-0.08423065394163132,0,-0.30886465311050415,-0.11672624945640564,-0.9439160227775574,0,-1.3923214673995972,-0.8164277076721191,6.224496364593506,1],[7,-0.9011186957359314,0.328250527381897,0.2832607328891754,0,-0.1925593465566635,0.28236040472984314,-0.9397838115692139,0,-0.38846614956855774,-0.9014011025428772,-0.1912325620651245,0,-2.9236011505126953,5.923076629638672,2.770078420639038,1],[7,-0.7339298725128174,0.6173412203788757,0.2832607626914978,0,-0.08406425267457962,0.33126986026763916,-0.9397837519645691,0,-0.6740029454231262,-0.7135474681854248,-0.19123254716396332,0,-1.4769861698150635,6.84449577331543,2.770078659057617,1],[7,-0.9569084644317627,0.2894015610218048,0.023937059566378593,0,-0.05591452121734619,-0.10273724049329758,-0.9931357502937317,0,-0.28495582938194275,-0.9516782760620117,0.11449189484119415,0,-2.4825189113616943,6.15923547744751,0.5809087753295898,1],[7,-0.30502474308013916,0.21572056412696838,0.9275907874107361,0,-0.6983996629714966,0.611513614654541,-0.37187227606773376,0,-0.6474548578262329,-0.7612592577934265,-0.03586762025952339,0,1.91145658493042,4.454034805297852,4.780183792114258,1],[7,-0.7321518063545227,0.556098461151123,-0.3933296203613281,0,-0.10297828912734985,-0.6611889004707336,-0.743118166923523,0,-0.6733120679855347,-0.5035709142684937,0.5413567423820496,0,-1.2400833368301392,6.662869930267334,-3.1539905071258545,1],[7,-0.8784483671188354,0.27133050560951233,-0.39332959055900574,0,0.12998516857624054,-0.6564139127731323,-0.743118166923523,0,-0.45981764793395996,-0.7039179801940918,0.5413567423820496,0,-2.863306760787964,5.8336968421936035,-3.1539902687072754,1],[7,-0.9500259160995483,0.31098440289497375,-0.027191100642085075,0,-0.04929240047931671,-0.23545129597187042,-0.9706352949142456,0,-0.3082546591758728,-0.9207882881164551,0.23901404440402985,0,-3.7173478603363037,6.3579206466674805,-0.07918083667755127,1],[7,-0.7857924699783325,0.6178920865058899,-0.027191106230020523,0,-0.12703967094421387,-0.2042742520570755,-0.9706352949142456,0,-0.6053023934364319,-0.7592635750770569,0.23901401460170746,0,-2.073328971862793,7.525086402893066,-0.0791807770729065,1],[7,-0.5756446123123169,0.30723443627357483,0.7577864527702332,0,-0.25365641713142395,0.813918948173523,-0.5226800441741943,0,-0.777362048625946,-0.49309536814689636,-0.39059606194496155,0,0.19942234456539154,3.873216152191162,5.335585117340088,1],[7,1.3652328334501362e-7,-0.000002577783106971765,1,0,-0.29069292545318604,-0.9568164944648743,-0.000002426778792141704,0,0.9568164944648743,-0.29069292545318604,-8.799709121376509e-7,0,-6.368471145629883,1.231537103652954,-0.005991420708596706,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,".bin",423216907,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":110712,"length":31512,"count":7878,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":110712,"count":1977,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]]},"minPosition",8,[1,-6.959531307220459,-1.2110294103622437,-0.0000010164621926378459],"maxPosition",8,[1,6.959531307220459,3.33339262008667,8.367142677307129]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["16uV2JcDVEsYBaH61UGk6g"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["1cP73ctqBJ8Kz2HTgxvk23"]}],[1],0,[],[],[]],[[{"name":"WaterSplash01_00000","rect":{"x":735,"y":2,"width":110,"height":127},"offset":{"x":1,"y":-0.5},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"fmt":"0_4_7@89","w":522,"h":1000},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["1e7de0b3c"]}],[1],0,[],[],[]],[[[23,"Axe_Bullet",[{"rasterizerState":{"cullMode":1},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[46,10]],[[{"name":"WaterSplash02_00000","rect":{"x":735,"y":614,"width":108,"height":112},"offset":{"x":3,"y":-2},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"roll_light0014","rect":{"x":252,"y":350,"width":81,"height":37},"offset":{"x":-9.5,"y":31.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["20L8sCfopODK95NG0Q5Z8d"]}],[1],0,[],[],[]],[[{"name":"card_05","rect":{"x":209,"y":838,"width":90,"height":90},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"Sight"],[45,"Sight",33554432,[-3],[[2,-2,[1,"6cD+XWMUpPwqQTNnHzIwi8"],[5,0,0]]],[0,"7evMwbm6hJl7cJZ8Ys66Rg",-1,0]],[37,"AimPos",33554432,1,[[2,-4,[1,"81nh6PT+RP3oHgkwViWk7A"],[5,87,87]],[115,0,-5,[1,"dfVZMyLO5Lf76MY5Skh/Ca"],0]],[0,"7dSop4ZhxAbJx7/G+C4sGV",1,0]]],0,[0,4,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,9,1,5],[0],[2],[296]],[[[33,"Monster_2"],[94,"Monster_2",[-12],[[[2,-2,[1,"d0ebDvpPBGT6ArmjvqPO2U"],[5,0,0]],[229,true,45,[12],-7,[1,"dfu9wfwrxKU5pBM1do28TW"],[-6],[-5],[-4],-3],-8,[66,8,4,-9,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[70,true,-11,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-10]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[207,"RootNode",[-14,-15,-16],[-13],[0,"4dYez1eA1I96Ct882KsxLs",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[77,"RootNode",1,[-18,-19,-20],[[40,-17,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[21,22,23,24],25]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[43,"Bip001 R Hand",[[-21,-22,-23,[6,"Bone001",-24,[0,"88UUGqm9BIiZXBFgmde/qy",1,0],[1,0.000643588078673929,0.00034593974123708904,-0.0006129161338321865],[3,0.11868524619846767,-0.7058448832215561,0.00910963682124117,0.6982935111267624],[1,10.416027227954366,-89.80281454689548,-8.90660909621888]]],1,1,1,4],[0,"457wCNWJxPqZqMI5Tvtn6a",1,0],[1,0.0004519561480265111,-1.1920929521291868e-10,1.1920929521291868e-10],[3,0.5964287987374773,-0.4160418719084868,-0.5640234229992932,0.39122810119367996],[1,-179.56574806419022,87.1029971265809,-69.65272106783692]],[76,"Bip001 Pelvis",[-25,-26,-27],[0,"1ff7rxVAdK/6/fGR2MXTe3",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[128,"Bip001 Neck",[-28,-29,-30],[0,"5c3u6QrAlIgLVLzLS0VRBh",1,0],[1,0.0005745618254877627,-1.059472580777765e-7,1.1175870992530257e-11]],[20,"Bip001 L Hand",[-31,-32,-33],[0,"32xuyyV/NBhZJZWdEPbHMp",1,0],[1,0.0004519563226494938,0,-4.768371808516747e-10],[3,-0.7197403146494361,0.07071066485433336,-0.021397549167777467,0.690301402456783],[1,-92.13710840366332,3.8649978245349477,-7.546347686770484]],[72,"RootNode",[-35],[[40,-34,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[15,16,17],18]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",8,[2],[[74,1,0,-36,[1,"0cCuiskZ1LlaHSvmTemF09"],[13],[7],14]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Head",6,[-37,-38],[0,"7c74LjNKdJPYFuBCUOln2X",1,0],[1,0.00006542586925206706,2.980232380322967e-11,7.450580950807417e-12],[3,0.16448967388555488,-0.030339841223360507,-0.03998917397089642,0.9851007599147868],[1,18.83997433095512,-2.682695212833428,-5.092729969260947]],[48,"Odds",3,[-39,-40],[0,"8d4GsIhIlAWrE+ZvZl4/NS",1,0]],[108,"OddsNum",11,[[[2,-41,[1,"beJ1C1UwZCj6qesWfHhS+t"],[5,33.26,32]],-42],4,1],[0,"4bIwSQVu5AS4I22dSZzJlt",1,0],[1,1.5,0,47]],[78,"FloorNode",3,[-43],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",13,[[113,1,-44,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",3,[8],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"5eokyLrDhH7YM1QoVtLXqG",1,0],[1,0,2.2,0]],[198,"monster_M_002",2,[-45],[0,"5eMhY9/XFIk6Z84K1v1aO/",1,0],[1,1000,1000,1000]],[95,1,0,17,[1,"64EedBnVhF5oppKWGNdS6h"],[2],[7],2],[101,"Bip001",2,[5],[0,"302XXdtdhGaqSZnMOsuyTx",1,0],[1,4.549185916857823e-9,1.1032437086105347,-0.13915622234344482],[3,0.43490220731595924,0.5575482670331837,0.5575482670331837,-0.43490220731595924],[1,1000,1000,1000],[1,-90,-104.08967786384524,0]],[3,"Bip001 Spine",5,[-46],[0,"d0AKOYpRNI7rrjZCVz1Sp2",1,0],[1,0.0003394206869415939,-4.653036569379765e-7,1.829117479701381e-8],[3,-0.018151096998625202,0.013077236711244016,-0.06467891484135505,0.9976553320324056],[1,-1.995371407482132,1.3721875648803608,-7.442390960664102]],[3,"Bip001 Spine1",20,[6],[0,"70dAS5ATxDa5/3tZYmjLIi",1,0],[1,0.0005897345254197717,-3.9991735434341535e-7,1.5303491807117098e-8],[3,-0.01814388679296552,0.013085294581744258,-0.06507609817849007,0.9976295283739435],[1,-1.9940322753932724,1.37244185093429,-7.48799819947627]],[3,"Bip001 L Clavicle",6,[-47],[0,"61K75mGZlL3YmnP5iqtC/l",1,0],[1,-0.00010560297960182652,0.00004074850585311651,0.0003344969591125846],[3,0.677865982735192,-0.00027080910540324825,0.7351853854873542,0.0002916825181468945],[1,179.95452816764305,-94.64577495493981,0.0035372631450796234]],[3,"Bip001 L UpperArm",22,[-48],[0,"84WDZ0hVhOMZfrJfwo/ib8",1,0],[1,0.00046746869338676333,-2.980232380322967e-11,-2.3841859042583735e-10],[3,0.2342728707186164,0.3320228503900319,0.4151664732363183,0.8139495367433133],[1,10.964314107548283,38.509962024462595,56.24457549833544]],[3,"Bip001 L Forearm",23,[7],[0,"6ch9WEmcxBfozozv/6sD/+",1,0],[1,0.0005590323125943542,0,2.3841859042583735e-10],[3,5.65100810537721e-17,-3.9038569837675736e-18,-0.26612561962346276,0.9639383562137301],[1,7.133426349124773e-15,1.5053228661982261e-15,-30.867696050918518]],[3,"Bip001 L Finger0",7,[-49],[0,"e8v1TA3XhNxZTPCvP4flxk",1,0],[1,0.00023967331799212843,0.00014286900113802403,-0.0004948174464516342],[3,0.7954107112020119,0.36232776292935137,-0.017146662276656566,0.4855372124652153],[1,108.71929735395798,27.226779695829745,34.03837772471035]],[5,"Bip001 L Finger01",25,[[6,"Bip001 L Finger02",-50,[0,"98G681cMNCwqyi9P0Ki+KA",1,0],[1,0.00018937468121293932,-1.1920929521291868e-10,-1.1102230773579206e-19],[3,-8.55630159337847e-8,-2.991014714508513e-8,0.17030754626889644,0.9853909577847058],[1,-0.000009636868172074958,-0.000001812700843094837,19.61140184380602]]],[0,"20xf76Zc5LmpJno5xXmTn+",1,0],[1,0.00023663484898861498,8.940696794024205e-11,2.220446154715841e-19],[3,-0.12695624178454093,0.34479010768295576,0.35805246922611206,0.8583707378499136],[1,-33.1636269219007,53.46915005433693,31.812217564105133]],[3,"Bip001 L Finger1",7,[-51],[0,"b5Yx3LjmRPpJ9Zm9zj43D1",1,0],[1,0.0006793693173676729,-0.000044916392653249204,-0.00039534253301098943],[3,0.057922254540318414,0.08386472510179711,0.6053125784368728,0.7894354962241509],[1,-2.215421756610105,13.824662642876707,74.88969004329314]],[5,"Bip001 L Finger11",27,[[6,"Bip001 L Finger12",-52,[0,"65qD8TQXpJgJxH0UIfpteh",1,0],[1,0.00019368088396731764,5.960464760645934e-11,-2.7755576933948015e-20],[3,2.999211801673349e-9,2.209641161664545e-9,0.5931460924324373,0.8050948472274124],[1,4.2688680492833406e-7,-1.8197462970722907e-14,72.76116754092097]]],[0,"56VMnZtmlCIJz4dWWZ03ko",1,0],[1,0.00021117401774972677,1.788139358804841e-10,-2.980232380322967e-11],[3,1.8282907738632515e-8,-5.862084629619377e-9,0.3635171076939075,0.9315875226804274],[1,0.0000029847729003340937,-0.0000018857717454709265,42.632702873946975]],[3,"Bip001 L Finger2",7,[-53],[0,"9aqwak2WdH1INh6p5CtuLP",1,0],[1,0.0006930004456080496,0.00002112102447426878,0.00011955380614381284],[3,0.0068743857657225915,0.024180291256471056,0.5952475675843565,0.8031490457069618],[1,-3.486203875770557,6.030560033289887,73.03388152079633]],[5,"Bip001 L Finger21",29,[[6,"Bip001 L Finger22",-54,[0,"62TPacthNDLb2/P3sc0B/e",1,0],[1,0.00015562379849143326,-1.1920929521291868e-10,-5.960464760645934e-11],[3,6.631042965797781e-9,-7.1113778589080044e-9,0.4430544469816753,0.896494705511283],[1,0.0000017159189696084672,-0.0000017570091559250577,52.59785976218243]]],[0,"843uVQwhpJ4b3fsA3g2X1B",1,0],[1,0.00019230162433814257,1.1920929521291868e-10,0],[3,-1.503030757889046e-8,1.5068826100374977e-8,0.5713737574213713,0.8206899715057955],[1,-0.000006915547279760837,0.0000069187180379212386,69.69215539259096]],[3,"Bip001 R Clavicle",6,[-55],[0,"12MFJICzVBJJt39Oma8yyr",1,0],[1,-0.00010560273949522525,0.000040750415791990235,-0.0003344968135934323],[3,0.7324102535346906,0.008083021284145332,-0.6807523383177392,-0.009281118418647972],[1,-179.85155348688016,85.81117260281312,1.402538006038033]],[3,"Bip001 R UpperArm",31,[-56],[0,"4bnCCyKSZLV6mMHC2niMDI",1,0],[1,0.0004674687224905938,-8.940696794024205e-11,4.440892309431682e-19],[3,0.2768523942235921,-0.3629799719153935,-0.1494353983248861,0.8770788753176351],[1,25.185117856927807,-38.68594049383647,-27.588426136494274]],[3,"Bip001 R Forearm",32,[4],[0,"cbkC7Zq6FDs7yxZFqecTDq",1,0],[1,0.0005590322543866932,2.220446154715841e-19,2.220446154715841e-19],[3,-4.018720246434876e-17,1.0877765557318148e-17,-0.26127519492222145,0.9652643536971389],[1,-4.770832113816848e-15,2.4299574130096035e-23,-30.291482307855876]],[3,"Bip001 R Finger0",4,[-57],[0,"997UYLXk9Hd5Hcwc/skiww",1,0],[1,0.0002396731433691457,0.00014286887017078698,0.0004948172718286514],[3,0.8733841763266084,0.3718339497029145,0.06145269041637853,-0.3084852690667919],[1,-132.36699021162025,-25.1911491570172,37.70479658760034]],[5,"Bip001 R Finger01",34,[[6,"Bip001 R Finger02",-58,[0,"d9ktWzdddDoa5le3wLnTlY",1,0],[1,0.0001893745647976175,1.1920929521291868e-10,-2.980232380322967e-11],[3,-4.022040485042011e-9,6.865899859921853e-9,0.17030751733098085,0.9853909627861206],[1,-6.243716194728664e-7,9.063502540607003e-7,19.611398478602542]]],[0,"2dAWO/56xAYKXBl4GskKas",1,0],[1,0.0002366349071962759,0,-2.980232380322967e-11],[3,4.045502698807993e-9,1.6161362422824326e-8,0.21663702065631893,0.976252222164515],[1,5.669043200343704e-8,0.0000018844253851228138,25.023170893488082]],[3,"Bip001 R Finger1",4,[-59],[0,"dcwcjDl3VIxJjH4N/mxSuH",1,0],[1,0.0006793689681217074,-0.00004491650906857103,0.00039534253301098943],[3,0.009113826079809796,-0.07570287769801669,0.28626180392958417,0.9551126593723939],[1,4.156597855056979,-10.2975628649371,33.05505537332765]],[5,"Bip001 R Finger11",36,[[6,"Bip001 R Finger12",-60,[0,"acufFGZStO1Lb5uswqH2vM",1,0],[1,0.00019368088396731764,-2.3841859042583735e-10,2.220446154715841e-19],[3,-3.6689687373840244e-8,1.0982785407034726e-10,0.4034012218628792,0.9150231987220514],[1,-0.000005710801600485053,0.0000025314436745534186,47.58195642086441]]],[0,"a8Z+ZL+rBG6IxyMsPuIIqO",1,0],[1,0.00021117401774972677,2.3841859042583735e-10,2.220446154715841e-19],[3,1.2589395177430805e-8,7.971934143701468e-9,0.5349874442666183,0.8448600088044598],[1,0.0000017075472925031882,0,64.68611983683789]],[3,"Bip001 R Finger2",4,[-61],[0,"d8mrHUu0VNYYbABFD0g6Z9",1,0],[1,0.0006930003291927278,0.00002112090623995755,-0.00011955380614381284],[3,0.048569476845778746,-0.037587276624799396,0.2709650029608054,0.9606280079850414],[1,7.631731423056465,-6.609937632450422,31.127346408035912]],[5,"Bip001 R Finger21",38,[[6,"Bip001 R Finger22",-62,[0,"50h9mkXb5PC53jlZM6rqOg",1,0],[1,0.0001556236675241962,2.3841859042583735e-10,2.220446154715841e-19],[3,-1.1912820891560163e-8,-4.306576406982378e-9,0.6015089123766053,0.7988660891110057],[1,-0.0000028718181645482688,0.0000015445979407293868,73.95608428738743]]],[0,"69F0OJhD1EJ5opQi6DKDOh",1,0],[1,0.00019230150792282075,0,4.440892309431682e-19],[3,6.331824312310557e-9,-2.50943831199738e-8,0.3816704996353062,0.9242984527240837],[1,0.0000024951200892660454,-0.000004141430946201762,44.87439139520141]],[5,"Bone002",10,[[53,"Bone003",-63,[0,"23sG8WSihJ2aVRNZ277gqe",1,0],[1,0.001086325035430491,-2.220446154715841e-19,1.1920929521291868e-10],[1,4.010416030883789,1,1]]],[0,"abdtrLeYxIt5rVZ9dNnsWM",1,0],[1,0.00008079480903688818,0.0006462070741690695,-0.00028033502167090774],[3,-0.04806676497249688,0.8656930905908311,0.477253287062901,0.14315851003705757],[1,-57.274840065804355,162.89265852056477,3.0624050742292286]],[5,"Bone002_L",10,[[10,"Bone003_L",-64,[0,"5amZ5DBW1OQ5nBjYprDUdU",1,0],[1,0.0010863241041079164,1.3877788466974007e-20,0]]],[0,"68qfuU1GRPA7x7tLDo8COl",1,0],[1,0.00008079480903688818,0.0006462060264311731,0.0002800010552164167],[3,0.14315834630576715,0.4772521253773445,0.8656937473393654,-0.048066958748526664],[1,-122.72530689519644,-162.89266068949823,3.062354149812223]],[3,"Bip001 L Thigh",5,[-65],[0,"f7IJv4qs5C4Zm7aGmQ4ObM",1,0],[1,-5.9604643443123e-10,7.301568794026991e-10,0.0004971832386218011],[3,0.1354613898577543,0.9630391586322488,0.20977282499221833,-0.10100075590548893],[1,-26.237175717414804,-165.07266162379992,12.622990378948503]],[3,"Bip001 L Calf",42,[-66],[0,"470W+T4VJKhJEvP/HR905h",1,0],[1,0.0005586643237620592,-2.980232380322967e-11,-5.960464760645934e-11],[3,-8.207540303763634e-19,-5.139041891189983e-18,-0.15771083356932877,0.9874853381062767],[1,-1.9547279917915018e-16,-6.275728624987515e-16,-18.14809942118991]],[5,"Bip001 L Foot",43,[[6,"Bip001 L Toe0",-67,[0,"8eHQUJP8lFd5AqlReVbqCj",1,0],[1,0.00015166863158810884,0.0003206004621461034,0],[3,1.8165636417350667e-7,-1.1337155053374444e-7,0.7071069003958129,0.7071066619772297],[1,0,0.000029438678910844032,90]]],[0,"bfsNFJqFlB57cX8UNQFHsP",1,0],[1,0.00040651304880157113,1.4901161901614834e-11,5.960464760645934e-11],[3,0.025023986192876404,-0.06892631351332956,0.0044822833534505346,0.9972977852960572],[1,2.89646882460216,-7.9151543663288955,0.3145966797217339]],[3,"Bip001 R Thigh",5,[-68],[0,"adHU7VyvdMzpjXJImbcihq",1,0],[1,7.152557435219364e-10,-6.407499530958205e-10,-0.0004971831804141402],[3,0.11044586746887225,0.9739300274510702,-0.1780380505520052,0.08697393025411475],[1,21.86211982402449,167.73856564081996,10.612381433993844]],[3,"Bip001 R Calf",45,[-69],[0,"95UKItDQxIyL8cr3OTdZx9",1,0],[1,0.0005586642655543983,-1.1102230773579206e-19,5.960464760645934e-11],[3,0,0,-0.23612197889357045,0.9717234231422972],[1,0,0,-27.31553762302394]],[5,"Bip001 R Foot",46,[[6,"Bip001 R Toe0",-70,[0,"aeBu7/vEROVLh9AaJSz4jN",1,0],[1,0.00015166863158810884,0.0003206004330422729,-5.960464760645934e-11],[3,-9.954460892746618e-8,4.7969376847873315e-8,0.7071067215818948,0.7071068407911865],[1,0,-0.000016131893048700825,90]]],[0,"92fpGSdMZIY4TzcBjYqhPx",1,0],[1,0.0004065130196977407,-1.4901161901614834e-11,5.960464760645934e-11],[3,-0.030164936254364942,0.062159690381467826,0.11393756304954693,0.9910824795337575],[1,-4.35011252605776,7.667070222269022,12.831992338615702]],[126,true,2,[1,"b4NV6pkVVKrplJCWpyyQ3M"],[3,4,5,6,7,8,9,10,11,12]],[9,"Board",11,[[83,"Quad<ModelComponent>",0,-71,[1,"142iVbqA5BdosytAKiKq8x"],[19],[7],20]],[0,"dc7KbQilBASL9s5eFfBMIw",1,0],[1,0,-3.4,45],[1,65,28,1]],[111,"X2",26,26,32,false,false,12,[1,"d6J+uMQyJFYKuudlWgOy7Q"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,20,0],[1,70,160,70]]],0,[0,4,1,0,0,1,0,20,50,0,-1,51,0,-1,16,0,-1,48,0,0,1,0,-3,51,0,0,1,0,-1,18,0,0,1,0,-1,3,0,-1,48,0,-1,16,0,-2,17,0,-3,19,0,0,3,0,-1,13,0,-2,15,0,-3,11,0,-1,34,0,-2,36,0,-3,38,0,1,4,0,-1,20,0,-2,42,0,-3,45,0,-1,22,0,-2,31,0,-3,10,0,-1,25,0,-2,27,0,-3,29,0,0,8,0,-1,9,0,0,9,0,-1,40,0,-2,41,0,-1,49,0,-2,12,0,0,12,0,-2,50,0,-1,14,0,0,14,0,-1,18,0,-1,21,0,-1,23,0,-1,24,0,-1,26,0,1,26,0,-1,28,0,1,28,0,-1,30,0,1,30,0,-1,32,0,-1,33,0,-1,35,0,1,35,0,-1,37,0,1,37,0,-1,39,0,1,39,0,1,40,0,1,41,0,-1,43,0,-1,44,0,1,44,0,-1,46,0,-1,47,0,1,47,0,0,49,0,9,1,2,1,9,4,1,33,5,1,19,6,1,21,7,1,24,8,1,15,71],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,18,48,50,50,51],[-1,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,6,-1,-2,-3,7,-1,6,-1,-2,-3,-4,7,6,13,7,3,15,16],[19,65,297,47,104,105,106,107,108,109,110,111,112,19,67,20,30,31,20,68,17,21,32,33,34,21,113,114,47,8,35,22]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["22SPOrKyRL4p0X3Y7OYHfk"]}],[1],0,[],[],[]],[[{"name":"h5betFont","rect":{"x":2,"y":94,"width":253,"height":88},"offset":{"x":-1.5,"y":84},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[18,".bin",1957093047,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.2528918981552124,-0.9225345849990845,-9.76026285570697e-7],"maxPosition",8,[1,1.2528915405273438,0.9225345849990845,-8.780256735008152e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["23jBCFLnpCBJwQXJQ4CwUm@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[19],[32,"s1_03",[-2],[0,"c57zPuckVcLKOO8dL2WS0k",-1,0]],[27,"Plane024",1,[[30,-3,[1,"93Luy5Lh1SgbIh65nHaqOV"],[0],[7],1]],[0,"e5HunF4ylaGY8Gz8Dt6Kc+",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[298,115]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[116,116,4]],[[{"name":"roll_light0015","rect":{"x":236,"y":436,"width":63,"height":54},"offset":{"x":-18.5,"y":23},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"wifi_02","rect":{"x":169,"y":393,"width":15,"height":6},"offset":{"x":0,"y":0},"originalSize":{"width":15,"height":6},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"Monster_7"],[94,"Monster_7",[-11],[[[2,-2,[1,"7cuBEo1O5J4Is56l+mSJuU"],[5,0,0]],[230,true,[200],-6,[1,"46lc1zyp1CpbQWLvzxDi+Z"],[-5],[-4],[-3],17,18],-7,[66,8,4,-8,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[150,-10,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-9]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[208,"RootNode",[-13,-14,-15],[-12],[0,"53U2J8yytMNJFs5Re010lY",1,0],[1,0,0,150],[1,55,55,55]],[43,"Bip001 Head",[[-16,[6,"Bone004",-17,[0,"6a/oK6kXhCCb2pF9XX4PMn",1,0],[1,0.7084650993347168,-0.4011831283569336,-0.005548000335693359],[3,0.6163999314503358,0.7874332508268537,1.8156302052476644e-7,-4.918174355595857e-7],[1,-0.00021291828245277678,-179.9997617563886,76.10742474132984]],[53,"black_eyes",-18,[0,"fejy5z7PZJAKBSGDYaqWDe",1,0],[1,1.4747509956359863,0.2833731174468994,0.0000019669532775878906],[1,0.30820432305336,0.30820438265800476,0.30820441246032715]],[10,"red_eyes",-19,[0,"eez0g/NrhHoazel7Z/dD8G",1,0],[1,1.0890388488769531,0.838005542755127,0.0000019073486328125]]],1,4,4,4],[0,"4cyrSgUktHtJRy4NxSEEk6",1,0],[1,0.3269519805908203,-4.440892098500626e-16,2.9802322387695312e-8],[3,-0.0726567891371402,0.023494424688128023,-0.05906063043692518,0.9953295157550829],[1,-8.21623837330153,2.204692945916836,-6.948874412102258]],[20,"Bip001 L Hand",[-20,-21,-22,-23],[0,"2eTKEuXw9Ny44JSRZv+qs5",1,0],[1,0.8494701385498047,1.1920928955078125e-7,-8.881784197001252e-16],[3,-0.783334869648605,0.08601701461481595,0.07030068502902105,0.6115924859527035],[1,-103.7327767190426,12.451272385426602,-2.7953961036884274]],[20,"Bip001 R Hand",[-24,-25,-26,-27],[0,"ec9CfqRcJJLqDvM1x2R48C",1,0],[1,0.8494699001312256,0,8.881784197001252e-16],[3,0.6841250038596911,-0.18402768608589,-0.08508427412027737,0.700619337547342],[1,86.94644381996528,-8.761520710729418,-21.778491326999433]],[76,"Bip001 Pelvis",[-28,-29,-30],[0,"e0YrqEcVtBzpYoHlz3NT7e",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[3,-31,-32],[0,"18U4UmJYBMvqfvu3VdgeNd",1,0],[1,0.8626184463500977,0.5116574168205261,0.00007328391075134277],[3,-0.15198056497381437,0.02160798772138933,0.0903622141320503,0.9840069476350389],[1,-17.9115868580643,4.073784797910501,9.861441210402798]],[43,"Bip001",[[[6,"Bip001 Footsteps",-33,[0,"fbMSZDtipLhpbOKdDgpDLL",1,0],[1,0.15258456766605377,0.08010691404342651,-7.650567054748535],[3,-0.0009419146312682023,-0.011221250621566202,0.5372310329829778,0.8433599549014394],[1,1.4184117808479109,-2.4279504651117896,64.98260229852183]],6],4,1],[0,"8fffXWT+BIvLGqnaiNpMNU",1,0],[1,-0.3817705810070038,0.0851251482963562,2.8599209785461426],[3,0.0009419148058910317,0.011221250621564356,-0.5372310329828894,0.8433599549013008],[1,1.8486948018282523,2.7018825750632414,-64.97687489193879]],[43,"Bip001 Spine1",[[7,[6,"Bone006",-34,[0,"50OUniuFtIiqxwpHP1rPM/",1,0],[1,0.11568927764892578,1.111314296722412,-0.0055484771728515625],[3,0.05420689004984699,0.7050251485291261,0.7050268174592084,0.054206454190874616],[1,-90.0001391760988,-179.99995387807894,8.793194160750966]]],1,4],[0,"6bZE1osexCtZ00h/5FnOxV",1,0],[1,0.7855498790740967,-0.0006796717643737793,0.000011831521987915039],[3,-0.008548791763912284,-0.0010417298477844027,0.07336233765331114,0.9972681687351417],[1,-0.9787701314343442,-0.047693641877659,8.414979431105412]],[48,"RootNode",1,[-35],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[48,"MonsterNode",10,[2],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"e5b/9u3JxLLJ5q1n6MSbFS",1,0],[1,0,1.7,0]],[133,"Object024",2,[-36],[0,"4ejO2zoahBiLKWy/toh6L2",1,0],[1,0,0,1.1156005859375],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[95,1,0,13,[1,"19qgVT2thK3JKiBqzS2dbc"],[0],[7],2],[54,"Root",2,[8],[0,"d2yZV9S3BHTKI1mE16T9ne",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Spine",6,[9],[0,"d7LC8eXpRNToB53xQHxuxU",1,0],[1,0.5603694915771484,-0.04974028468132019,-0.00004038214683532715],[3,0.032141580297708264,0.01517672329566962,0.05460819825030065,0.9978750074883269],[1,3.6045776178186975,1.5438458887573028,6.313005151491113]],[3,"Bone001",3,[-37],[0,"25f57S5rBLwJEjTsUzbmz3",1,0],[1,1.9788670539855957,0.07126498222351074,0.4396589696407318],[3,0.9426572837792251,0.2508918621412756,0.12778873631686227,-0.17922209049053073],[1,-153.60047483186239,-21.4645092416148,25.290309809105842]],[5,"Bone002",17,[[6,"Bone003",-38,[0,"6dyh6AUh5AKKmJLBYw4A5V",1,0],[1,0.5738060474395752,-4.76837158203125e-7,-5.960464477539063e-8],[3,-0.0000015720716973670622,0.003694259531575583,0.020453275946454824,0.9997839846422328],[1,-0.008846013307212821,0.42360146439407526,2.3439195467043867]]],[0,"b8+SWGUBBH2qoVzftlD9MG",1,0],[1,0.5004358291625977,4.76837158203125e-7,2.220446049250313e-16],[3,0.005848095816995079,0.013540052027289359,-0.3517651000790945,0.9359721048902891],[1,1.5585472179783013,2.243021323316196,-41.17234960943597]],[3,"Bip001 L Clavicle",7,[-39],[0,"35/FK/9FVB370XdyELrE8W",1,0],[1,0.42334413528442383,-1.2965025901794434,0.8862261772155762],[3,0.6205033414516398,-0.14786758434059008,0.7701240473373474,-0.0044421235205151935],[1,166.91602082906468,-103.54408799653746,-10.973013968843782]],[3,"Bip001 L UpperArm",19,[-40],[0,"58ppMT415Hm63v1mKMcvmD",1,0],[1,1.2365801334381104,-2.384185791015625e-7,-4.76837158203125e-7],[3,-0.07074257099855008,0.4819666224542432,0.15889814750922632,0.8587520260277122],[1,-16.29666642096828,60.303122275528736,11.812938634538954]],[3,"Bip001 L Forearm",20,[4],[0,"0eRa8GQldC8K7fQ31Zd4Z9",1,0],[1,1.077972173690796,0,0],[3,-1.670972367230521e-17,3.28781568850229e-17,-0.3725497793826994,0.9280122099853548],[1,-5.168068857507426e-16,3.8523447489426074e-15,-43.74590995029855]],[5,"Bip001 L Finger0",4,[[6,"Bip001 L Finger01",-41,[0,"ebBIU/V3JFYbmRJF19A7rK",1,0],[1,1.0051121711730957,2.384185791015625e-7,-2.384185791015625e-7],[3,0.04534794322894484,-0.3548631019374286,0.11836964461352512,0.9262852531279543],[1,9.848341571106138,-42.855832223572406,10.783795154474074]]],[0,"58bc5BhDVMro3mZ3D44TZL",1,0],[1,0.7325212955474854,0.1589491367340088,-0.6290496587753296],[3,0.10326521364939899,0.3803890445585015,0.2996840852302997,0.8688094840006598],[1,-3.4775258667797395,48.44808952628125,36.81968456586434]],[5,"Bip001 L Finger1",4,[[6,"Bip001 L Finger11",-42,[0,"d0x6Kk1SZN9JrbGmb1Ur4k",1,0],[1,0.8108019828796387,4.76837158203125e-7,1.1102230246251565e-16],[3,8.80190065621796e-9,1.9147213841415647e-8,0.3471310481867737,0.9378166320687383],[1,2.427674670660364e-7,0.0000022497329303413908,40.62387453861438]]],[0,"b98UqcYTpCZKKp7LNiBKFE",1,0],[1,1.2804954051971436,0.06489276885986328,-0.629083514213562],[3,0.24237684545932653,0.08938011394454883,0.013698304800113525,0.9659591173864701],[1,27.83598541597992,9.580932956330109,4.002002854686753]],[5,"Bip001 L Finger2",4,[[6,"Bip001 L Finger21",-43,[0,"cbcLJHvdhM2aVq6oPm7fcR",1,0],[1,0.8106169700622559,2.384185791015625e-7,0],[3,-5.389266312958962e-8,5.211816790054387e-8,0.7188422130899349,0.6951732680993705],[1,-179.99974344985174,179.99974330604695,88.08205209113184]]],[0,"4396i7R3tBzI5VXVZJkFLF",1,0],[1,1.374708652496338,-0.06161785125732422,0.23816335201263428],[3,-0.07526373993002339,0.03094704502540775,0.04281566365877312,0.995763259415309],[1,-8.803012802340442,3.9162966797953604,4.623637964894903]],[5,"Bip001 L Finger3",4,[[6,"Bip001 L Finger31",-44,[0,"6a6/ks1rJP9rhLM1TNG7K3",1,0],[1,0.5862767696380615,2.220446049250313e-16,1.1920928955078125e-7],[3,4.89248464850513e-9,6.805870990231258e-9,0.8119721427371016,0.5836961876001246],[1,-179.99999903950484,-179.9999999999999,71.42186990223429]]],[0,"90F6pd6U9Ouq0c8hTcpXMj",1,0],[1,1.240714430809021,0.14339184761047363,0.8769489526748657],[3,-0.29627558815822763,-0.18947330262294432,0.08072597595271658,0.9326328110575629],[1,-32.75632053955844,-18.464711925025814,15.239120689605782]],[3,"Bip001 R Clavicle",7,[-45],[0,"e1bMLkKNNETK+d26ssNnjD",1,0],[1,0.5909914970397949,-0.5894322395324707,-1.3961296081542969],[3,0.7043035850570176,0.12384190059469216,-0.6529515593442673,-0.24954740007224446],[1,-167.33810924552503,82.25826718391716,30.02178984018819]],[3,"Bip001 R UpperArm",26,[-46],[0,"a4qYXvJPZDAqUiEArwVwEU",1,0],[1,1.2365798950195312,1.1920928955078125e-7,0],[3,0.22075499073861019,-0.5656145677757625,0.2843824856005531,0.7419393483752461],[1,41.23347095100075,-78.37971708411469,9.919515886693077]],[3,"Bip001 R Forearm",27,[5],[0,"3537O1PHRMQLdgs8uHlbpv",1,0],[1,1.0779719352722168,-2.220446049250313e-16,8.881784197001252e-16],[3,-6.555193055031563e-18,2.2754541700155177e-18,-0.3279275354720998,0.9447028799994179],[1,-7.951386802660246e-16,-2.8520617736927696e-23,-38.28606701889631]],[5,"Bip001 R Finger0",5,[[6,"Bip001 R Finger01",-47,[0,"b6+nVGPLpBrJF4hX+nsDXq",1,0],[1,1.0051120519638062,0,-2.384185791015625e-7],[3,0.033102091671898565,0.16067600381341238,0.3955185147608108,0.9036883189501232],[1,-5.609436443125452,22.575816788252826,46.50948772052168]]],[0,"1are8I+ShKbaVRX5n4m8TP",1,0],[1,0.7325212955474854,0.15894842147827148,0.6290497779846191],[3,-0.5047301132674192,-0.4427519211640384,0.257195446923922,0.6950314749334849],[1,-52.91390719422636,-36.79987900703372,53.55797433320994]],[5,"Bip001 R Finger1",5,[[6,"Bip001 R Finger11",-48,[0,"bcY2wAK5JCEqjvV9+fGmGV",1,0],[1,0.8108017444610596,-4.76837158203125e-7,-2.220446049250313e-16],[3,-2.7845444393376422e-8,-1.0621178348691467e-8,0.3563876364633618,0.9343381896166172],[1,-0.0000034150941237218945,-6.701892149207312e-14,41.75702680358506]]],[0,"87jarMlu1JqLA/qv5eEbsD",1,0],[1,1.2804957628250122,0.06489229202270508,0.6290833950042725],[3,-0.25672021730778016,-0.02881134326401747,0.24434930297972174,0.9346432766880063],[1,-31.88518341368614,4.6573416804363585,28.135072838118433]],[5,"Bip001 R Finger2",5,[[6,"Bip001 R Finger21",-49,[0,"6fdIZ4KjVLLZKjqlWY+rlt",1,0],[1,0.8106169700622559,0,-4.440892098500626e-16],[3,-3.107666677680783e-8,-3.213475018240755e-8,0.7188422130899361,0.6951732680993717],[1,179.9999948773603,179.9999999999979,88.08205209115086]]],[0,"90Z/siIn9FK4zDt+IVCbNm",1,0],[1,1.374709129333496,-0.06161785125732422,-0.23816347122192383],[3,0.004272468465552951,0.07773494861415191,0.3111716863313112,0.9471595459070737],[1,-2.8602092016586957,10.317774243310087,36.1657163082294]],[5,"Bip001 R Finger3",5,[[6,"Bip001 R Finger31",-50,[0,"f7jNVyQnxMAIrxRGrt45fS",1,0],[1,0.5862767696380615,1.1920928955078125e-7,0],[3,2.3108692614457474e-9,-8.003051512307196e-9,0.6777881347912743,0.7352572640485541],[1,0.000010052004834046938,-0.00001051361494149488,85.34208189673834]]],[0,"3dD/5zib1LnrCcPSNf6T2o",1,0],[1,1.2407147884368896,0.14339160919189453,-0.8769490718841553],[3,0.25852051840146195,0.278662120324573,0.3671812480862351,0.848936096131792],[1,21.437903567482056,26.226052919382916,50.13050707951681]],[3,"Bip001 L Thigh",6,[-51],[0,"1foTSjiGhM3JSQCONlNWu1",1,0],[1,-9.5367431640625e-7,0.0000011920928955078125,0.790573000907898],[3,0.2851010827304034,0.9467438354100751,0.00874689863579757,-0.14938866925984445],[1,-6.928436672854194,-160.0448619277717,32.49472851199061]],[3,"Bip001 L Calf",33,[-52],[0,"56D7vp2iJFYaXIp6vFC6Oy",1,0],[1,1.2089800834655762,-2.220446049250313e-16,1.1920928955078125e-7],[3,-3.626833689967431e-17,5.0363349247129365e-17,-0.4644714988574344,0.885588068319085],[1,-1.758878230212335e-15,5.594323226956882e-15,-55.35204745173201]],[5,"Bip001 L Foot",34,[[6,"Bip001 L Toe0",-53,[0,"e26rPraAtJ9KVQlrW4DNfH",1,0],[1,1.1288789510726929,0.8454828858375549,-2.220446049250313e-16],[3,-0.019309764867162686,-0.03608364265349345,0.6933196833050261,0.7194671086682476],[1,30.435306586168515,-34.92598217716766,87.4826264957381]]],[0,"c8emmqNlxEx78MPXtF0Js7",1,0],[1,0.8395750522613525,-1.942890293094024e-16,0],[3,-0.06842880094606177,-0.10354360410312691,0.16573460747918273,0.9783293214118345],[1,-6.074141600868105,-11.02292859345688,19.782880723363796]],[3,"Bip001 R Thigh",6,[-54],[0,"56UrwFB8VEZ6ZMN50cd3Z9",1,0],[1,9.5367431640625e-7,-9.834766387939453e-7,-0.7905730605125427],[3,0.30394016820728925,0.9267220826189143,-0.15586675254473395,0.1565634414151195],[1,26.609052079775186,153.32607662411445,30.966048780945425]],[3,"Bip001 R Calf",36,[-55],[0,"04ysxMzqpLcriMzSwn5q8j",1,0],[1,1.2089803218841553,-2.220446049250313e-16,1.1920928955078125e-7],[3,-7.784566194419368e-18,-2.235790794910183e-17,-0.463667843063253,0.8860091034007893],[1,-3.4705369739536702e-15,-4.707856731296548e-15,-55.24808232294459]],[5,"Bip001 R Foot",37,[[6,"Bip001 R Toe0",-56,[0,"10izvOvuBETo+oALWJUVb1",1,0],[1,1.1288790702819824,0.8454830050468445,-1.1920928955078125e-7],[3,0.027531238260165333,0.04450460148797728,0.704335152779995,0.7079359885785153],[1,-75.10253297874047,80.94245371455186,88.59403071678298]]],[0,"712jb9dXhAlJrf38j8TZ+Z",1,0],[1,0.8395751118659973,8.940696716308594e-8,0],[3,0.09266620980641892,0.07387007112552646,0.12570576513877535,0.9849640839964154],[1,9.78066295935617,7.274390588671203,15.148510306518965]],[224,false,2,[1,"2e0z0KFG9MtIOz+LCserxn"],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,100,100],[1,280,300,200]]],0,[0,4,1,0,0,1,0,-1,40,0,-1,12,0,-1,39,0,0,1,0,-3,40,0,0,1,0,-1,14,0,0,1,0,-1,10,0,-1,39,0,-1,12,0,-2,13,0,-3,15,0,-1,17,0,1,3,0,1,3,0,1,3,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-1,29,0,-2,30,0,-3,31,0,-4,32,0,-1,16,0,-2,33,0,-3,36,0,-2,19,0,-3,26,0,1,8,0,1,9,0,-1,11,0,-1,14,0,-1,18,0,1,18,0,-1,20,0,-1,21,0,1,22,0,1,23,0,1,24,0,1,25,0,-1,27,0,-1,28,0,1,29,0,1,30,0,1,31,0,1,32,0,-1,34,0,-1,35,0,1,35,0,-1,37,0,-1,38,0,1,38,0,9,1,2,1,11,3,1,7,4,1,21,5,1,28,6,1,8,7,1,9,8,1,15,9,1,16,56],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,39,40],[-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,31,32,6,13,7,16],[299,45,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,300,301,87,88,45,22]],[[[33,"Scene"],[197,"Scene",[[-2,-3,-4,-5,-6,[55,"BulletLayer",-8,[0,"25SsS2IWREbJqzuD/jciSi",-7,0]],-9,[55,"EnemyLayer",-11,[0,"94nzr+kilFBaKSRriPooHL",-10,0]],[55,"EffectLayer",-13,[0,"01jq+UxUBEdrkq0Y44p4pU",-12,0]]],1,1,1,1,1,4,1,4,4],[0,"19m3e/BMxGVo7baRPyfSmJ",-1,0]],[181,"S1_Object",[-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26],[0,"41KhLKSgdNaa9WKRGn5syk",1,0],[1,0,0.165,-1.56],[1,0.666,0.666,1]],[47,"Scene_1",[-28,-29,-30,-31],[[151,-27,[1,"65hLrcaldMnbZd6Ht38E3c"]]],[0,"70pG2W/UxHQ4zljsXZ2T/G",1,0]],[47,"WallCollider",[-33,-34,-35,-36],[[151,-32,[1,"0fbFpBU5FDjq+5abfW6rQC"]]],[0,"bbW+sC3thF5Jj5XPkH+TIR",1,0]],[102,"Scene",3,[-38,-39],[[139,-37,[1,"89dOVZIoVIGoKtaLeqzlfJ"]]],[0,"61eyA/hlFHMKGurVJjSGzV",1,0],[1,0,-33,-80],[1,210,200,120]],[102,"Rock_01",3,[-41,-42],[[139,-40,[1,"b0Ua55HmpGhIlcPPUOpAPi"]]],[0,"ce3LszJyNCV4P7pxqC7PIx",1,0],[1,0,-33,-80],[1,210,200,120]],[102,"Rock_02",3,[-44,-45],[[139,-43,[1,"afqtb9bmZMmJ8Q5Ep5nM1B"]]],[0,"607FmLON9Amaxyk+iHAV3o",1,0],[1,0,-33,-80],[1,210,200,120]],[47,"River",[-47],[[151,-46,[1,"19pS+Nx5dMAKVl3bS49An3"]]],[0,"e9H1/qu/5JGLwSPOqLIa8J",1,0]],[102,"Deco_01",3,[2],[[139,-48,[1,"eaVw+385NKoJyzYz+4meE1"]]],[0,"1fTMbrtjlMgbfZjwBalyP0",1,0],[1,0,-33,-80],[1,210,200,120]],[38,"Top",4,[[127,true,-49,[1,"76B016EFVGD5We8gCSEESw"],[1,2000,500,60],45],[66,2,2,-50,[1,"cbaMjlDZFBELDehV3Gon8L"]]],[0,"8c42VfmDFDR7M7iLaLsBJC",1,0],[1,0,0,-490]],[38,"Down",4,[[127,true,-51,[1,"80JyBzHndBtK1/FWIuf+Xg"],[1,2000,500,60],46],[66,2,2,-52,[1,"86CXTdgPdKUL5ZgfAo8LZ2"]]],[0,"8aA94uTuRCFIvccfJICgsh",1,0],[1,0,0,600]],[38,"Left",4,[[127,true,-53,[1,"dcsFaI2oZGKKqTYN2r0WD1"],[1,60,500,1500],47],[66,2,2,-54,[1,"62caHEEqtCZr00q9dDQCvP"]]],[0,"08Lme2wFtBQ7omC19ODI/P",1,0],[1,-600,0,100]],[38,"Right",4,[[127,true,-55,[1,"b5h2FZho9JM68mzC/uCArK"],[1,60,500,1500],48],[66,2,2,-56,[1,"1crg4GrbJE36iwdVCBDQV2"]]],[0,"39wBqOQxBE5Jg/sdnZIZhL",1,0],[1,600,0,100]],[60,"Directional Light",1,[[231,true,1,0.3,1,true,1,2000,800,-57,[1,"bedR7DRv5O1KvY57I0pD7N"],[4,4293982975],[232]]],[0,"e7To9XXs9BSZDZiyIGNfjx",1,0],[1,300,800,370],[3,-0.5499972059837632,0.159718820881947,-0.13292149309043724,0.8089034851827153],[1,-67,7,-23]],[48,"RiverLayer",1,[8],[0,"cdQXE6jAhCH405etsuBJkj",1,0]],[118,"Surface",8,[[222,"Quad<ModelComponent>",-58,[1,"1c7nHthVJH07c7hp9CY0ue"],[0],[7],1]],[0,"69OC660KRANJXs1qtO238p",1,0],[1,0,-30,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,1200,1200,1],[1,-89.99999999999999,0,0]],[48,"WaterLayer",1,[-59],[0,"79li7/pfVJe6CkQUqXuLPx",1,0]],[182,"WaveParticles",512,17,[[233,true,-1,796.2983767792075,318.5193892265464,206.00427153307254,true,true,10,-60,[1,"aegfSmKohAELoBSgXr9wRo"],[2],[234,[4,855627948]],[152,60],[97],[97],[153,3,120,160],[152,-1.5707963267948966],[97],[97],[97],[153,3,2.4,3],[97],[153,3,0.4,1.2],[97],[236,true,[235,1,[237,[[238,255],[154,255,0.5],[154,80,0.8],[154,0,1]]]]],[239,true,0,4.997,0,[152,1],[1,0.001,0.001,0.001]],[240,4,true,0,3,4,5,6]]],[0,"01vNO609lMuqMuQZTVEwhr",1,0],[1,0,-29,-720],[3,0,1,0,6.123233995736766e-17],[1,2.4,1,0.8],[1,0,180,0]],[48,"LandLayer",1,[3],[0,"d79VMn7GtC/a2F05pYLuoA",1,0]],[118,"background_01",5,[[50,0,-61,[1,"f0mWOaLKdIrbSAQ7q0rYKY"],[7],[7],8]],[0,"e0UbkKhx5OS5wT1InEPuWs",1,0],[1,2.715637492656242e-7,0.35,-3.8],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,0.026,0.02539999969303608,0.02539999969303608],[1,-90.00000000000003,0,0]],[118,"foreground_01",5,[[50,0,-62,[1,"26MzChFk5MA4cN5blwtOVK"],[9],[7],10]],[0,"01nOmbyA5ARYxcup6BqPB0",1,0],[1,0,0.25,5.92],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,0.0235,0.0354,0.0254],[1,-90.00000000000003,0,0]],[60,"Object002",6,[[50,0,-63,[1,"44TeLJUktA1773vVXdlwID"],[11],[7],12]],[0,"86SRLn8XRKVIVURDthbZ3S",1,0],[1,-2.6,-0.05,4.24],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[60,"Object003",6,[[50,0,-64,[1,"453/kU1INOyJ/nhR7dTyUY"],[13],[7],14]],[0,"78pWpj5ZRHYa04GjmFDkb1",1,0],[1,2.85,-0.05,4.24],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[60,"Object003",7,[[50,0,-65,[1,"4ddZYPYpFFUowh4YCe3zSO"],[15],[7],16]],[0,"a3FH8q68tPCotM/cmW/PBj",1,0],[1,-2.8,0.33,-3.65],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[60,"Object004",7,[[50,0,-66,[1,"8bRh11c2hAx5U6VVc7p5ya"],[17],[7],18]],[0,"0exNSLqG5MubSnu6O5q0As",1,0],[1,2.8,0.33,-3.65],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[56,"S1_Object_03",2,[-67],[0,"2cYT8G629DSa+5uvA7MFRv",1,0],[1,-2.4740000000000464,0.7069999999999936,-2.16],[1,0.6,0.6,0.6]],[27,"node",26,[[50,0,-68,[1,"050Ps9VBFEHIDfSpfomG5X"],[19],[7],20]],[0,"7fEHE7/gdEoaBZv17hbe0X",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_02",2,[-69],[0,"13tynQ3eJFxZzVVfbp1T3u",1,0],[1,-3.336999999999989,0.6539999999999964,-2.14],[1,0.6,0.6,0.6]],[27,"node",28,[[50,0,-70,[1,"54r5oprBtC6pjfUhHUG2y/"],[21],[7],22]],[0,"1cxs69YDBICa+GzpkhZ6xY",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_04",2,[-71],[0,"7fnBDZsaNI2YAKFn+upHCK",1,0],[1,-2.6100000000000136,0.5199999999999818,-2.14],[1,0.2,0.2,0.2]],[27,"node",30,[[50,0,-72,[1,"5aa1rQ5rRD+oqzJEyGOITx"],[23],[7],24]],[0,"93ekuCv2NGZozNVcWh5cpm",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_05",2,[-73],[0,"cbLbWWds5FT7Ipb6V2WDiK",1,0],[1,-1.725999999999999,0.714999999999975,-2.14],[1,0.6,0.6,0.6]],[27,"node",32,[[50,0,-74,[1,"c3sYElCCVNYb6EqgsljtKH"],[25],[7],26]],[0,"78P4rT8L5IBZc2m12pdw1G",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_06",2,[-75],[0,"1fQBFUDXFKOqdrEPH0CzlZ",1,0],[1,-1.030999999999949,0.5199999999999818,-2.14],[1,0.6,0.6,0.6]],[27,"node",34,[[50,0,-76,[1,"cbWkUVL/ZBC7st4t/97MiV"],[27],[7],28]],[0,"ebg5t+kTJPGZvxGwl/BqV4",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_08",2,[-77],[0,"70r9De3dlCL5NGymHA+VlP",1,0],[1,0.18499999999994543,0.6510000000000105,-2.16],[1,0.6,0.6,0.6]],[27,"node",36,[[50,0,-78,[1,"6aSLKtDudPJZSn/1BL0J3i"],[29],[7],30]],[0,"28WPCbd29BP4QSyTgZgt/X",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_07",2,[-79],[0,"d8Ma1hE9ZLE7ZHBMLfwACF",1,0],[1,-0.33799999999996544,0.5269999999999868,-2.14],[1,0.6,0.6,0.6]],[27,"node",38,[[50,0,-80,[1,"8fedgRMSlK2KpO+2vw6u96"],[31],[7],32]],[0,"36c1dVBEZGkbLtI2rxzTX+",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_10",2,[-81],[0,"382T8sIa9HcKsCThrFSqCL",1,0],[1,1.5130000000000337,0.6669999999999732,-2.16],[1,0.7,0.6,0.6]],[27,"node",40,[[50,0,-82,[1,"cdmhDnQN9Kq4byBvOxuN2U"],[33],[7],34]],[0,"77NGGcTZhOg6l8xI4JbqJc",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_09",2,[-83],[0,"dePQjhydZD2ptC/UMcNbQb",1,0],[1,0.7350000000000136,0.6499999999999773,-2.14],[1,0.6,0.6,0.6]],[27,"node",42,[[50,0,-84,[1,"4frudOAFdLvoXmcm5WIo/h"],[35],[7],36]],[0,"4dUT1yAsJJorri34ItD/hX",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_13",2,[-85],[0,"c9YjDMOkxIlJ8XLF+fLPRl",1,0],[1,2.6130000000000564,0.7049999999999841,-2.16],[1,0.6,0.6,0.6]],[27,"node",44,[[50,0,-86,[1,"d2pEAqFB9AGIB0Pf4V+qbb"],[37],[7],38]],[0,"90PfRXfRhD25r+YdzaqOxi",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_12",2,[-87],[0,"aeK/EQwoFBCb01yJeZQ9kD",1,0],[1,2.129000000000019,0.47399999999998954,-2.14],[1,0.2,0.2,0.2]],[27,"node",46,[[50,0,-88,[1,"a3TkaFnTJF9YdJ9hJbMfX7"],[39],[7],40]],[0,"b6pe9NQfNJjKPdJSdYgfFc",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_15",2,[-89],[0,"a7oib8FidArI8c3pE7aeDF",1,0],[1,3.216000000000008,0.6329999999999814,-2.16],[1,0.6,0.6,0.6]],[27,"node",48,[[50,0,-90,[1,"5eu7N8zTBGgarYzF5Fy54M"],[41],[7],42]],[0,"feQ8PjicpI5qz2tQoeQDt5",1,0],[1,0.4,0.4,0.4]],[56,"S1_Object_14",2,[-91],[0,"ad1BcLUaZFVp1W2v+ktzpa",1,0],[1,2.7350000000000136,0.3210000000000264,-2.14],[1,0.2,0.2,0.2]],[27,"node",50,[[50,0,-92,[1,"c1f1EsIahEWomc7bO2xO7q"],[43],[7],44]],[0,"64OSIk8IBAuKFoFWdCZjGz",1,0],[1,0.4,0.4,0.4]],[199,"CannonLayer",1,[[10,"RolePivot",-93,[0,"23wWICqeNKraKSUPldbKNT",1,0],[1,0,0,680]]],[0,"c8Qf3Ma7VF2JHRql8iZoIZ",1,0]],[48,"BulletWallLayer",1,[4],[0,"6dOJQ/ODpAeIP8xAoh0tOa",1,0]]],0,[0,4,1,0,-1,14,0,-2,15,0,-3,17,0,-4,19,0,-5,52,0,4,1,0,1,1,0,-7,53,0,4,1,0,1,1,0,4,1,0,1,1,0,-1,26,0,-2,28,0,-3,30,0,-4,32,0,-5,34,0,-6,36,0,-7,38,0,-8,40,0,-9,42,0,-10,44,0,-11,46,0,-12,48,0,-13,50,0,0,3,0,-1,5,0,-2,6,0,-3,7,0,-4,9,0,0,4,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,0,5,0,-1,20,0,-2,21,0,0,6,0,-1,22,0,-2,23,0,0,7,0,-1,24,0,-2,25,0,0,8,0,-1,16,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,16,0,-1,18,0,0,18,0,0,20,0,0,21,0,0,22,0,0,23,0,0,24,0,0,25,0,-1,27,0,0,27,0,-1,29,0,0,29,0,-1,31,0,0,31,0,-1,33,0,0,33,0,-1,35,0,0,35,0,-1,37,0,0,37,0,-1,39,0,0,39,0,-1,41,0,0,41,0,-1,43,0,0,43,0,-1,45,0,0,45,0,-1,47,0,0,47,0,-1,49,0,0,49,0,-1,51,0,0,51,0,1,52,0,9,1,2,1,9,3,1,19,4,1,53,8,1,15,93],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,-1,6,33,34,35,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,16,16,16,16],[302,17,117,86,303,117,118,119,120,119,121,122,69,122,69,123,70,123,70,18,115,18,124,18,125,18,126,18,127,18,128,18,129,18,130,18,131,18,132,18,133,18,134,18,82,22,22,22,22]],[[[241,"Game"],[206,0,{},[183,"New Node"],[82,"99KHcneTxFtp0SYrcio7ut",-6,[89,"17jkTS01RFS5ZQSex2CCsx",-5,[[59,"UI",["_name"],-1],[36,["_lpos"],-2,[1,0,0,0]],[36,["_lrot"],-3,[3,0,0,0,1]],[36,["_euler"],-4,[1,0,0,0]]]],1]],[184,"Canvas",33554432,"91vzZwqjNMWLocdE9fM8ZK",[-10],[[213,-7,[5,1136,640]],[243,false,-8],[244,45,-1.1368683772161603e-13,1.1368683772161603e-13,-5.684341886080802e-14,5.684341886080802e-14,-9]],[1,567.9999999999999,320.00000000000006,0]],[92,0,{},2,[217,"d9oIgi2+RMK6cHPLbJjeaR",-15,[242,"45X1AGHyZFVoFs44Elt5gl",[[59,"Stage",["_name"],-11],[36,["_lpos"],-12,[1,0,0,0]],[36,["_lrot"],-13,[3,0,0,0,1]],[36,["_euler"],-14,[1,0,0,0]]]],[[41,["blackScreenNode"],1,[14,["de0qxvJepFDoPrJivirFJh"]]],[41,["playerBetText"],1,[14,["3ai9/eqm5BKIY1VI+vMdc4"]]],[41,["playerCoinsText"],1,[14,["781lND8mxDZ5uBHIUUVcs7"]]],[41,["minusBetBtn"],1,[14,["8edNiVXhtOeIdfOEaQrLp4"]]],[41,["plusBetBtn"],1,[14,["24IFpAvmBMaYgyDDNZ+ejc"]]],[41,["sessionText"],1,[14,["05FJF3fuRFYIVeDJHEopaT"]]],[41,["lstFuncBtn","0"],1,[14,["35QLuV7GdMNKzEqHyC2xBF"]]],[41,["lstFuncBtn","1"],1,[14,["037xsQD7tDSKdfqzDyT9n2"]]],[41,["lstFuncBtn","2"],1,[14,["ffdpgEagxNmoKCdbORxkge"]]],[41,["lstFuncBtn","3"],1,[14,["2fAKO5DSxKkqiwf0x6JKwU"]]],[41,["lstFuncBtnFx","0"],1,[14,["79bnwPmKZKcbIdT9y5lwmi"]]],[41,["lstFuncBtnFx","1"],1,[14,["c9I4ZmLs1MOYhG+YOCSqr5"]]],[41,["lstFuncBtnFx","2"],1,[14,["cdh6+7DbZDEKD9IZVj8DOk"]]],[41,["lstFuncBtnFx","3"],1,[14,["3ehHE/8YlOGr2r5YX1+P05"]]],[41,["lstFuncBtnCost","0"],1,[14,["90vXD5hsJKCKvJEOSeGX0u"]]],[41,["lstFuncBtnCost","1"],1,[14,["7960eJJP9AhqiKWVyOU1XA"]]],[41,["lstFuncBtnCost","2"],1,[14,["56ygZkNAVL/amW9BY8bFfG"]]],[41,["lstFuncBtnCost","3"],1,[14,["cfaTjnK81EI7/E7x9jTg5S"]]],[41,["lstFuncBtnName","0"],1,[14,["f9BGbFcRRBtpsYGNpPk6gp"]]],[41,["lstFuncBtnName","1"],1,[14,["96PzG3IINKOpoYAsRSSiFB"]]],[41,["lstFuncBtnName","2"],1,[14,["cf0h4SDGpGQoMnZfAGtiNM"]]],[41,["lstFuncBtnName","3"],1,[14,["111P6MoapFfK20WmVdgBVq"]]],[41,["toast"],1,[14,["84J2pQQjNF9rsgVjZyWSYM"]]],[41,["locationHintNode"],1,[14,["b0p3JsND9M8asLFtoAIljb"]]]],0]],[14,["d9oIgi2+RMK6cHPLbJjeaR"]],[14,["99KHcneTxFtp0SYrcio7ut"]],[247,"Game",true,[2],[214,"2601d68b-c567-46b7-9c12-3c8a7983b728",[3]],[248,[249,0.5,[2,0.2,0.5,0.8,0.520833125],[2,0.36244,0.486029,0.632565,0.5],[2,0.437391,0.436011,0.436589,0]],[250,true,1,[4,4283190348],[0,512,512]],[251,false],[252],[253]]]],0,[0,17,5,0,17,5,0,17,5,0,17,5,0,36,3,0,4,1,0,0,2,0,0,2,0,0,2,0,-1,3,0,17,4,0,17,4,0,17,4,0,17,4,0,4,3,0,37,6,2,1,6,15],[0,0],[18,18],[304,135]],[[[31,"Water_Splash_Big",".mp3",2.716735],-1],0,0,[],[],[]],[[[31,"Giant_Head",".mp3",1.541224],-1],0,0,[],[],[]],[[[135,"2d-sprite-blend-add",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blendDst":1}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[44]],[[{"name":"eff_heart_002","rect":{"x":625,"y":133,"width":140,"height":125},"offset":{"x":0,"y":0.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[135,"2d-sprite-blend-none",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blend":false}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[44]],[[[31,"Boom_Fly",".mp3",1.332245],-1],0,0,[],[],[]],[[[65,"Skin-0",3259470478,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone001","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Ponytail1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002(mirrored)","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Ponytail2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 Xtra02","Bip001/Bip001 Prop2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Arrow"],[[[7,5.703888064090279e-7,-0.0000015269857840394252,1,0,-0.41606396436691284,-0.9093353748321533,-0.000001151223955275782,0,0.9093353152275085,-0.41606399416923523,-0.0000011539985962372157,0,-3.1515629291534424,1.4545254707336426,0.00000394941889680922,1],[7,1.3853778568773123e-7,-0.0000014078638059800141,1,0,-0.13783913850784302,-0.9904546141624451,-0.000001375329361508193,0,0.9904545545578003,-0.1378391534090042,-3.3127415122180537e-7,0,-2.6440467834472656,0.6429427862167358,0.000001296212417400966,1],[7,-0.03908305987715721,-0.1388847678899765,-0.9895371198654175,0,-0.09562739729881287,-0.9852285981178284,0.14205698668956757,0,-0.9946496486663818,0.10017888247966766,0.025224559009075165,0,1.846681833267212,0.028989452868700027,-0.4728808104991913,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-1.8458255529403687,0.27233126759529114,0.0000018087812350131571,1],[7,-4.9102641952458725e-8,-0.00000140173403906374,1,0,-0.0014097236562520266,-0.9999990463256836,-0.0000014018020237926976,0,0.9999989867210388,-0.0014097237726673484,4.7126540891895274e-8,0,-2.381638526916504,0.27572423219680786,2.7769496568907925e-7,1],[7,-0.9993435144424438,0.005084639880806208,0.03587287664413452,0,-0.035714007914066315,0.028490617871284485,-0.9989559054374695,0,-0.0061013721860945225,-0.9995810389518738,-0.02829032391309738,0,-2.041004180908203,3.158280849456787,0.31708091497421265,1],[7,-0.9992133378982544,-0.036990176886320114,0.014301124960184097,0,-0.03538434952497482,0.9943867921829224,0.09971441328525543,0,-0.017909303307533264,0.09912994503974915,-0.9949132800102234,0,-1.3869436979293823,-0.54207843542099,3.1516530513763428,1],[7,-0.9997633099555969,-0.01639847457408905,0.014301124028861523,0,-0.014892417006194592,0.9949045777320862,0.09971441328525543,0,-0.01586342044174671,0.09947782754898071,-0.9949132800102234,0,-0.5882976651191711,-0.5133922100067139,3.1516530513763428,1],[7,-0.9982388019561768,-0.04219146445393562,0.04170425981283188,0,-0.03603624179959297,0.9896820187568665,0.1386754810810089,0,-0.04712488502264023,0.13692837953567505,-0.9894593358039856,0,-0.1798187643289566,-0.6479556560516357,3.144592046737671,1],[7,-1.0157013718981034e-7,0.2556689977645874,-1.9076018986652343e-7,0,-0.4326847791671753,-6.741586844327685e-8,-0.610785961151123,0,-0.33377036452293396,9.591876626302565e-9,0.7917952537536621,0,1.1987894773483276,0.0007380833849310875,-2.9635212421417236,1],[7,-0.011793211102485657,-0.14379635453224182,-0.9895371198654175,0,0.09460873156785965,-0.985326886177063,0.14205701649188995,0,-0.995444655418396,-0.09194353967905045,0.025224560871720314,0,1.0150457620620728,0.22736231982707977,-0.47288084030151367,1],[7,7.549791547489804e-8,-0.12757471203804016,-0.9918290376663208,0,-6.123234924670329e-17,-0.9918291568756104,0.12757469713687897,0,-1.0000001192092896,-9.631622610584145e-9,-7.48810080608564e-8,0,0.3963058888912201,0.19958385825157166,-0.46015483140945435,1],[7,0.039083149284124374,0.1388874650001526,-0.989536702632904,0,-0.09562729299068451,-0.9852281808853149,-0.14205966889858246,0,-0.9946496486663818,0.10017886012792587,-0.025224387645721436,0,1.8466819524765015,0.028989391401410103,0.4728812277317047,1],[7,0.9993435740470886,-0.005084718111902475,0.035870134830474854,0,-0.03571126237511635,0.02849060483276844,0.998956024646759,0,-0.0061013721860945225,-0.9995810389518738,0.028290322050452232,0,-2.0410044193267822,3.158281087875366,-0.31708091497421265,1],[7,0.999213457107544,0.03698744624853134,0.01430139783769846,0,-0.035381607711315155,0.9943869113922119,-0.09971437603235245,0,-0.017909303307533264,0.09912993758916855,0.9949132800102234,0,-1.38694429397583,-0.54207843542099,-3.151653289794922,1],[7,0.9997634291648865,0.016395747661590576,0.014301398769021034,0,-0.014889676123857498,0.9949046969413757,-0.09971437603235245,0,-0.01586342230439186,0.09947783499956131,0.9949132800102234,0,-0.5882983207702637,-0.5133922696113586,-3.151653289794922,1],[7,0.9982388615608215,0.04218873009085655,0.04170453920960426,0,-0.036033499985933304,0.989682137966156,-0.13867536187171936,0,-0.04712477698922157,0.13692837953567505,0.9894593358039856,0,-0.1798197627067566,-0.6479556560516357,-3.144592046737671,1],[7,0.011792777106165886,0.1437990367412567,-0.989536702632904,0,0.09460876137018204,-0.9853264093399048,-0.14205972850322723,0,-0.995444655418396,-0.09194356203079224,-0.025224387645721436,0,1.0150457620620728,0.227362260222435,0.4728812277317047,1],[7,7.549791547489804e-8,0.12757742404937744,-0.9918286800384521,0,-6.123234924670329e-17,-0.9918287992477417,-0.12757740914821625,0,-1.0000001192092896,9.631827779799096e-9,-7.488098674457433e-8,0,0.39630579948425293,0.19958379864692688,0.4601553678512573,1],[7,0.6591528058052063,-0.7490938305854797,-0.06615132093429565,0,0.5037720203399658,0.5051662921905518,-0.700728714466095,0,0.5583289265632629,0.4285621643066406,0.7103542685508728,0,-2.896336793899536,-1.0859335660934448,-3.0125999450683594,1],[7,-0.05325642600655556,0.3958279490470886,0.0016114574391394854,0,0.009861825965344906,0.001822151243686676,-0.3963702917098999,0,-0.9985319972038269,-0.021093375980854034,-0.004000628367066383,0,3.734884262084961,-0.2593424320220947,-0.17279985547065735,1],[7,1.3853778568773123e-7,-0.0000014078638059800141,1,0,-0.13783913850784302,-0.9904546141624451,-0.000001375329361508193,0,0.9904545545578003,-0.1378391534090042,-3.3127415122180537e-7,0,-3.32082462310791,0.4897308945655823,0.0000010962944543280173,1],[7,-0.6591542363166809,0.7490928769111633,-0.06614896655082703,0,0.5037703514099121,0.5051644444465637,0.7007313966751099,0,0.5583288669586182,0.4285661578178406,-0.7103520631790161,0,-2.896336555480957,-1.0859507322311401,3.0125949382781982,1],[7,0.05325637757778168,0.3958279490470886,-0.001612069201655686,0,0.009861763566732407,-0.0018227630062028766,-0.39637014269828796,0,-0.9985319972038269,0.021093351766467094,-0.004000634420663118,0,3.7349061965942383,0.25950294733047485,-0.1728009432554245,1],[7,0.8239416480064392,0.17887349426746368,0.5377029180526733,0,-0.46685653924942017,0.7520939111709595,0.46518799662590027,0,-0.32119324803352356,-0.634317934513092,0.7031897306442261,0,-0.91058349609375,1.612953782081604,-3.309488296508789,1],[7,0.8734641671180725,-0.4855656623840332,0.03586608171463013,0,-0.017968542873859406,0.04146619141101837,0.9989783763885498,0,-0.4865568280220032,-0.8732162117958069,0.02749432809650898,0,-0.7300869822502136,4.159580230712891,-0.31830325722694397,1],[7,0.791148841381073,0.2914775013923645,0.5377029776573181,0,-0.5667044520378113,0.6800340414047241,0.46518799662590027,0,-0.23006445169448853,-0.6727515459060669,0.7031897306442261,0,-1.324744462966919,1.4430866241455078,-3.309488296508789,1],[7,0.4743812084197998,-0.8795886635780334,0.035866089165210724,0,0.0071961358189582825,0.044615358114242554,0.9989783763885498,0,-0.8802900910377502,-0.47363850474357605,0.02749432623386383,0,1.4141948223114014,4.0328688621521,-0.31830325722694397,1],[7,-0.8239403963088989,-0.17887556552886963,0.5377042293548584,0,-0.466858834028244,0.7520934343338013,-0.4651865065097809,0,-0.32119327783584595,-0.634317934513092,-0.7031897306442261,0,-0.9105831384658813,1.612953782081604,3.309487819671631,1],[7,-0.8734641671180725,0.48556554317474365,0.035868819802999496,0,-0.017970934510231018,0.04146752506494522,-0.998978316783905,0,-0.4865568280220032,-0.8732162117958069,-0.02749432809650898,0,-0.7300867438316345,4.159580230712891,0.3183032274246216,1],[7,-0.7911473512649536,-0.29147934913635254,0.5377042293548584,0,-0.566706657409668,0.680033266544342,-0.46518653631210327,0,-0.2300644814968109,-0.6727516055107117,-0.7031897306442261,0,-1.3247443437576294,1.4430866241455078,3.30948805809021,1],[7,-0.4743812084197998,0.8795885443687439,0.0358688123524189,0,0.007194844074547291,0.044617753475904465,-0.998978316783905,0,-0.8802900910377502,-0.47363847494125366,-0.02749432623386383,0,1.414194941520691,4.032868385314941,0.3183031976222992,1],[7,0.9999446272850037,-0.009204132482409477,0.005113254301249981,0,-0.009059099480509758,-0.9995753169059753,-0.02769792266190052,0,-0.005366018507629633,-0.027650069445371628,0.9996032118797302,0,-2.60343861579895,0.24571998417377472,-3.097992420196533,1],[7,0.0000016093256363092223,1,-6.123234262925839e-17,0,-1,0.0000016093256363092223,6.123224336758489e-17,0,6.123234262925839e-17,6.123224336758489e-17,1,0,0.15854434669017792,-1.6508954763412476,-3.052203893661499,1],[7,-0.003310029860585928,0.9999819993972778,-0.005011298228055239,0,-0.9999926090240479,-0.003318817587569356,-0.0017460567178204656,0,-0.0017626570770516992,0.005005486775189638,0.99998539686203,0,0.13351643085479736,2.5543441772460938,-3.1261212825775146,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b0/JnvPPRL9a5UhgGLzFbp"]}],[1],0,[],[],[]],[[[19],[47,"monster_SP_003",[-3,-4],[[63,-2,[1,"23CEqDbKZV1KujTGbM/mKF"],[3,4,5,6,7,8,9,10,11,12],13]],[0,"69vXM2ZZVbA7ap+LpQaRm+",-1,0]],[81,"Bip001 Head",[[6,"Bip001 Ponytail2",-5,[0,"7cFhSriXFccq6w+HnGVtzM",1,0],[1,0.7309236526489258,-0.20838302373886108,-0.8963431119918823],[3,0.6679535496049743,-0.09525776637217243,-0.5855556119796552,0.4493201962910538],[1,139.78949789530517,66.97263675074133,-40.802940363668796]],[6,"Bip001 Ponytail1",-6,[0,"deRZtlrS5fzaYZaZSYcWgE",1,0],[1,0.7309243679046631,-0.20838811993598938,0.896341860294342],[3,0.6679534810912875,-0.09526105825821561,0.5855550677278262,-0.44932030950739044],[1,-139.78963832468108,-66.97252319735894,-40.803245258708685]],[12,"Bone001",-7,[0,"57M3dA1ClXX70XU6p8ZDKR",1,0],[1,0.23102712631225586,-0.012794464826583862,-0.0028872638940811157],[3,0.43989485404303036,0.5536178338122633,0.5536182510447758,0.43989390036871606],[1,1.8299593925476074,3.9113073348999023,1.0000003576278687],[1,-90.00032987398343,-179.99963918946202,76.93997301150233]],[12,"Bone002(mirrored)",-8,[0,"18ylolGypXIY+49dpCseVW",1,0],[1,0.3994934558868408,0.3463112413883209,0.8539997935295105],[3,0.12832695290901933,0.6939007068257342,0.6888785982532211,0.1657717680804249],[1,1.0000001192092896,2.5227441787719727,2.5227441787719727],[1,-88.87384116627811,176.6584709675091,23.984254347028244]],[12,"Bone002",-9,[0,"91AiD5akpVjJmqJvtj58/6",1,0],[1,0.3994925022125244,0.3463137447834015,-0.854405403137207],[3,0.16577254484621295,0.6888772948690436,0.6939019664990452,0.1283261348201419],[1,1.0000001192092896,2.5227441787719727,2.52274489402771],[1,-91.12641034454995,-176.65828548299848,23.984243436499742]]],[0,"bd6Nt9JnZRE615/USO2POp",1,0],[1,0.11547505855560303,-2.384185791015625e-7,1.4901161193847656e-8],[3,0.21855604612286272,-0.14265291369107463,-0.39686334067226187,0.8799902782127995],[1,24.724315039472742,-6.867027025990421,-49.53716549290688]],[43,"Bip001 R Hand",[[-10,-11,[12,"Bip001 Xtra03",-12,[0,"55d24Oo1ld0JjUvfqPrQ17",1,0],[1,0.5625670552253723,0.0499730110168457,-0.14904722571372986],[3,2.769653615433874e-17,1.809382091943093e-18,0.06518985266978557,0.9978728792330673],[1,-1,-0.9999999403953552,-0.9999999403953552],[1,3.1805546799054723e-15,2.3849277809574134e-23,7.47550803827268]],[6,"Arrow",-13,[0,"e6K/WRm+NZf7G6AJ0CO9HP",1,0],[1,0.5625670552253723,0.049973249435424805,-0.14904718101024628],[3,0.4420144916144607,0.5396862103493203,0.554774947565669,-0.4534167411059147],[1,-90.36132314565269,-101.42820230445534,-1.4892990904038912]]],1,1,4,4],[0,"b7a/xi5dlTlba0zzV85ov5",1,0],[1,0.6166061162948608,5.960464477539063e-8,-2.384185791015625e-7],[3,0.6427267960766593,0.038269859825068836,0.23171133419173243,0.7292102173180854],[1,85.86874285757823,-15.219012522450516,22.77583036531013]],[76,"Bip001 Pelvis",[-14,-15,-16],[0,"89zDpACKBWJppxQAUXva/F",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[-17,-18,2],[0,"657sm2oL9awpYVTIYmGa0n",1,0],[1,0.6768171787261963,0.15322065353393555,2.086162567138672e-7],[3,4.055758844002599e-9,-6.085637671091869e-7,0.21922260545111746,0.975674868621127],[1,0.000017415107088059545,-0.00007538787597744712,25.326753973748463]],[20,"Bip001 L Hand",[-19,-20,-21],[0,"bcnJtHtCxWoaCDWaqkMYk+",1,0],[1,0.6166059970855713,1.1920928955078125e-7,-4.440892098500626e-16],[3,-0.7990774265971298,-0.03123658054146155,-0.03345202924011602,0.5994835311154961],[1,-106.21849016139093,-5.216394200449093,0.5622531709952947]],[62,"Bip001",1,[[4,[6,"Bip001 Prop2",-22,[0,"78iLNEbYNbZZ1AQsx1Vf0K",1,0],[1,1.0301166772842407,1.111129641532898,0.49495887756347656],[3,-0.2621321666150639,0.10140532208708476,-0.4220818559857,0.8618878086652425],[1,-35.88350780585138,-4.266098462190038,-51.32815955609408]]],1,4],[0,"15jT/me9hVMrGe9mZ1xL5Y",1,0],[1,0.21241571009159088,1.6857624053955078,-0.08181066066026688],[3,0.3868835620531944,0.5824645240072677,0.5954899272054546,-0.39553499754492205],[1,-90.49137861532786,-112.81935128696949,-1.1679014525824076]],[60,"monster_SP_003",1,[[64,-23,[1,"a1uyb/rWJXOY1ET1hbwz1e"],[0],[7],1,1,2]],[0,"81yC9A/E1QA4+gKKj1i5Bf",1,0],[1,0,0,0.27233123779296875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Spine",4,[-24],[0,"05Gix9MVVQzp888+NIXMRE",1,0],[1,0.5362532138824463,-0.000027492642402648926,0.00003293156623840332],[3,-0.0626470216124493,0.0008323212876850389,0.10528544964901893,0.9924664387356216],[1,-7.315574854034366,0.8697009440166139,12.056741026881431]],[3,"Bip001 Spine1",9,[5],[0,"47KXS38GFX9Zk98xukjBqj",1,0],[1,0.3254878520965576,-0.00042563676834106445,-2.2351741790771484e-8],[3,4.052505797313992e-9,-4.570422801866873e-7,0.1615790242191507,0.9868597767323268],[1,0.000009412150089117354,-0.00005461160209925486,18.59712064516628]],[3,"Bip001 L Clavicle",5,[-25],[0,"a4E+3NUulT6JBGwB+eFFop",1,0],[1,-0.23194658756256104,-0.05289769172668457,0.3379833400249481],[3,0.6922066060569303,0.05921824892212726,0.6295043688662004,0.34794750049987333],[1,151.53137764187986,-76.42817007119379,31.335704040167588]],[3,"Bip001 L UpperArm",11,[-26],[0,"20arWtJHNe96VdBt7SZBAh",1,0],[1,0.30420202016830444,2.220446049250313e-16,0],[3,-0.03516248692485733,0.10148895759591135,-0.057785221740658754,0.9925343616962273],[1,-3.3541054581784464,11.471509497992189,-6.998585784973345]],[3,"Bip001 L Forearm",12,[6],[0,"9f8UDJIvlY445eWmCmvruw",1,0],[1,0.8095186948776245,-2.220446049250313e-16,0],[3,-3.76084897451355e-18,-5.549216491478636e-17,-0.12972134149043774,0.99155048966854],[1,-1.295820715970739e-15,-6.582649457529001e-15,-14.906980019114167]],[5,"Bip001 L Finger0",6,[[6,"Bip001 L Finger01",-27,[0,"c1r6flC55U3JM7x1RPitfm",1,0],[1,0.2010941505432129,-2.384185791015625e-7,0],[3,-3.1086664759593104e-17,-2.396586232030648e-17,-0.128277062255567,0.9917383703876146],[1,-4.017335208491269e-15,-3.288788235607612e-15,-14.74008332214748]]],[0,"87hc1k0yNWqacc5HETYSsB",1,0],[1,0.18366515636444092,0.08750510215759277,-0.2487459033727646],[3,0.18730141087813754,0.29772969866318366,0.19575264909195036,0.9153994256009083],[1,14.85797181377037,32.30571250819388,28.02872139485945]],[5,"Bip001 L Finger1",6,[[6,"Bip001 L Finger11",-28,[0,"72pWPTdr9ZTK1vnllAaedg",1,0],[1,0.25066137313842773,-2.384185791015625e-7,-1.1920928955078125e-7],[3,0.11442987224098876,0.0722619046549411,0.6772431496421911,0.7232051837046496],[1,50.12814321526683,-34.94164360750437,84.94420564984019]]],[0,"c4BAOi5m9Vj5x4geNoTtiE",1,0],[1,0.6013392210006714,-0.13587689399719238,0.0038456320762634277],[3,0.06863654504987901,-0.007909200269603909,0.497245736222112,0.8648544080038219],[1,14.315166481366587,-9.209641794564254,59.205003970099604]],[166,"Bip001 Xtra02",6,[[6,"Bip001 Xtra01",-29,[0,"a3CdtX0DpSGLdzaaaRwGc1",1,0],[1,-0.9686437249183655,0.001702427864074707,-0.04353618621826172],[3,0.49959906326780007,-0.5004020272301052,0.4999959705925219,0.5000026165103334],[1,89.9536127161176,-90.0456257186297,-0.00012496445388052133]]],[0,"4c04RvvrtR+YJcj2B4YFwg",1,0],[1,0.48668181896209717,0.023917198181152344,-0.0013571381568908691],[3,-0.009432721897708676,0.7073243867415635,0.7067633282194213,0.00942515583310075],[1,-1,-1,-1.0000001192092896],[1,-89.95455050294514,178.47193012587815,-0.0012192227913642968]],[3,"Bip001 R Clavicle",5,[-30],[0,"78fZ7HE89f+IIxl4rtibln",1,0],[1,-0.23194658756256104,-0.05289602279663086,-0.3379831612110138],[3,-0.5802943092335913,0.18333232345523134,0.7818198775660636,0.13566669779352952],[1,-153.63301195667708,106.84036643697453,-0.03664442824743834]],[3,"Bip001 R UpperArm",17,[-31],[0,"b6gFoO5pVe/rBHmiR2WlbG",1,0],[1,0.30420199036598206,1.1920928955078125e-7,2.384185791015625e-7],[3,0.327832041816628,-0.3910554333267635,0.20974182995934504,0.8340324725028775],[1,45.56227423792257,-52.49483242936449,5.362804558798637]],[3,"Bip001 R Forearm",18,[3],[0,"d9JYL+g0tZPoZuisS+MeFR",1,0],[1,0.8095186948776245,-5.960464477539063e-8,4.76837158203125e-7],[3,-1.3001013711053673e-17,6.0686364324403e-17,-0.24992689739106624,0.9682647086207754],[1,3.37687128716487e-16,7.269233437164174e-15,-28.946372787758218]],[5,"Bip001 R Finger0",3,[[6,"Bip001 R Finger01",-32,[0,"db2s9svbxUjpsE5JQra1Zx",1,0],[1,0.2010939121246338,0,7.450580596923828e-8],[3,-2.7417235588812424e-9,-2.2202492645387136e-8,-0.1637667592815935,0.9864990869506185],[1,-7.677779813548689e-7,-0.0000027064949108156315,-18.851201008803898]]],[0,"57h/x0sS9X3aj0rVYSFkp2",1,0],[1,0.18366503715515137,0.08750486373901367,0.24874591827392578],[3,-0.15196199379330574,-0.1546453948417958,0.20306108443237844,0.9548604873413367],[1,-14.626540411556743,-15.035550850560178,25.771961092294386]],[5,"Bip001 R Finger1",3,[[6,"Bip001 R Finger11",-33,[0,"22TU3pHY1Qzb2YKnWbICyy",1,0],[1,0.25066089630126953,-1.7881393432617188e-7,-8.940696716308594e-8],[3,-0.18979510588450263,-0.0917580049512305,0.6663175794450954,0.7152476281904676],[1,-74.99507747308931,51.957606887078136,81.11286431785388]]],[0,"5b00/as5NUA67xEwKNd71x",1,0],[1,0.6013389825820923,-0.13587737083435059,-0.0038456320762634277],[3,-0.13725067481393444,-0.02388796921630775,0.5636696735932483,0.8141671304229381],[1,-31.01961135428213,17.678679012914063,67.5780414835638]],[3,"Bip001 L Thigh",4,[-34],[0,"e3sgSxD9JfzJDk0anoGekI",1,0],[1,-4.76837158203125e-7,6.109476089477539e-7,0.39173296093940735],[3,0.30937396698431907,0.9320705297556373,0.16010970962870055,-0.09948445605241163],[1,-25.42641235548575,-160.1651607743909,33.015087465802466]],[3,"Bip001 L Calf",22,[-35],[0,"729eu1JB5S7qPo4U42ICAo",1,0],[1,0.8068879842758179,0,-1.1102230246251565e-16],[3,4.889408066761731e-18,1.1587415157292893e-17,-0.38876579228205926,0.9213366153319333],[1,1.4797032328896018e-15,2.0655620714136336e-15,-45.7554503377869]],[5,"Bip001 L Foot",23,[[6,"Bip001 L Toe0",-36,[0,"70TEceBC9VmIprvXRl2Jl8",1,0],[1,0.3933432996273041,0.5062161684036255,1.1102230246251565e-16],[3,-4.248147327481467e-7,3.746581475640428e-7,0.7071076454532336,0.7071059169185784],[1,0,-0.0000688442584882134,90]]],[0,"74KBLh+cRUqblT09dVsxge",1,0],[1,0.6499096155166626,-5.960464477539063e-8,0],[3,-0.003532187979292712,-0.04334159153822223,0.08134179484255306,0.9957371854574906],[1,0.000969919811449351,-4.984775593493526,9.340205789403797]],[3,"Bip001 R Thigh",4,[-37],[0,"f8R8xlxqJYtLbDAirDd6ig",1,0],[1,5.960464477539062e-7,-4.6193599700927734e-7,-0.39173293113708496],[3,0.16421231782199572,0.8232233005847396,-0.5114095259218553,0.18384234780452113],[1,64.88540480365165,151.81959725881825,4.722469862636056]],[3,"Bip001 R Calf",25,[-38],[0,"2b/Wcj+VtUrpf0HTWgFvE+",1,0],[1,0.8068878650665283,0,-5.551115123125783e-17],[3,6.0393474178547e-18,1.249476999408854e-17,-0.4351808444897823,0.9003430638313152],[1,2.0059705801552415e-15,2.5598632754296132e-15,-51.59360370145537]],[5,"Bip001 R Foot",26,[[6,"Bip001 R Toe0",-39,[0,"93t+aQDC1ec4+mqtxw1X2m",1,0],[1,0.3933432698249817,0.5062160491943359,2.9802322387695312e-8],[3,9.954481498485821e-8,-3.166553935521659e-7,0.7071067215818603,0.7071068407911518],[1,0,0.00001613192644172858,90]]],[0,"fe4iVG5jdYgqTVrbTiQavN",1,0],[1,0.6499095559120178,4.470348358154297e-8,5.551115123125783e-17],[3,-0.0369472358302712,0.07241062891535255,0.20946258513555946,0.9744316435814847],[1,-6.419948336187248,9.851497017899225,23.757293207621018]]],0,[0,4,1,0,0,1,0,-1,8,0,-2,7,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,-1,20,0,-2,21,0,1,3,0,1,3,0,-1,9,0,-2,22,0,-3,25,0,-1,11,0,-2,17,0,-1,14,0,-2,15,0,-3,16,0,1,7,0,0,8,0,-1,10,0,-1,12,0,-1,13,0,1,14,0,1,15,0,1,16,0,-1,18,0,-1,19,0,1,20,0,1,21,0,-1,23,0,-1,24,0,1,24,0,-1,26,0,-1,27,0,1,27,0,9,1,2,1,5,3,1,19,4,1,7,5,1,10,6,1,13,39],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,7],[305,136,137,48,138,139,140,141,142,143,144,145,146,48]],[[[23,"Material #38",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[306,4]],[[[18,".bin",3503106000,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":188720,"length":38304,"count":9576,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":188720,"count":3370,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]]},"minPosition",8,[1,-3.1160824298858643,-2.6615705490112305,3.824163172794215e-7],"maxPosition",8,[1,3.1160824298858643,2.1189393997192383,5.879043102264404]]],-1],0,0,[],[],[]],[[[114,"h5bentFont",32,{"commonHeight":32,"fontSize":32,"atlasName":"h5betFont.png","fontDefDictionary":{"43":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":0,"y":0,"width":29,"height":45}},"44":{"xOffset":-2,"yOffset":-2,"xAdvance":9,"rect":{"x":240,"y":0,"width":13,"height":44}},"46":{"xOffset":-2,"yOffset":-2,"xAdvance":9,"rect":{"x":120,"y":45,"width":13,"height":44}},"47":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":30,"y":0,"width":29,"height":45}},"48":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":90,"y":0,"width":29,"height":44}},"49":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":120,"y":0,"width":29,"height":44}},"50":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":150,"y":0,"width":29,"height":44}},"51":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":180,"y":0,"width":29,"height":44}},"52":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":210,"y":0,"width":29,"height":44}},"53":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":0,"y":46,"width":29,"height":44}},"54":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":30,"y":46,"width":29,"height":44}},"55":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":60,"y":46,"width":29,"height":44}},"56":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":90,"y":45,"width":29,"height":44}},"57":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":134,"y":45,"width":29,"height":43}},"61":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":60,"y":0,"width":29,"height":45}}},"kerningDict":{}}]],0,0,[0],[19],[307]],[[{"name":"wifi_01","rect":{"x":293,"y":360,"width":5,"height":6},"offset":{"x":0,"y":0},"originalSize":{"width":5,"height":6},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"River",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"tilingOffset",8,[2,5,2.5,0,0],"mainTexture",6,0,"normalTexture",6,1,"shineTexture",6,2],{},{}],11,0,0]]],0,0,[0,0,0,0],[10,38,39,8],[308,309,310,311]],[[{"name":"aim_img1","rect":{"x":140,"y":832,"width":25,"height":31},"offset":{"x":0,"y":0},"originalSize":{"width":25,"height":31},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Ray","rect":{"x":2,"y":2,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[71]],[[[31,"BGM_01",".mp3",40.986122],-1],0,0,[],[],[]],[[[33,"Water_Ripple"],[47,"Water_Ripple",[-4],[[70,true,-3,[1,"ea/4hd7iJIgoFZQHHB3S9Z"],[-2]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[145,"Quad",1,[-5],[0,"83uiHI069EbKKeDAWh5R3V",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,120,120,1],[1,-90,0,0]],[136,"Quad<ModelComponent>",0,2,[1,"b3XuZWzFVGr6rB3tdQFpO4"],[0],[7]]],0,[0,4,1,0,-1,3,0,0,1,0,-1,2,0,-1,3,0,9,1,5],[0,3],[-1,6],[312,17]],[[{"name":"Yallow_line","rect":{"x":2,"y":820,"width":125,"height":11},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":128,"height":16},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[33,"Golden_Giant_Attack"],[185,"Golden_Giant_Attack",[-5,-6],[[21,true,-2,[1,"c3fYK8vKFJsZ91mAph5mzs"],[124],125],[4,-3,[1,"33ClTvdsNEaLCCAzONYvK8"]],[2,-4,[1,"69EjAPMuRIZJhuB2EGbLha"],[5,0,0]]],[0,"9338pDCb1BOINkZSAoI5PC",-1,0],[1,0,-30,150],[3,-0.49999999999999994,-0.49999999999999994,-0.5000000000000001,0.49999999999999994],[1,0.7,0.7,0.7],[1,90,90,-180]],[186,"Scale_Smoke",1,[-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25],[[4,-7,[1,"e7VimaF9RJKbCbpgggSeKS"]],[2,-8,[1,"1aVZJo7chPbqosSYL1G0K6"],[5,0,0]]],[0,"d1lSippDFCQ5ZQtXkAWi0H",1,0],[1,0,0,160],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[119,"Scale",1,[-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42],[[4,-26,[1,"d26pJvSpNCaI5I9BozGI7b"]],[2,-27,[1,"c2F0vq7V9Epbb62ocQ7mL2"],[5,0,0]]],[0,"b9AFIMuIlOTrmRif2BqMbH",1,0],[1,0,0,-100]],[52,"WaterSplash01_01",false,3,[-46,-47],[[13,1,2,false,-43,[1,"3eB4fKR1VL8Y5oJZi0Exrr"],[4,4294961477],4,5],[4,-44,[1,"29QrLnckZOFZtQdqHj020h"]],[8,-45,[1,"c9nZBA0ARPbJ+I6WKVREaL"],[5,128,128],[0,0.5,0.1]]],[0,"96nLGGg/lDFbHq+1W12g9l",1,0],[1,490.641,193.363,0],[3,0.5416752204197018,0.4545194776720436,0.45451947767204365,0.5416752204197018],[1,1.5,5,1.5],[1,90,0,80]],[52,"WaterSplash01_02",false,3,[-51,-52],[[13,1,2,false,-48,[1,"8csOsPYOtIb7Swz8ai0p2G"],[4,4294961477],10,11],[4,-49,[1,"a8ktNLzz9H5Ks2O+tWRNBQ"]],[8,-50,[1,"85bAOmhhdIZqh8tcCWE9df"],[5,128,128],[0,0.5,0.1]]],[0,"82eVNo3LNL/bf8B1/k+9ec",1,0],[1,467.255,268.95,0],[3,0.4342610146809031,0.5175321243695732,0.5647872069009547,0.47391273700423725],[1,1.5,5,1.5],[1,85,0,100]],[52,"WaterSplash01_03",false,3,[-56,-57],[[13,1,2,false,-53,[1,"dfnm2SxsVJdKiGT4f74DHn"],[4,4294961477],16,17],[4,-54,[1,"824piXUUZInoHu2bpchwR3"]],[8,-55,[1,"48umyao9pJ44RHAzrgL4Ip"],[5,128,128],[0,0.5,0.1]]],[0,"01I9AfBnhOTqsvkP64/O91",1,0],[1,324.147,410.209,0],[3,0.48597892505699697,0.5303529322552072,0.5121558733648701,0.4693043927203502],[1,1.5,5,1.5],[1,92,0,95]],[52,"WaterSplash01_04",false,3,[-61,-62],[[13,1,2,false,-58,[1,"b6YRMK70BOl4K1ZNEWnPXX"],[4,4294961477],22,23],[4,-59,[1,"4cDxG63I9C04w09svQ/M8/"]],[8,-60,[1,"ffagC732BLtLUytX8ov4MQ"],[5,128,128],[0,0.5,0.1]]],[0,"4dXNeZn9xH5YcLckFqwmHw",1,0],[1,364.772,408.701,0],[3,0.47817126784941755,0.5038873785401158,0.5217906552147537,0.4951608430417419],[1,1.5,5,1.5],[1,88,0,93]],[52,"WaterSplash01_05",false,3,[-66,-67],[[13,1,2,false,-63,[1,"253Ar8ecVNGKrNHsKVgt+a"],[4,4294961477],28,29],[4,-64,[1,"8fuzpfpsdECrAjXMGD3FTe"]],[8,-65,[1,"58VJqhpexHE4k4pvgRyoa1"],[5,128,128],[0,0.5,0.1]]],[0,"74RMEAo4pK2rXYxKHFbjdp",1,0],[1,302.66,455.284,0],[3,0.49546539473859164,0.5130694356860223,0.5041919302369656,0.48689248737814905],[1,1.5,5,1.5],[1,91,0,92]],[52,"WaterSplash01_06",false,3,[-71,-72],[[13,1,2,false,-68,[1,"f4VHkxfZ1ESbKWD/+8cYyS"],[4,4294961477],34,35],[4,-69,[1,"a8sosqpxZI2p65bp+z1G8m"]],[8,-70,[1,"4bmPmiyJlA3Lkh80SdVNYb"],[5,128,128],[0,0.5,0.1]]],[0,"12ZsUboEdF2rVBPMg9e0XZ",1,0],[1,221.916,501.868,0],[3,0.5321391845561992,0.44651779349608534,0.462382710812074,0.5510462567637389],[1,1.5,5,1.5],[1,88,0,80]],[52,"WaterSplash01_07",false,3,[-76,-77],[[13,1,2,false,-73,[1,"c1HfeBfXhK75CwHZVbTYoL"],[4,4294961477],40,41],[4,-74,[1,"945+8YPSVAQpinFlTNltRZ"]],[8,-75,[1,"c3kausxdNLUqQ4rZoIovES"],[5,128,128],[0,0.5,0.1]]],[0,"6aMErsSBBEM61zmwU6Opzy",1,0],[1,131.854,523.607,0],[3,0.49240387650610395,0.41317591116653474,0.49240387650610395,0.5868240888334652],[1,1.5,5,1.5],[1,80,0,80]],[52,"WaterSplash01_08",false,3,[-81,-82],[[13,1,2,false,-78,[1,"d0rQcFpNBAh5XUpslp7K2G"],[4,4294961477],46,47],[4,-79,[1,"4aClT++q5BG7jVtVKwNRUq"]],[8,-80,[1,"abpxgha4FGar0b+mHI5LCt"],[5,128,128],[0,0.5,0.1]]],[0,"75cNDPEklK+K8vVecbVNsP",1,0],[1,38.687,539.135,0],[3,0.5,0.4999999999999999,0.5,0.5000000000000001],[1,3,10,3],[1,90,0,90]],[52,"WaterSplash01_09",false,3,[-86,-87],[[13,1,2,false,-83,[1,"12SaZopr9N7bBq7rcrLN+g"],[4,4294961477],52,53],[4,-84,[1,"78iGQT+rVKZIcNNccNciBK"]],[8,-85,[1,"25Z3lCf+ZLAaxvGurmR/WO"],[5,128,128],[0,0.5,0.1]]],[0,"1eUenpm0VOWLdyRHI6DoxH",1,0],[1,-60.691,536.029,0],[3,0.45451947767204365,0.5416752204197018,0.5416752204197018,0.45451947767204376],[1,3,10,3],[1,90,0,100]],[52,"WaterSplash01_10",false,3,[-91,-92],[[13,1,2,false,-88,[1,"b4/n5G4ZlIjKEOOvbuL7YA"],[4,4294961477],58,59],[4,-89,[1,"f06sUa+E1LWoq4TVXEvE4C"]],[8,-90,[1,"84o46Oe1pJMJE9hzN2nhLF"],[5,128,128],[0,0.5,0.1]]],[0,"96nQjEGLNERa9S2MBnkHyU",1,0],[1,-147.648,504.973,0],[3,0.4951608430417419,0.5217906552147537,0.5038873785401158,0.47817126784941755],[1,3,10,3],[1,92,0,93]],[52,"WaterSplash01_11",false,3,[-96,-97],[[13,1,2,false,-93,[1,"aaTCylOkhFv47Kf/24Pdso"],[4,4294961477],64,65],[4,-94,[1,"b6br09MxBAoYz+VMUTJ/QX"]],[8,-95,[1,"21kyJOhCtEQa7pNVyPXmsu"],[5,128,128],[0,0.5,0.1]]],[0,"31KnpQ6KVJ2ozRgKtvQZ5f",1,0],[1,-228.393,455.284,0],[3,0.49931476737728697,0.47383202187852796,0.49931476737728697,0.5261679781214721],[1,3,10,3],[1,87,0,87]],[52,"WaterSplash01_12",false,3,[-101,-102],[[13,1,2,false,-98,[1,"caYeGx/ylGprVhvKMSS+6w"],[4,4294961477],70,71],[4,-99,[1,"8exp1q/cVHOanowzma6gsu"]],[8,-100,[1,"dcObLW+3ZFjZiMppu5Av17"],[5,128,128],[0,0.5,0.1]]],[0,"702lWrtr1Lu47lxpFDkpc6",1,0],[1,-299.82,380.752,0],[3,0.4342610146809031,0.5175321243695732,0.5647872069009547,0.47391273700423725],[1,3,10,3],[1,85,0,100]],[52,"WaterSplash01_13",false,3,[-106,-107],[[13,1,2,false,-103,[1,"65JuaRZDJG9aF4zBDx6SdA"],[4,4294961477],76,77],[4,-104,[1,"47BvqZ1s5MqIMXFSJWFtDV"]],[8,-105,[1,"c0BteZgW1HsJ9NAYOzDhOM"],[5,128,128],[0,0.5,0.1]]],[0,"60tbDRQgNJGYoJgKMw660X",1,0],[1,-361.932,306.217,0],[3,0.4980973490458728,0.5435778713738292,0.4980973490458728,0.45642212862617093],[1,3,10,3],[1,95,0,95]],[52,"WaterSplash01_14",false,3,[-111,-112],[[13,1,2,false,-108,[1,"5483MDRclExIubZAbGWysc"],[4,4294961477],82,83],[4,-109,[1,"ec7IpJhF1DKpLeGmJAisjg"]],[8,-110,[1,"5bXeajoxJJqZc7pnyR6+r7"],[5,128,128],[0,0.5,0.1]]],[0,"a4CNcLUnlAu64l4d79uQ9g",1,0],[1,-399.199,216.156,0],[3,0.45451947767204365,0.4545194776720436,0.5416752204197018,0.5416752204197018],[1,3,10,3],[1,80,0,90]],[52,"WaterSplash01_15",false,3,[-116,-117],[[13,1,2,false,-113,[1,"80UI3fpidGgqJYD/7Ui+7n"],[4,4294961477],88,89],[4,-114,[1,"94OgTXMiFL/qzirLDNjcRK"]],[8,-115,[1,"d9edRG+y1EFLmXTrFBZ3f+"],[5,128,128],[0,0.5,0.1]]],[0,"930jmzf9BB4KCuL0V/BBt/",1,0],[1,-408.516,126.094,0],[3,0.45451947767204365,0.4545194776720436,0.5416752204197018,0.5416752204197018],[1,3,10,3],[1,80,0,90]],[28,"WaterSplash01_01",4,[[13,1,2,false,-118,[1,"49YegIpl9D76MLHzUYWz7D"],[4,4294961477],0,1],[4,-119,[1,"a6ayBkE2ZIpLhCIWXsFMbQ"]],[8,-120,[1,"bf4Umz/HZHfJJN6z/nYuG9"],[5,128,128],[0,0.5,0.1]]],[0,"0ftS2F/HdJVLUpG8QY+6yl",1,0],[3,0,0.573576436351046,0,0.8191520442889918],[1,1.2,0.8,1],[1,0,70,0]],[28,"WaterSplash01_02",4,[[13,1,2,false,-121,[1,"7fux+0IDBEU6x3c+T1QjPw"],[4,4294961477],2,3],[4,-122,[1,"3c+rUPWcxOI4xmBTGTlcae"]],[8,-123,[1,"14Faj4+9lEDalHuMWhksdO"],[5,128,128],[0,0.5,0.1]]],[0,"2b+OdnS/BCZ6AIZaL8cciD",1,0],[3,0,-0.17364817766693033,0,0.984807753012208],[1,3,1,1],[1,0,-20,0]],[28,"WaterSplash01_01",5,[[13,1,2,false,-124,[1,"60cFg8eydCT5e9+zDfn5sm"],[4,4294961477],6,7],[4,-125,[1,"be7JIQSGdI7JPIBXUb6c9Y"]],[8,-126,[1,"de5b/y+r1D94Gnvi1FJdn/"],[5,128,128],[0,0.5,0.1]]],[0,"dcedLNmOhDSIcj/i3f+tON",1,0],[3,0,0.573576436351046,0,0.8191520442889918],[1,1,1,0],[1,0,70,0]],[44,"WaterSplash01_02",5,[[13,1,2,false,-127,[1,"94LsZTzPBIn4qeDXkWnEBs"],[4,4294961477],8,9],[4,-128,[1,"602vSY5gpJo7T+Ip1GPYhV"]],[8,-129,[1,"4cEdqf60VGZ6OcP+GJLrAn"],[5,128,128],[0,0.5,0.1]]],[0,"53+A3NGa5I8ZH6Sie3Hgap",1,0],[3,0,-0.17364817766693033,0,0.984807753012208],[1,0,-20,0]],[28,"WaterSplash01_01",6,[[13,1,2,false,-130,[1,"f4zSQ8bAdDD7uUsDizz+Yo"],[4,4294961477],12,13],[4,-131,[1,"ceQHPz4o1Hy6OmwGd/uFjT"]],[8,-132,[1,"a8aDm+11tOkKDerlfZfMr7"],[5,128,128],[0,0.5,0.1]]],[0,"99NXhYHAFKuIRpSLQQ2Inh",1,0],[3,0,0.49999999999999994,0,0.8660254037844387],[1,2,1,0],[1,0,60,0]],[28,"WaterSplash01_02",6,[[13,1,2,false,-133,[1,"f6h8qZ4A1Ny5qrOthFgouI"],[4,4294961477],14,15],[4,-134,[1,"56xnR2Nu1Kgq3FmzfExVJC"]],[8,-135,[1,"34z31uBu1K2p8GW6mxpRSz"],[5,128,128],[0,0.5,0.1]]],[0,"14CyOdSJJI+acFHneOGgmJ",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1.5,0.8,1],[1,0,50,0]],[28,"WaterSplash01_01",7,[[13,1,2,false,-136,[1,"0bFMcUWB1CHZD7xRHfiuRw"],[4,4294961477],18,19],[4,-137,[1,"46MUsrMhBPsphl8StX6nQ8"]],[8,-138,[1,"79TMgoBgVIPI0ND7dRv8EI"],[5,128,128],[0,0.5,0.1]]],[0,"6cnR20QzhNZKvt+13lXexF",1,0],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1.2,1.2,0],[1,0,60,0]],[28,"WaterSplash01_02",7,[[13,1,2,false,-139,[1,"a0Nb/Kw6pClJHw8tokcO0H"],[4,4294961477],20,21],[4,-140,[1,"65pLxKfJ1NgIFGQtt8/YDK"]],[8,-141,[1,"fdb0+He11Bh4x11e1/pMZs"],[5,128,128],[0,0.5,0.1]]],[0,"7fDZ+y4MFBma31L9M1DxVR",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1,1.2,1],[1,0,50,0]],[28,"WaterSplash01_01",8,[[13,1,2,false,-142,[1,"aeRvs0QJpJV5O+QVcQCpmf"],[4,4294961477],24,25],[4,-143,[1,"f4DAY3AY9I2Loy2pCOaiRc"]],[8,-144,[1,"beMkZfMmBCerT9Qw5BQKeh"],[5,128,128],[0,0.5,0.1]]],[0,"a8aGjD+YtOv4phJMi1MfjL",1,0],[3,0,0.6427876096865393,0,0.766044443118978],[1,1,1.2,0],[1,0,80,0]],[28,"WaterSplash01_02",8,[[13,1,2,false,-145,[1,"2b1M9Ea8lJ+rNiCf2KBsAJ"],[4,4294961477],26,27],[4,-146,[1,"ec8pd/Yd5GSKBbGG5DoBEL"]],[8,-147,[1,"26ezoKpERKv56mS1B0a8z+"],[5,128,128],[0,0.5,0.1]]],[0,"adA6oMU6BI7IVhLIwlQDlZ",1,0],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1.2,1,1],[1,0,30,0]],[28,"WaterSplash01_01",9,[[13,1,2,false,-148,[1,"46xmMwGEVKjbyQfi+Nkghq"],[4,4294961477],30,31],[4,-149,[1,"4bz6ohkQVHpIWAhbcE9fHT"]],[8,-150,[1,"54Uv+h4nxN4JalmYWF3n+u"],[5,128,128],[0,0.5,0.1]]],[0,"57b/BWCFxIDbtEtS/Na9gM",1,0],[3,0,0.573576436351046,0,0.8191520442889918],[1,1.5,1,0],[1,0,70,0]],[28,"WaterSplash01_02",9,[[13,1,2,false,-151,[1,"a9PYzAhEFBdL3puCsZdNT7"],[4,4294961477],32,33],[4,-152,[1,"5d2abDqK5ErJwMZr5NwYE/"]],[8,-153,[1,"e1dJMiQEdIRZaKi9OrPuxi"],[5,128,128],[0,0.5,0.1]]],[0,"03dA3HRJVBva0M5r314uB7",1,0],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1,1.2,1],[1,0,30,0]],[28,"WaterSplash01_01",10,[[13,1,2,false,-154,[1,"a1yS3+tdtB17L5RmGIZxjJ"],[4,4294961477],36,37],[4,-155,[1,"20RWrSA/RAoZ7+ZXAcKZqA"]],[8,-156,[1,"aeVFVee/9NH5z1vP2ny/55"],[5,128,128],[0,0.5,0.1]]],[0,"e4jvG7WGRH8o7+Ow1q//nD",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1.3,1.1,0],[1,0,50,0]],[28,"WaterSplash01_02",10,[[13,1,2,false,-157,[1,"9ebVpMdjtLKpelosb9rfn0"],[4,4294961477],38,39],[4,-158,[1,"93889ZsbtLwb/MdEj4Pfur"]],[8,-159,[1,"39lN+krEhGfKv2+Frt2iNf"],[5,128,128],[0,0.5,0.1]]],[0,"e5DRc8o7VH3JCiJqszdJ7Q",1,0],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1.3,1.2,1],[1,0,30,0]],[28,"WaterSplash01_01",11,[[13,1,2,false,-160,[1,"5b56dZFfVOAa5Qb1R4YNlg"],[4,4294961477],42,43],[4,-161,[1,"1aExnmNHlAuY80u87nJzad"]],[8,-162,[1,"fdVBdZOI9NN40dMLuIKYWx"],[5,128,128],[0,0.5,0.1]]],[0,"aaFQXseDdPM4T0VJ/gzw21",1,0],[3,0,0.49999999999999994,0,0.8660254037844387],[1,1,1,0],[1,0,60,0]],[44,"WaterSplash01_02",11,[[13,1,2,false,-163,[1,"e6DSS/aXdA75dYSr9hKUH8"],[4,4294961477],44,45],[4,-164,[1,"90ewphc1JMh64OOfljoOco"]],[8,-165,[1,"40SE8+I4hIz7wzBJ0SxElR"],[5,128,128],[0,0.5,0.1]]],[0,"c0GevGi09PnZzlddI7fy6l",1,0],[3,0,0.3420201433256687,0,0.9396926207859084],[1,0,40,0]],[28,"WaterSplash01_01",12,[[13,1,2,false,-166,[1,"95sIYQXvZInrlwmpGsIH94"],[4,4294961477],48,49],[4,-167,[1,"cau1t0IW9BhJ2v0y598zBJ"]],[8,-168,[1,"959vKN39pCzrHtt69MsBXE"],[5,128,128],[0,0.5,0.1]]],[0,"a0XFIXgZZP7JMZUxL1XC8H",1,0],[3,0,0.3420201433256687,0,0.9396926207859084],[1,1.3,1,0],[1,0,40,0]],[28,"WaterSplash01_02",12,[[13,1,2,false,-169,[1,"ddyihSyltPKJ+bvYWZalDS"],[4,4294961477],50,51],[4,-170,[1,"72ilegGjhHAqFDc30MLBvy"]],[8,-171,[1,"d2tNicx9dGgo1OYGq2yxV9"],[5,128,128],[0,0.5,0.1]]],[0,"38iOocS1pKgIk885oqRpyO",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1,1.7,1],[1,0,50,0]],[28,"WaterSplash01_01",13,[[13,1,2,false,-172,[1,"2fh7YfxgNBbJFg7rvjl/yI"],[4,4294961477],54,55],[4,-173,[1,"bdpU5RjGlHKrEJTxvb6P0M"]],[8,-174,[1,"c6bOGqMWFKtLF9VBcT5d1K"],[5,128,128],[0,0.5,0.1]]],[0,"88Bwuar29NK5K725J6YhY9",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1.5,1,0],[1,0,50,0]],[28,"WaterSplash01_02",13,[[13,1,2,false,-175,[1,"3coVYW+51DhqETEcbfb+8T"],[4,4294961477],56,57],[4,-176,[1,"f2nYyenrVH6aakqf/NWxit"]],[8,-177,[1,"18Z2nNvh5HYJ9UZt1SZuq/"],[5,128,128],[0,0.5,0.1]]],[0,"a6SVfX2ZZGbb/uf5FWG2im",1,0],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,1.2,1.2,1],[1,0,-30,0]],[28,"WaterSplash01_01",14,[[13,1,2,false,-178,[1,"cff9El0MlInpjC8qIeeHBB"],[4,4294961477],60,61],[4,-179,[1,"7boEiUneZDJaE9wSLmDmgW"]],[8,-180,[1,"c1pv9m5a5HzYS3LuSk5a/P"],[5,128,128],[0,0.5,0.1]]],[0,"16mkKa1VxLdaA/HZzn6p/X",1,0],[3,0,0.3420201433256687,0,0.9396926207859084],[1,1,1,0],[1,0,40,0]],[28,"WaterSplash01_02",14,[[13,1,2,false,-181,[1,"a17x3TU1RADJ3scvYpm5Q+"],[4,4294961477],62,63],[4,-182,[1,"98PQZVlqBN/JH7Cf3ycHeL"]],[8,-183,[1,"154g7XRpxC2oI9ocXE5wVn"],[5,128,128],[0,0.5,0.1]]],[0,"9fgtA/7XdFJ67IYU74Vx/t",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,1,0.8,1],[1,0,50,0]],[28,"WaterSplash01_01",15,[[13,1,2,false,-184,[1,"f6f/0Iv5VEn4FWdWYcRj/l"],[4,4294961477],66,67],[4,-185,[1,"a3CTmRwnlOGLSwjiCQzXqI"]],[8,-186,[1,"e7qiaYmdNEAb4vIF5oH4Jx"],[5,128,128],[0,0.5,0.1]]],[0,"82L8Cj56RMObHV2ZRDldkd",1,0],[3,0,0.42261826174069944,0,0.9063077870366499],[1,2,1.2,0],[1,0,50,0]],[28,"WaterSplash01_02",15,[[13,1,2,false,-187,[1,"4eSyQn9iFEF5Wz/t9EQDmx"],[4,4294961477],68,69],[4,-188,[1,"a8rD10K51O5bw7cPF3xYVL"]],[8,-189,[1,"69aJzGB7JNnZ0q3khmzCQq"],[5,128,128],[0,0.5,0.1]]],[0,"5fR8B1uLFBn5KFGIEDmUdh",1,0],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,3,0.7,1],[1,0,-30,0]],[28,"WaterSplash01_01",16,[[13,1,2,false,-190,[1,"123BinKsJI0Jevv5uZ4aiz"],[4,4294961477],72,73],[4,-191,[1,"58ECMj2nFH3qZSXVfgd9CM"]],[8,-192,[1,"c1kNOG5xZKTYQVMAa7SYiW"],[5,128,128],[0,0.5,0.1]]],[0,"dcUAQaX41N6IMWJDcyB6Lm",1,0],[3,0,0.3420201433256687,0,0.9396926207859084],[1,1.5,1.1,0],[1,0,40,0]],[28,"WaterSplash01_02",16,[[13,1,2,false,-193,[1,"2fVLKAgfRLzKNc+IMp0zgF"],[4,4294961477],74,75],[4,-194,[1,"96ynNI3zdFkb7Pxf3QovY/"]],[8,-195,[1,"cfSiEL9TpFnorDMsywRmWq"],[5,128,128],[0,0.5,0.1]]],[0,"33SFbnJZ9PsZmg6eKzdCkK",1,0],[3,0,-0.42261826174069944,0,0.9063077870366499],[1,1,1.2,1],[1,0,-50,0]],[28,"WaterSplash01_01",17,[[13,1,2,false,-196,[1,"96eaR0cFhOmZJpOCbFdyl4"],[4,4294961477],78,79],[4,-197,[1,"34N/RIKllOe5M1uMFtYNrP"]],[8,-198,[1,"8dJy1ksAFBIYZFIhuca/TJ"],[5,128,128],[0,0.5,0.1]]],[0,"fcOqQ/2ZxCwolPkiApAM9P",1,0],[3,0,0.25881904510252074,0,0.9659258262890683],[1,1.5,1,0],[1,0,30,0]],[28,"WaterSplash01_02",17,[[13,1,2,false,-199,[1,"887wX6LStGfKHKmDTJev8w"],[4,4294961477],80,81],[4,-200,[1,"597hP/6CNL3KKt3A7LX6VU"]],[8,-201,[1,"ef1TPZ9HtCKICtJNo4Onhc"],[5,128,128],[0,0.5,0.1]]],[0,"5dF7D7qhNOg7CMUtaZgWfw",1,0],[3,0,-0.25881904510252074,0,0.9659258262890683],[1,4,1,1],[1,0,-30,0]],[28,"WaterSplash01_01",18,[[13,1,2,false,-202,[1,"5f8AmVCcxNzIqM481oYkjz"],[4,4294961477],84,85],[4,-203,[1,"b5oteSGJZIY4a7/bAGwn3r"]],[8,-204,[1,"8eulujMMpElbCZUSkmkSl/"],[5,128,128],[0,0.5,0.1]]],[0,"a0jFcumXJIPrkSqFvDew0L",1,0],[3,0,0.3420201433256687,0,0.9396926207859084],[1,1.5,1,0],[1,0,40,0]],[27,"WaterSplash01_02",18,[[13,1,2,false,-205,[1,"1eEdAYh3pIZ5PlUwpgfEj9"],[4,4294961477],86,87],[4,-206,[1,"bb3WRj2o1MKbTg9Bu0QOta"]],[8,-207,[1,"39lhrpzu9M1a+Q+/Yhumon"],[5,128,128],[0,0.5,0.1]]],[0,"bb8s1qmc5Nw7pk8Sd4hedR",1,0],[1,1,1.5,1]],[49,"Big_Smoke_01",false,2,[[13,1,2,false,-208,[1,"0d9Ma9/BhK+KvcLPOT+cri"],[4,4278229503],90,91],[4,-209,[1,"c7buK3NB5F76lJ6ktOQwQ7"]],[25,-210,[1,"85LMGazbdASamsEIa8KMES"]]],[0,"ddzHzZRcREKqsNjE/BkTM6",1,0],[1,0,240.841,452.127],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_02",false,2,[[13,1,2,false,-211,[1,"32kBhAf4VCz4M3c72U3+Wy"],[4,4278229503],92,93],[4,-212,[1,"025+wXO+tJtrjIG2pkuHse"]],[25,-213,[1,"6d+qK8kEhMeLX88d6JATh7"]]],[0,"a8Hyck8DBL0agpp7Cf2ZcG",1,0],[1,0,323.046,402.217],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_03",false,2,[[13,1,2,false,-214,[1,"85aV21GBFJnZJ8QhdfVbPi"],[4,4278229503],94,95],[4,-215,[1,"28+hEhS3NLk4NPprJunwDd"]],[25,-216,[1,"e0ZqcnHexBZYu7zXg37vYS"]]],[0,"e2XiFcqvlHf46X/JS52DgP",1,0],[1,0,390.487,352.307],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_04",false,2,[[13,1,2,false,-217,[1,"b9kzDoGBdMBoOPUiVAHC3U"],[4,4278229503],96,97],[4,-218,[1,"187YuDrsNCm5haaOcf40MQ"]],[25,-219,[1,"42ute23SlJtbAzGYktlWoJ"]]],[0,"14byo7eSBDwrO8XbFK8Gc/",1,0],[1,0,437.911,289.16],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_05",false,2,[[13,1,2,false,-220,[1,"16/OmxUNtJqrua1EjBTgCS"],[4,4278229503],98,99],[4,-221,[1,"4cV9OTEsZFzol3KTT/5grH"]],[25,-222,[1,"4646/GvaVLBJCGZ0ePGZV5"]]],[0,"58YlnEUPJGcaGuCR2Nkab9",1,0],[1,0,464.77,246.615],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_06",false,2,[[13,1,2,false,-223,[1,"39P/uSCtxICpJysgsAUhL6"],[4,4278229503],100,101],[4,-224,[1,"04iinnfL9O15GJ6UkHByi5"]],[25,-225,[1,"66lF0F2iFG26g2F4R28h5b"]]],[0,"daStmgqC1B0aMWJ/CP6m0x",1,0],[1,0,508.382,182.025],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_07",false,2,[[13,1,2,false,-226,[1,"c8Axb9Q3BPWYy80Wa1c5ll"],[4,4278229503],102,103],[4,-227,[1,"b9U+6HqCFKs7JEWWSD4RF2"]],[25,-228,[1,"fbKVJPaB9D7adKOrP+5U10"]]],[0,"10YtTSnl5HO6aKuDTRQNNp",1,0],[1,0,531.626,114.5],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_08",false,2,[[13,1,2,false,-229,[1,"a2rgFmMfBBWq+x9YmeX8Vn"],[4,4278229503],104,105],[4,-230,[1,"7e81kozwFIX5ykqvlK7MAB"]],[25,-231,[1,"b7f0p8WpZPpquOrjnTCht1"]]],[0,"2b8Sf4SZFIEIwzplh24LKN",1,0],[1,0,543.248,32.295],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_09",false,2,[[13,1,2,false,-232,[1,"51Q5/T7KRDiI1BhoEIWxeI"],[4,4278229503],106,107],[4,-233,[1,"a6P4d9hshPjL/Ym7Tqu6VA"]],[25,-234,[1,"7cF/AcXANMlqrWIi6wJaHc"]]],[0,"d8zHuoJGJOMLUXyPErjhUL",1,0],[1,0,526.753,0],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_10",false,2,[[13,1,2,false,-235,[1,"e03m1ZA9ZDdpJ2z7tU7txB"],[4,4278229503],108,109],[4,-236,[1,"c8bZu481RGvrNSAQzbUG5V"]],[25,-237,[1,"4adS14JJFNMY/NIrYrYVSl"]]],[0,"d1t8Po+GtGFLHKcTKF6VAX",1,0],[1,0,529.871,-44.038],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_11",false,2,[[13,1,2,false,-238,[1,"589T4rxOJJcrgyyvMZwSz8"],[4,4278229503],110,111],[4,-239,[1,"53GzFSamhH4pP9+Ul5+jle"]],[25,-240,[1,"35mtX76ZxGi6BqSePm/0Kw"]]],[0,"72GzS2h/1LJJEW3tBSfA+T",1,0],[1,0,501.121,-111.564],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_12",false,2,[[13,1,2,false,-241,[1,"daSS+5Ei9C2r851SH6XMwd"],[4,4278229503],112,113],[4,-242,[1,"586xjwNqtISpoRhExSyRRn"]],[25,-243,[1,"59kXHQMHJCtJvUocwmMaLc"]]],[0,"f3egw9aTFGoqiflzf9ThEU",1,0],[1,0,479.615,-193.769],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_13",false,2,[[13,1,2,false,-244,[1,"b8pvybhN9KJ7dpjghPQI8A"],[4,4278229503],114,115],[4,-245,[1,"8e1EVb8MJIVK/jEGRR6bfB"]],[25,-246,[1,"78jSI77FFFsqTBaBuyEObj"]]],[0,"91/GcTAHRJ05M6yL1t85IV",1,0],[1,0,423.706,-267.166],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_14",false,2,[[13,1,2,false,-247,[1,"595goWbUtAZ5FI06x8u4/s"],[4,4278229503],116,117],[4,-248,[1,"eczd/3yQJPsZsnFwE3tTJs"]],[25,-249,[1,"ecuTHDbfJM64KksF60t8VU"]]],[0,"e1NfEZgWhPOLm6gnnmYEXl",1,0],[1,0,380.277,-325.884],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_15",false,2,[[13,1,2,false,-250,[1,"09v63d/fFAkrO4H0zKEz9O"],[4,4278229503],118,119],[4,-251,[1,"7bixySW1ND7KaOVXW/f5F5"]],[25,-252,[1,"aflh05oc1A4peiyMx516kB"]]],[0,"f89AGUNuZGiK+lm2oWy5aR",1,0],[1,0,316.417,-396.345],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_16",false,2,[[13,1,2,false,-253,[1,"61a8u7ww1HfYPbT7nioMOx"],[4,4278229503],120,121],[4,-254,[1,"34ScFVojlO1oyxeF9uyO5r"]],[25,-255,[1,"95GKl/NbJGwqK5Rz3MCyOA"]]],[0,"4fm3JMYOVCQoQjqLdhljwJ",1,0],[1,0,219.533,-459.042],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]],[49,"Big_Smoke_17",false,2,[[13,1,2,false,-256,[1,"70QFRQycBKi4R53ZRGsa1N"],[4,4278229503],122,123],[4,-257,[1,"556Y2cZThGA5JLISTEE+3w"]],[25,-258,[1,"d0x6F7QzVAw7UGXdsDmu8U"]]],[0,"73lRZLuIpHSYg/i4M0CErj",1,0],[1,0,147.865,-477.115],[3,0,0.08715574274765817,0,0.9961946980917455],[1,2,2,2],[1,0,10,0]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,2,0,0,2,0,0,2,0,-1,49,0,-2,50,0,-3,51,0,-4,52,0,-5,53,0,-6,54,0,-7,55,0,-8,56,0,-9,57,0,-10,58,0,-11,59,0,-12,60,0,-13,61,0,-14,62,0,-15,63,0,-16,64,0,-17,65,0,0,3,0,0,3,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,-11,14,0,-12,15,0,-13,16,0,-14,17,0,-15,18,0,0,4,0,0,4,0,0,4,0,-1,19,0,-2,20,0,0,5,0,0,5,0,0,5,0,-1,21,0,-2,22,0,0,6,0,0,6,0,0,6,0,-1,23,0,-2,24,0,0,7,0,0,7,0,0,7,0,-1,25,0,-2,26,0,0,8,0,0,8,0,0,8,0,-1,27,0,-2,28,0,0,9,0,0,9,0,0,9,0,-1,29,0,-2,30,0,0,10,0,0,10,0,0,10,0,-1,31,0,-2,32,0,0,11,0,0,11,0,0,11,0,-1,33,0,-2,34,0,0,12,0,0,12,0,0,12,0,-1,35,0,-2,36,0,0,13,0,0,13,0,0,13,0,-1,37,0,-2,38,0,0,14,0,0,14,0,0,14,0,-1,39,0,-2,40,0,0,15,0,0,15,0,0,15,0,-1,41,0,-2,42,0,0,16,0,0,16,0,0,16,0,-1,43,0,-2,44,0,0,17,0,0,17,0,0,17,0,-1,45,0,-2,46,0,0,18,0,0,18,0,0,18,0,-1,47,0,-2,48,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,9,1,258],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,-1,7],[2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,14,2,15,2,16,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,2,9,147,147]],[[{"name":"Glay_Rock02","rect":{"x":164,"y":820,"width":22,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["36TD0aeulGOq2+FiDDxCVR"]}],[1],0,[],[],[]],[[{"name":"roll_light0010","rect":{"x":156,"y":530,"width":54,"height":62},"offset":{"x":23,"y":19},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[135,"2d-sprite-depth-blend-add",[{}],[{"rasterizerState":{},"depthStencilState":{"depthTest":true},"blendState":{"targets":[{"blendDst":1}]}}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[44]],[[{"name":"S_coin0000","rect":{"x":2,"y":2,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[114,"number_7_1",32,{"commonHeight":32,"fontSize":32,"atlasName":"number_7_0_0.png","fontDefDictionary":{"36":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":0,"y":0,"width":56,"height":86}},"37":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":57,"y":0,"width":56,"height":86}},"43":{"xOffset":0,"yOffset":0,"xAdvance":52,"rect":{"x":118,"y":0,"width":52,"height":86}},"44":{"xOffset":0,"yOffset":0,"xAdvance":27,"rect":{"x":456,"y":0,"width":27,"height":86}},"45":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":171,"y":0,"width":56,"height":86}},"46":{"xOffset":0,"yOffset":0,"xAdvance":26,"rect":{"x":484,"y":0,"width":26,"height":86}},"47":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":228,"y":0,"width":56,"height":86}},"48":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":285,"y":0,"width":56,"height":86}},"49":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":342,"y":0,"width":56,"height":86}},"50":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":399,"y":0,"width":56,"height":86}},"51":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":0,"y":87,"width":56,"height":86}},"52":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":57,"y":87,"width":56,"height":86}},"53":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":114,"y":87,"width":56,"height":86}},"54":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":171,"y":87,"width":56,"height":86}},"55":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":228,"y":87,"width":56,"height":86}},"56":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":285,"y":87,"width":56,"height":86}},"57":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":342,"y":87,"width":56,"height":86}},"58":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":399,"y":87,"width":56,"height":86}},"59":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":0,"y":174,"width":56,"height":86}},"61":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":57,"y":174,"width":56,"height":86}},"120":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":114,"y":174,"width":56,"height":86}},"126":{"xOffset":0,"yOffset":0,"xAdvance":56,"rect":{"x":171,"y":174,"width":56,"height":86}}},"kerningDict":{}}]],0,0,[0],[19],[313]],[[{"name":"002","rect":{"x":103,"y":856,"width":27,"height":22},"offset":{"x":-47,"y":0.5},"originalSize":{"width":129,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"monster_M_002",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[314,10]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["41eLo59L9NQ4jU7EeH2c3k"]}],[1],0,[],[],[]],[[[33,"BossComing"],[47,"BossComing",[-5],[[40,-2,[1,"d37xasJ+VH6K8AQXqtE8tX"],[104],105],[4,-3,[1,"84vBx0f0hFlrR79mGbwfpE"]],[2,-4,[1,"a7GTz6wDBMCKvU0Q5qX5zk"],[5,0,0]]],[0,"a4dHkPFPtP/72wgLdJ5b09",-1,0]],[187,"ani",[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49],[[4,-6,[1,"88dnNYFCpLo5qJpGVqhOpM"]],[8,-7,[1,"c5LhxH2FhP372A8DgIUhP+"],[5,0,0],[0,0,0]]],[0,"b1BdMas1BI05v60VT0v2aq",1,0],[1,-36.0513,216,0]],[188,"ani_0",[-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93],[[4,-50,[1,"01CPb3J0lH3ImrjAAzkqID"]],[8,-51,[1,"adh/m48dZGxYgMpUD+VzMZ"],[5,0,0],[0,0,0]]],[0,"dcoGPONeZM7ZyMG6NSE714",1,0],[1,36.0513,-90,0],[1,-1,1,1]],[157,"bar",[-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108],[[4,-94,[1,"fbcS2s1K5CYLY6fEt5jSDE"]],[8,-95,[1,"34QfyptApJaLoseICl1Wdo"],[5,0,0],[0,0,0]]],[0,"27m3acznlFIaewe3kwvUMV",1,0],[3,0,0,0.0697564737441253,0.9975640502598242],[1,0,0,8]],[102,"bg",4,[-112,-113],[[147,1,0,false,-109,[1,"006lu55elO2KI36PrmTMX1"],[4,4278190132],2],[15,100,-110,[1,"30MV2LAj5PK5ytySC8j4wY"]],[2,-111,[1,"aeNBj3R59E3KyuF9KRVroU"],[5,1700,338]]],[0,"55nU84SNRIN6VKVYV5o0+0",1,0],[1,1800,35.00000433735633,0.0000012520318550812704],[1,1,1,1.06]],[119,"boss_coming_bar",4,[2,3],[[21,true,-114,[1,"73lfIrNy9KE73oS7XJ1+3O"],[87],88],[15,0,-115,[1,"8bHswPoeVIioe2hLWjauZP"]],[2,-116,[1,"bcjAq3UPZDwKTsTiYYspF3"],[5,0,0]]],[0,"d44iMdEhZCa7xxyT4dowk0",1,0],[1,-27.683,-29.661,0]],[77,"Node_1",1,[4],[[4,-117,[1,"60ccFH4dRPFY5O/hm6DaWN"]],[8,-118,[1,"10FoovTxhCv7uhOpynb71N"],[5,0,0],[0,0,0]]],[0,"caQJ14ojhJUqB99+SlwFuW",1,0]],[38,"bg0",5,[[147,1,0,false,-119,[1,"70GsTQJNRKh5SRtMLlI1kh"],[4,4278190080],0],[4,-120,[1,"22l6XP7K9IF5AGiqwk0P9L"]],[8,-121,[1,"92pLARmUBB/rXnKhyn5md1"],[5,1700,36.3],[0,0.49236070401197113,0.9538412462056627]]],[0,"dfhAUkICBJP6wTW6DAYcGk",1,0],[1,-11.723,167.82,0.503]],[38,"bg1",5,[[147,1,0,false,-122,[1,"f3sRh5a2NCy4NOjlPVEDVC"],[4,4278190080],1],[4,-123,[1,"24qo74mPtF+46D1qppCz9G"]],[8,-124,[1,"63pLnbeN5HbITwGhSD64GK"],[5,1700,36.3],[0,0.49236070401197113,0.9538412462056627]]],[0,"c5g5opRX5Ex53uroDxXLDZ",1,0],[1,-11.723,-138.506,-1.282]],[9,"WARNING_12",2,[[11,2,false,-125,[1,"8fGc7j2eRJwrsdY5fAEegd"],[4,4280953509],3],[4,-126,[1,"b4NPNmledMJ4g7CVq51bVc"]],[2,-127,[1,"3fNz5Pa35N/bY3lBgUXA2j"],[5,40,40]]],[0,"edu24zYM1FPKZhbGi8blNz",1,0],[1,98.7961,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0",2,[[11,2,false,-128,[1,"77ypgvW01NBrSM7XiOK88b"],[4,4280953509],4],[4,-129,[1,"fcpkUyAQxF3IRszosYclrX"]],[2,-130,[1,"3aFKWPg29L8bEkJ4WnQ38R"],[5,40,40]]],[0,"86wxuQC5xCQ43B2jP1wZUf",1,0],[1,137.7878,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0_0",2,[[11,2,false,-131,[1,"37bRsz2TpAPK70JSWis44n"],[4,4280953509],5],[4,-132,[1,"b7REtkq0tPZIAeu+NCkLVS"]],[2,-133,[1,"0ar/4gBXxP/73sdGLjsHb0"],[5,40,40]]],[0,"989Tgob4dBbom4ZGbuIylK",1,0],[1,176.7875,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0",2,[[11,2,false,-134,[1,"d4hamUy4dPkL1HKGHWajjh"],[4,4280953509],6],[4,-135,[1,"fbgwAEzgtP4IkUcxwKEivg"]],[2,-136,[1,"33cGABHh9G+ZxDH2pi8LsR"],[5,40,40]]],[0,"67cLxEJUpG0qjNN9xIg3m6",1,0],[1,215.788,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0",2,[[11,2,false,-137,[1,"bb4R0a96BPD7WXZof30mTL"],[4,4280953509],7],[4,-138,[1,"2dvsQUpntFuKf1jxyN3VK5"]],[2,-139,[1,"5cDa+2ZT1GHqzXacLofa5+"],[5,40,40]]],[0,"ddS6XusGVApbUxwdMCIjLs",1,0],[1,254.7878,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0",2,[[11,2,false,-140,[1,"18EMoM+DxGx4UGuWgx4uNG"],[4,4280953509],8],[4,-141,[1,"90YLAqt51M6oYlOzi2VYHl"]],[2,-142,[1,"bfY2gsORtPvZrpVIbStatH"],[5,40,40]]],[0,"c7wIgCOx1KOozZrMkgMMzr",1,0],[1,293.7876,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1",2,[[11,2,false,-143,[1,"8c8kxc5nBPD6R3QFtecpT0"],[4,4280953509],9],[4,-144,[1,"aarkM6pOVFbLIABTIcZrnA"]],[2,-145,[1,"7e4GFfWD1JYJgqpu9i+iR/"],[5,40,40]]],[0,"03UXNXseRDd4fgK6jQXNAL",1,0],[1,59.7956,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_1_0",2,[[11,2,false,-146,[1,"5eWiwSsTJNWZmNvKX/OKq/"],[4,4280953509],10],[4,-147,[1,"fbe0O8Q25DWrIqG5CPdrHM"]],[2,-148,[1,"8bJbTAuBZB1ryL1kwbzQNY"],[5,40,40]]],[0,"f6cy5wsBdJkL6onhx0V6r4",1,0],[1,20.7958,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0",2,[[11,2,false,-149,[1,"aeMg8vbo5NPYEgMIRhL0Y3"],[4,4280953509],11],[4,-150,[1,"3bstPvFyBCW5OJa0cL0Hwl"]],[2,-151,[1,"7eqUCiWx5O9rUaGUkuMR2O"],[5,40,40]]],[0,"b2Pq3Ab4BNq6JgPN3eTfKg",1,0],[1,-18.2047,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0",2,[[11,2,false,-152,[1,"4aMRkfn3VK4LgFLE/VKpnD"],[4,4280953509],12],[4,-153,[1,"68nTWffPhK5ak5lRoqsRlK"]],[2,-154,[1,"b8dfTxg0lF+4o0RqWNV5kh"],[5,40,40]]],[0,"4fhFAI0UZGI7+l2XBaFc8g",1,0],[1,-57.2045,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0",2,[[11,2,false,-155,[1,"51OB5xdXBMhInu13y0QDrM"],[4,4280953509],13],[4,-156,[1,"b2Ysz62iBL9oqRFEzlbjgY"]],[2,-157,[1,"42lHfGgUBCC6D5VSYRomYH"],[5,40,40]]],[0,"7bW43wJTZNZ6fsXtz/i2jf",1,0],[1,-96.2042,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0",2,[[11,2,false,-158,[1,"b2IYn2MS9BLqHrYgGzDg6U"],[4,4280953509],14],[4,-159,[1,"717s/N55FPxqGZP2hwoamg"]],[2,-160,[1,"cbfneOMHpKnKgWrKygHPPn"],[5,40,40]]],[0,"22TWRwB31JE4IAIGSQIFUb",1,0],[1,332.7885,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0",2,[[11,2,false,-161,[1,"baET3zf1JJzr1QooqlMuVL"],[4,4280953509],15],[4,-162,[1,"3dF3+v/gpA15w5B1q3uBZ6"]],[2,-163,[1,"85VO95II5JubUnaezZInux"],[5,40,40]]],[0,"8ewzgombFLpq1TZ41wHQ4W",1,0],[1,371.7879,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0",2,[[11,2,false,-164,[1,"46sBd+1RhOOZAi/kcT2AWa"],[4,4280953509],16],[4,-165,[1,"e7EmxSkGxDlKQr/tabR9+G"]],[2,-166,[1,"53R1w51VhLM5fdcaT+Toz0"],[5,40,40]]],[0,"b6Co9rp2hNX5RDgIn9GH6y",1,0],[1,410.7886,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_1",2,[[11,2,false,-167,[1,"6aemgQCdJNcLi4PMgwY+ng"],[4,4280953509],17],[4,-168,[1,"70MweK15BOx6ox4HYF+szs"]],[2,-169,[1,"60QlQlnbtDZYn3XOFtnnbd"],[5,40,40]]],[0,"fe0OqpqlRLiZmuirJdoq/X",1,0],[1,449.788,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_1",2,[[11,2,false,-170,[1,"f6Xnil7WRE+aUgyCPfLrAw"],[4,4280953509],18],[4,-171,[1,"a0RsjzENtKpYCo0RY4k25b"]],[2,-172,[1,"cfWJcgCf5EJIpvI99zAjWI"],[5,40,40]]],[0,"2dFmrVJgFEsqgZtzp8gWvB",1,0],[1,488.7877,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_1",2,[[11,2,false,-173,[1,"37aHKYyRFBha9qpThyO75w"],[4,4280953509],19],[4,-174,[1,"beSzxWYTNM/oFBH1O5xqni"]],[2,-175,[1,"fa2dAj3/5LiIeDfcXLIQS/"],[5,40,40]]],[0,"7cu0vtFYVBJajp9Vl4b7Ng",1,0],[1,527.7878,0.8924,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_1",2,[[11,2,false,-176,[1,"7dJxYRI3ZNGLLJ94y+emzx"],[4,4280953509],20],[4,-177,[1,"f8Qb7Ug+BJJ6JKgKjS0GJo"]],[2,-178,[1,"993HWu1VdJZ7ySl/otzZlP"],[5,40,40]]],[0,"91X+nXcnlFBJLdSOxNPHhe",1,0],[1,566.7872,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_1",2,[[11,2,false,-179,[1,"abaPpRh7lIB6aZgFjc8KCB"],[4,4280953509],21],[4,-180,[1,"f3o0FeMyNJj6xm5vy4v2mZ"]],[2,-181,[1,"abMT0qpspMeY4g9dFMYHpM"],[5,40,40]]],[0,"c246P3gwBC3KQiF1C5LuTS",1,0],[1,605.7875,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_1",2,[[11,2,false,-182,[1,"7a+xlH9nBHYK7w8ENTurWR"],[4,4280953509],22],[4,-183,[1,"08Ihob2CRBEI5hLOG/bu3Y"]],[2,-184,[1,"22kggeMuhOebgVFjK8g51v"],[5,40,40]]],[0,"93rqOd3oNEYaq51/+kKrpD",1,0],[1,644.7878,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_1",2,[[11,2,false,-185,[1,"53WXULyLlDrI5PTkdUOaMr"],[4,4280953509],23],[4,-186,[1,"959ZRGvZRESZaYepdSLD5P"]],[2,-187,[1,"dbWFDGbi1N+r+aiEokXCR9"],[5,40,40]]],[0,"89sTMmta5BJIW/e0mboSJw",1,0],[1,683.7894,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0",2,[[11,2,false,-188,[1,"0eTylOB35J26Ki/l37/vmy"],[4,4280953509],24],[4,-189,[1,"deSRs1ZmtGi7T/dXCxqdlz"]],[2,-190,[1,"26DTTWKZJDbo0jajczeg/S"],[5,40,40]]],[0,"13Q8fqP5BDvJKks55iQsu8",1,0],[1,722.7897,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_2",2,[[11,2,false,-191,[1,"dac8TgsuRMQ7LinCZQG6gZ"],[4,4280953509],25],[4,-192,[1,"c3IWU3509BJ5rFuiHRNmc3"]],[2,-193,[1,"ceyVyYGwxBcoa/X/J3LVUE"],[5,40,40]]],[0,"c6+OyIlpNO0KMCdsn81Zdo",1,0],[1,-135.2039,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_1_1",2,[[11,2,false,-194,[1,"f5HTQqfEtJfrIpaCgQygjE"],[4,4280953509],26],[4,-195,[1,"73tQZk+7tDOorc7uV20jrN"]],[2,-196,[1,"deSG5lKptCI74MmLNWeCEx"],[5,40,40]]],[0,"70arUGDFZAJrF3K1jkox8C",1,0],[1,-174.2084,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1",2,[[11,2,false,-197,[1,"09+1W9e9RM4b33L/hCHWVV"],[4,4280953509],27],[4,-198,[1,"fcC5SRtdNHJ5/tWgBXucoe"]],[2,-199,[1,"0c2KgaiSpBUp6RNxxvDVil"],[5,40,40]]],[0,"804+RUQPBDd6SxG9GBeXcj",1,0],[1,-213.2081,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1",2,[[11,2,false,-200,[1,"56faVNc4xKmYEUgh7ZkNoe"],[4,4280953509],28],[4,-201,[1,"394BWlZ+dDMJfiE54VqkFO"]],[2,-202,[1,"131TGdnnlG4o9ixLGAL5z3"],[5,40,40]]],[0,"9bcGFoM3tIP6FxKseOewOM",1,0],[1,-252.209,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_1",2,[[11,2,false,-203,[1,"9f63mw2aNMbIScsanKnc0r"],[4,4280953509],29],[4,-204,[1,"bdAN1nL8NPOZcTvhBuM7sI"]],[2,-205,[1,"ad+LG1l/1IJ4Rt521gk8Ga"],[5,40,40]]],[0,"72qfO2J4RJA4X9p4cAOw+a",1,0],[1,-291.205,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0_0",2,[[11,2,false,-206,[1,"08rIj8O3dIR4NMabm+2t7W"],[4,4280953509],30],[4,-207,[1,"38gqw/bnJA252warcsyPYc"]],[2,-208,[1,"0ae1kzOQFCe531EyZ8YRQO"],[5,40,40]]],[0,"a9Kt2yUntOqZfBPNOKh89B",1,0],[1,-329.2052,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_2_0",2,[[11,2,false,-209,[1,"aaRaVvR6tJM6r1zET5eHIi"],[4,4280953509],31],[4,-210,[1,"daQoH+LLBL0qqRNfj8gMmU"]],[2,-211,[1,"abz937viJKbqivaKsyBJsj"],[5,40,40]]],[0,"48fpuF3PVC6o5F2313PDwG",1,0],[1,-368.2067,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_1_1_0",2,[[11,2,false,-212,[1,"82cyxB62tJF45+OTvm5p5q"],[4,4280953509],32],[4,-213,[1,"58GD3kTbNHw7chXQUaTffw"]],[2,-214,[1,"5embt+vFRP+qV6jug2ETV+"],[5,40,40]]],[0,"9aLm8/a45Cr4TsJAeAiqJx",1,0],[1,-407.2091,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1_0",2,[[11,2,false,-215,[1,"52nRPtf0FD7q8xv2CjpZy1"],[4,4280953509],33],[4,-216,[1,"60vFyxXCxPUJZgGiwMwrZN"]],[2,-217,[1,"26suIAgZJAy6b2pC0ZKjld"],[5,40,40]]],[0,"134v0lEFVJjI0hKR+6UOhf",1,0],[1,-446.2094,0.8928,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1_0",2,[[11,2,false,-218,[1,"54/DS3SttGKp9E8mfxycIq"],[4,4280953509],34],[4,-219,[1,"7fKlJaHsBADLjF/cUxLvud"]],[2,-220,[1,"67r9uFm1lMW7DSm6vpbSPA"],[5,40,40]]],[0,"0c7viVdExP0qYAouhwuzeK",1,0],[1,-485.2069,0.8928,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_1_0",2,[[11,2,false,-221,[1,"07tp3H62pHnLyG3mxLHEJn"],[4,4280953509],35],[4,-222,[1,"20s88y7KhIU63IJK8Jp3pm"]],[2,-223,[1,"4asCCA7tZJ0avjbiP5uDaJ"],[5,40,40]]],[0,"cesudCGCtGtJqehEObL67A",1,0],[1,-524.2076,0.8931,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0_0_0",2,[[11,2,false,-224,[1,"c0u1dqO3lEYIpnPIKXq+aM"],[4,4280953509],36],[4,-225,[1,"b0/yWThLVAT5rOP6iykRN/"]],[2,-226,[1,"d67hNw18RG3K6fC2jLxrL0"],[5,40,40]]],[0,"96SuQymMBD6Yx6iC84rqHH",1,0],[1,-563.207,0.8931,0],[1,1,0.8,1]],[9,"WARNING_12_2_0_0",2,[[11,2,false,-227,[1,"0asWe+Hd5MjJ0uUgIsbB77"],[4,4280953509],37],[4,-228,[1,"57M9KO3gxIHZA+Pfj/QcE4"]],[2,-229,[1,"91JimKe2BLvKj+owi0FhII"],[5,40,40]]],[0,"b1uWiiOiNCq54UIbqQQ82G",1,0],[1,-602.2046,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_1_1_0_0",2,[[11,2,false,-230,[1,"c6SQiqpwpHsYfzsOj4Yd82"],[4,4280953509],38],[4,-231,[1,"52gynisxNH4JkZrblvaceM"]],[2,-232,[1,"6fYhINihtJm5wW2f398Zqn"],[5,40,40]]],[0,"df89R2GA1O9Iqdm6k5tfiV",1,0],[1,-641.204,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1_0_0",2,[[11,2,false,-233,[1,"b2LiKByr5JA5aWz/o3H9x/"],[4,4280953509],39],[4,-234,[1,"36IvssnxhIHJIHqhKinCLR"]],[2,-235,[1,"17b/TiI0hERp6b0+i8w0S1"],[5,40,40]]],[0,"34jmOQca1AIbAMQFVYqzUL",1,0],[1,-680.203,0.8931,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1_0_0",2,[[11,2,false,-236,[1,"b4gI2ZnL9LA52fXOxLEmf1"],[4,4280953509],40],[4,-237,[1,"a2wUquIOtOlrA5+NpmAAf3"]],[2,-238,[1,"f3o0GVIGdL2K+25+3w7Qjv"],[5,40,40]]],[0,"57DVACzcRNcYN0cJCA5L91",1,0],[1,-719.2028,0.8931,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0",2,[[11,2,false,-239,[1,"5et/l6OKNDXqFvMBNTYPX5"],[4,4280953509],41],[4,-240,[1,"bdAezcDI9AnLfv4cjcndP4"]],[2,-241,[1,"41mGQjRsBGMZwRAlvtKzid"],[5,40,40]]],[0,"d7nl1OqnlDEqvEYkm/SjEr",1,0],[1,761.8048,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0_0",2,[[11,2,false,-242,[1,"79d8yIP2JDIoHvBTZfc/Cd"],[4,4280953509],42],[4,-243,[1,"fdZ4kznl1FlokdGGzpT3dY"]],[2,-244,[1,"27XJX7Y41FdZybubkt8dGh"],[5,40,40]]],[0,"eauOXri/tLeY5qvp4lTH11",1,0],[1,800.8051,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0_0_0",2,[[11,2,false,-245,[1,"5aYqpT+49BrYjCcGWBwe+4"],[4,4280953509],43],[4,-246,[1,"efXAAAU65G2r7F0+bINoKt"]],[2,-247,[1,"4beAQpa/JJToWigJ/Ygunw"],[5,40,40]]],[0,"1d3oNx4ExGCLKwU5+hUXYB",1,0],[1,839.8043,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0_0_0_0",2,[[11,2,false,-248,[1,"32FnkYRblOmJ6QF5dKqHFh"],[4,4280953509],44],[4,-249,[1,"1bA1NnHDZIaoYT4YMAdBpx"]],[2,-250,[1,"e48xpRiaNPOrnWf/60wMDG"],[5,40,40]]],[0,"74g5hDIldDfZcFTljNc061",1,0],[1,878.8038,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12",3,[[11,2,false,-251,[1,"06YLshyqZJuJNF3o5ccdZW"],[4,4280953509],45],[4,-252,[1,"46cbm4dORP8o2pJtiI7N3C"]],[2,-253,[1,"b8izMYw+1LA6N0RoTgUUG/"],[5,40,40]]],[0,"81wkSFEsFIfYy/EZT+hLCN",1,0],[1,98.7961,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_0",3,[[11,2,false,-254,[1,"eaB6vEBepAqJN0R2AUp+Gd"],[4,4280953509],46],[4,-255,[1,"36BYhg2wBCD4U3Opeb2whl"]],[2,-256,[1,"f14LclJGRLvKZXUsYiO2Bp"],[5,40,40]]],[0,"6bOcMcsAFM4bWWD5r5tHZd",1,0],[1,137.7877,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_0_0",3,[[11,2,false,-257,[1,"d99NSkDR9BepsomZRTS+Bg"],[4,4280953509],47],[4,-258,[1,"f0n7K9aRxPxrU2FxHI9BHZ"]],[2,-259,[1,"6dO5hbFOlBxIc2Um9qLpTe"],[5,40,40]]],[0,"fdnKPqjzlPzIcqsUkWRDce",1,0],[1,176.7873,0.8926,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0",3,[[11,2,false,-260,[1,"87zJX0fQ9Gb7FAcbyZI93j"],[4,4280953509],48],[4,-261,[1,"ddbduTBXJFf4Hx9iTAo0Lm"]],[2,-262,[1,"13uTbsnx1GeI80PKLt0PAg"],[5,40,40]]],[0,"e6QWcpd89HH49y5XtQLfO9",1,0],[1,215.7878,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0",3,[[11,2,false,-263,[1,"52oIX2DRhFwpXPb6sHzrez"],[4,4280953509],49],[4,-264,[1,"ea4C0SaJFAYq1cHN1ONRaR"]],[2,-265,[1,"7bn4Na2z1B1LqpI7OcmsR6"],[5,40,40]]],[0,"b9crhMzwxN6pWT7bC0e9VL",1,0],[1,254.7878,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0",3,[[11,2,false,-266,[1,"43NaGby7FC8J3RqWPYvc2X"],[4,4280953509],50],[4,-267,[1,"435meH0yNJJpBNXsdcBPyW"]],[2,-268,[1,"19XWOuAiFKcpxZcQ5qNCjy"],[5,40,40]]],[0,"3czHy/pvRH97CDBM7ELry0",1,0],[1,293.7874,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_1",3,[[11,2,false,-269,[1,"db4k085+hP/ZhrCcqHVtYI"],[4,4280953509],51],[4,-270,[1,"73Tu18XHpFg5L5Dbzl51Uq"]],[2,-271,[1,"13Mf2h2OFG9IEiJ8jJck+C"],[5,40,40]]],[0,"45G5ABpTtCLbjtAgHxaVXM",1,0],[1,59.7958,0.8925,0],[1,1,0.8,1]],[9,"WARNING_12_1_0",3,[[11,2,false,-272,[1,"acHelWX49LdoUXWqzKkG5b"],[4,4280953509],52],[4,-273,[1,"02DbItlPFJYoXv9h2/Q9St"]],[2,-274,[1,"22oCaNzbpBxLT90HWtMrHK"],[5,40,40]]],[0,"58jxfeUupEQKSR2bAt4npN",1,0],[1,20.796,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0",3,[[11,2,false,-275,[1,"91+DzjlCRBz4CMxNxeWG59"],[4,4280953509],53],[4,-276,[1,"afV4WjDOBEF5/oXEfv+vwX"]],[2,-277,[1,"24G+fGOTNOUrYJh0ty/OWV"],[5,40,40]]],[0,"b1fEuX+k1B6KC3vGLXpp7B",1,0],[1,-18.2047,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0",3,[[11,2,false,-278,[1,"02K3XFko9LvZ8BKhgmyFGZ"],[4,4280953509],54],[4,-279,[1,"6aXpffPhBJM6P807P6c1bp"]],[2,-280,[1,"83PtFojb1MuquuDELKIC5/"],[5,40,40]]],[0,"65aqm4dqlP3ZAx3c5duInc",1,0],[1,-57.2045,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0",3,[[11,2,false,-281,[1,"73yBKdCwpPNbZ/AY5LEp69"],[4,4280953509],55],[4,-282,[1,"22fD5CHT5AU7NHKY5dztkY"]],[2,-283,[1,"acgCXCaltJ7r1MFacai+wT"],[5,40,40]]],[0,"06Dh5HGKlFEbeYEyRnrEa7",1,0],[1,-96.2042,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0",3,[[11,2,false,-284,[1,"7bKx2rIalCDJI3wFipvUVa"],[4,4280953509],56],[4,-285,[1,"deQ5TorpNLvZI+az30VaI4"]],[2,-286,[1,"858be8RGVGBawddUjQMGW8"],[5,40,40]]],[0,"f3wcin13VG6r9x7nm883mO",1,0],[1,332.788,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0",3,[[11,2,false,-287,[1,"d1L9YCijhKw4QZgH+MGImc"],[4,4280953509],57],[4,-288,[1,"8bl96VffZN74T86F+Xyzrg"]],[2,-289,[1,"9fd85Hn49HaKDDfZOPv3vW"],[5,40,40]]],[0,"96rpfj1olItqFkESGA/4qI",1,0],[1,371.788,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0",3,[[11,2,false,-290,[1,"88b0eIi91E375cJpvSR3Pn"],[4,4280953509],58],[4,-291,[1,"34C3epnT5Hz7SUOVfMYh9h"]],[2,-292,[1,"05Sz7NrodA46A/VI2khUna"],[5,40,40]]],[0,"c4mJa5VidLuZYrIVr5R10t",1,0],[1,410.7887,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_1",3,[[11,2,false,-293,[1,"f0sZ4hU+dOaYKpR6xlH+aH"],[4,4280953509],59],[4,-294,[1,"ba269lUc1BSpmjHfs9woYv"]],[2,-295,[1,"aaVzopyIRLqpX4aPqHG+TD"],[5,40,40]]],[0,"2bNLLJRylE3rlVHNfgZ7E1",1,0],[1,449.7879,0.8926,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_1",3,[[11,2,false,-296,[1,"f4FShbtAFK+oDvJwPM9ZAv"],[4,4280953509],60],[4,-297,[1,"09HYPzBw9BubEIlRN2vxO8"]],[2,-298,[1,"5eYi1wFixBXb7jSWzt+0wy"],[5,40,40]]],[0,"ff574Jp0VJTK6wbr1LBvGh",1,0],[1,488.788,0.8926,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_1",3,[[11,2,false,-299,[1,"dc9ifLenpJtqrS0GgKWREd"],[4,4280953509],61],[4,-300,[1,"d3BV+ORKhA14eigUkX2DyL"]],[2,-301,[1,"8cRUJkYRlJMIUDNKNttU4Q"],[5,40,40]]],[0,"3adh26Q7lOELDSezvLeUoM",1,0],[1,527.7882,0.8926,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_1",3,[[11,2,false,-302,[1,"88zhf7Z0hPFLIeXA/2Bx9k"],[4,4280953509],62],[4,-303,[1,"d1gCxObXRGxoIzxIVcrYw8"]],[2,-304,[1,"f4dKrxfS5P3YIF7hkDc5JX"],[5,40,40]]],[0,"54bwjk6q9EKImfwR+XgNI6",1,0],[1,566.7877,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_1",3,[[11,2,false,-305,[1,"8dQogHV2BBooGHtEYLEXS+"],[4,4280953509],63],[4,-306,[1,"bbnWHLkp5NaopfQAKnhb/K"]],[2,-307,[1,"271FyPhUpEsrOswx3/ImnT"],[5,40,40]]],[0,"4cc0GMTepKEKTr3H+z/UUd",1,0],[1,605.7883,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_1",3,[[11,2,false,-308,[1,"0875Pu3sBFf6/Suse4LFZp"],[4,4280953509],64],[4,-309,[1,"d2P05YPbxN8K8IzE5oamXk"]],[2,-310,[1,"ceC/o0kzpKcoG+Efn4WNVO"],[5,40,40]]],[0,"0aossqBaFAw7VqqoGIu5g7",1,0],[1,644.7885,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_1",3,[[11,2,false,-311,[1,"34Jcf/RfxCoKPP+q9/TzM1"],[4,4280953509],65],[4,-312,[1,"03/LFc9/9ApJTDlGUWNORy"]],[2,-313,[1,"11h417aZ1JebQGkXtb+dqY"],[5,40,40]]],[0,"cc5pClOIJFm7PAqmYfa0oE",1,0],[1,683.79,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0",3,[[11,2,false,-314,[1,"1ebezN4y9AxqcCZAjohkOf"],[4,4280953509],66],[4,-315,[1,"a12pAww5RNPLl1rj9Oekyf"]],[2,-316,[1,"3fuYA/rURNmIN/1Jj6TLP3"],[5,40,40]]],[0,"96VYfPXT9FwYVEW7Djuf7C",1,0],[1,722.7898,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_2",3,[[11,2,false,-317,[1,"82Y6M+PFNKRpgWrvi6agrw"],[4,4280953509],67],[4,-318,[1,"66gOZrclZNbZn6bAndj+91"]],[2,-319,[1,"c9TZBGEm9DQJrEP63PCH9N"],[5,40,40]]],[0,"60ytw5YC1JhJr32qKlm9/B",1,0],[1,-135.2038,0.8926,0],[1,1,0.8,1]],[9,"WARNING_12_1_1",3,[[11,2,false,-320,[1,"27Wt3SeZ1ACa1JoG/SNxtE"],[4,4280953509],68],[4,-321,[1,"b2kPiJdqNNaoC3g01CtLB2"]],[2,-322,[1,"43bggB7mhCOp1/1/qhRo6b"],[5,40,40]]],[0,"872tl4nfBFr4ORsXnkufmJ",1,0],[1,-174.2085,0.8927,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1",3,[[11,2,false,-323,[1,"c3cRf2wZNOt415BsuBz/8/"],[4,4280953509],69],[4,-324,[1,"04ZTZXFZlJLbkiGyW/Wv23"]],[2,-325,[1,"7bSjPXES9LtJvC2BHkjiQj"],[5,40,40]]],[0,"84B2Hbj0dBoaItdx6NsPOP",1,0],[1,-213.2084,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1",3,[[11,2,false,-326,[1,"79kI+ccdVMLpvJsIPBdx+I"],[4,4280953509],70],[4,-327,[1,"82hMJJCgFB86/2qXqc4oSB"]],[2,-328,[1,"27YQn1AYFM96/6JlNQ0r2N"],[5,40,40]]],[0,"8awv6ke7ZDq6S8VdeT3qeX",1,0],[1,-252.2093,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_1",3,[[11,2,false,-329,[1,"57mV5Dc+9DMqQt66+6cpE4"],[4,4280953509],71],[4,-330,[1,"dba749H7JB9I9BlCFHi0VV"]],[2,-331,[1,"ef97lBbhtOXZzAFiPMuoBX"],[5,40,40]]],[0,"a9gILtOA1DR7cIV7w7Rz3Z",1,0],[1,-291.2051,0.8932,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0_0",3,[[11,2,false,-332,[1,"e4ZkUiyfdJ25/4pBoXPyEI"],[4,4280953509],72],[4,-333,[1,"71zYW1PTNAb61DNoc8g2Lk"]],[2,-334,[1,"07fINL6DpEHYJ32DLjUynz"],[5,40,40]]],[0,"655dti5SBOsJhgJwoKwIRh",1,0],[1,-330.2054,0.8933,0],[1,1,0.8,1]],[9,"WARNING_12_2_0",3,[[11,2,false,-335,[1,"3bmRrYlnpD7r0whagDOfIb"],[4,4280953509],73],[4,-336,[1,"87Fvb9Xz9H+JUeSIJateel"]],[2,-337,[1,"f92pfXwmlJpaNadi1dD3AL"],[5,40,40]]],[0,"74ImIVO3NBHrv7m+3PXLUG",1,0],[1,-369.2073,0.8928,0],[1,1,0.8,1]],[9,"WARNING_12_1_1_0",3,[[11,2,false,-338,[1,"f0mleSNe5Peonl4CvK+t0F"],[4,4280953509],74],[4,-339,[1,"54YnBWRnNLiZTeVkEJxtMY"]],[2,-340,[1,"2eTVV/kyNClopREV3kf83r"],[5,40,40]]],[0,"44P0Jg2blIk5s7Sk7Racll",1,0],[1,-408.2092,0.8929,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1_0",3,[[11,2,false,-341,[1,"fcOXNFpZVHlIe+07+O8Z/6"],[4,4280953509],75],[4,-342,[1,"cc5Rib9DdOmI4omdRa6XH7"]],[2,-343,[1,"81w382ahREHI7MO6e4pxgL"],[5,40,40]]],[0,"94tKMeCLtH1rg6GvzGooTh",1,0],[1,-447.2095,0.8932,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1_0",3,[[11,2,false,-344,[1,"29BljWZ9RDyqDMplW7G2FK"],[4,4280953509],76],[4,-345,[1,"3cBXHqpQZAsobIYneQta0i"]],[2,-346,[1,"8cgAyz/wxD6rFnjy2IWnEN"],[5,40,40]]],[0,"bdjW/55G5NQqkkUvSsu7dV",1,0],[1,-486.2075,0.8932,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_1_0",3,[[11,2,false,-347,[1,"d5GpDE/ONLuoQJ4r7hfiDT"],[4,4280953509],77],[4,-348,[1,"3enGqE1YNBqJVhXGIEc2S9"]],[2,-349,[1,"943nKiTvZIELqKteyZBvSW"],[5,40,40]]],[0,"beZLohMO5GnaS1+L4HaRxb",1,0],[1,-525.2078,0.8935,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0_0_0",3,[[11,2,false,-350,[1,"4fWTe+2CNNbo32654zjCC8"],[4,4280953509],78],[4,-351,[1,"c1xZl9McVDwKfLOzQkWbuU"]],[2,-352,[1,"f5Tz3kEypJjoQLacIj29Ew"],[5,40,40]]],[0,"dcwnsF+2NHJKonK9WczWAF",1,0],[1,-564.2073,0.8935,0],[1,1,0.8,1]],[9,"WARNING_12_2_0_0",3,[[11,2,false,-353,[1,"e11qjmrsRDBq1w6FYvUUyj"],[4,4280953509],79],[4,-354,[1,"769eWBmxBPdqAifZxgOelg"]],[2,-355,[1,"2bBe39YnpE47g8ul8IKenN"],[5,40,40]]],[0,"f1JYtIAiFLmate/eeNmXUE",1,0],[1,-603.205,0.8933,0],[1,1,0.8,1]],[9,"WARNING_12_1_1_0_0",3,[[11,2,false,-356,[1,"1egnT/DD5OsYuGdn1snQKG"],[4,4280953509],80],[4,-357,[1,"526ZUTu0dAd7R5T23BKgvj"]],[2,-358,[1,"39dLg4/w5Jrba30/fHz1Nq"],[5,40,40]]],[0,"b5wijX4pZCb7k76/T6A/oN",1,0],[1,-642.2043,0.8933,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_1_0_0",3,[[11,2,false,-359,[1,"adtHmd+ChMr4xGTETZyURD"],[4,4280953509],81],[4,-360,[1,"82AtgJa0dB4oSGaLzlsmyX"]],[2,-361,[1,"2eEc7yu4NB1oDMz3eOuB8A"],[5,40,40]]],[0,"30PB/ar3pGt6npG+s8RhHE",1,0],[1,-681.2039,0.8934,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_1_0_0",3,[[11,2,false,-362,[1,"5enWXw3mRAHbpQyZ1rXI/P"],[4,4280953509],82],[4,-363,[1,"12MOl4LS1HuKT51XwxP1X1"]],[2,-364,[1,"dfFkaHx5lCmLAe/B9Q7Bz0"],[5,40,40]]],[0,"94iR2AeP1Or72c75lvsPB8",1,0],[1,-720.2036,0.8935,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_1_0_0",3,[[11,2,false,-365,[1,"0embyAA4VHBr2IUWO0qU9R"],[4,4280953509],83],[4,-366,[1,"21iFcEzUdDbLgO3wWNlJWy"]],[2,-367,[1,"5ctWAkGMVF67s59AdeFoaC"],[5,40,40]]],[0,"8dmU0hVRhFNpegSIbO15FP",1,0],[1,-759.2128,0.8936,0],[1,1,0.8,1]],[9,"WARNING_12_1_0_0_0_0_0_0_0",3,[[11,2,false,-368,[1,"a7KQyGMaZPjIqf58N29u9t"],[4,4280953509],84],[4,-369,[1,"47aFJm9AtP6bwqBoKKdL7D"]],[2,-370,[1,"3cwhukUWRGL7dvMNSRKWby"],[5,40,40]]],[0,"e3EKDRTexPAak9ITxslqpC",1,0],[1,-798.215,0.8937,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0",3,[[11,2,false,-371,[1,"bcCbFGa25PUKNHebpebhEt"],[4,4280953509],85],[4,-372,[1,"54rbHNGaNCbYlpGZNc8WV2"]],[2,-373,[1,"f1sLboOLtMLYwyV3GFpXG5"],[5,40,40]]],[0,"8bd1LdpdNEa63rWHmlGaOV",1,0],[1,761.8054,0.893,0],[1,1,0.8,1]],[9,"WARNING_12_0_0_0_0_0_0_0_0_0_0_0",3,[[11,2,false,-374,[1,"8bh/ilsutJKJyE4MYGsuU1"],[4,4280953509],86],[4,-375,[1,"32LvC6sRROt47S01qdbM0C"]],[2,-376,[1,"04bqPZR4FBWL++ShqeHnA7"],[5,40,40]]],[0,"5aS3R/+kpGDrOyJwt0loNr",1,0],[1,800.8048,0.8932,0],[1,1,0.8,1]],[49,"ef",false,4,[[34,2,false,-377,[1,"39bRYMcTdJVIc1AqkI5emI"],89],[4,-378,[1,"8bqoqUa+1DR4TAUfv+lbtz"]],[2,-379,[1,"13pzdrWXVJj47zdUGQZJV8"],[5,176,176]]],[0,"5aLrZcAgBKybqy6Nmn3FPV",1,0],[1,-413.6034,46.1535,0],[3,0.08517096347165767,0.08517096347165767,-0.0073074924648137566,0.9926925075351862],[1,3,3,1],[1,9.8077,9.8077,0]],[49,"ef_1",false,4,[[13,1,2,false,-380,[1,"88bret//lO/LYdpSSSpTpE"],[4,4278252287],90,91],[4,-381,[1,"20nthX1xdP6Kj0QU1e3o63"]],[2,-382,[1,"9cbR8X+VlI+Zhbt/vKagfh"],[5,150,150]]],[0,"cfHpBC2vdL+oSseQWuiasx",1,0],[1,-400.4327,38.1297,0],[3,0.06755257287814408,0.06755257287814408,-0.004584366518835991,0.995415633481164],[1,2,2,1],[1,7.7647,7.7647,0]],[38,"word1",4,[[34,2,false,-383,[1,"04xucoPt5FKLjXLAhyGd6E"],92],[15,0,-384,[1,"15DiF47RdAQpnzFIyZ06J+"]],[8,-385,[1,"ebJOq7CYxDvIaiWVo6yUej"],[5,246,96],[0,1,0.5]]],[0,"8bMHawIXVFtp4lz5vFSty7",1,0],[1,124.8214,140,0]],[38,"word2",4,[[34,2,false,-386,[1,"68udtNNUxJMpOWrQs3Gwnm"],93],[15,0,-387,[1,"10BXnetIpGjrz5IBmLnnD4"]],[8,-388,[1,"baSsMjweZCl7h6IcNoS150"],[5,200,110],[0,0,0.5]]],[0,"efZcuXbW9P7KeiOot98Diq",1,0],[1,109.6429,140,0]],[38,"word3",4,[[34,2,false,-389,[1,"31zPEEo95M7ZH0iJX7s/lB"],94],[15,0,-390,[1,"22BG/A5fFCorhA3cA9xV0s"]],[2,-391,[1,"74Vl8SMz5BhbDOkm7HVFvq"],[5,196,103]]],[0,"9fQ7ltc+pOlpH0sKQn36Ia",1,0],[1,-156.981,-12.0392,0]],[9,"word4",4,[[115,2,-392,[1,"e4SU1JiqdJDYnfEe0H0Iok"],95],[15,0,-393,[1,"23uzuEJA1E5IbJVBM6OIge"]],[8,-394,[1,"08Sd2bm8RBG7ddAOZyanrp"],[5,102,104],[0,0,0.5]]],[0,"dfSoDUli9CGpFR1swmzIrz",1,0],[1,282.96059,-6.37293,0],[1,1.0571,1.0571,1.0571]],[9,"OddsNum",4,[[219,"200",0,0,180,180,209,false,0,-395,[1,"ecNcf4oIpBApu4Psjsmviv"],96],[15,0,-396,[1,"216A/yfplApbK3XCKMrKsb"]],[2,-397,[1,"9361q+sXRBMLftF9R8I9hm"],[5,346.38,209]]],[0,"47HLiyEphHT6rq755gM3Ew",1,0],[1,112.016,5,0],[1,1.0571,1.0571,1]],[38,"bossBG",4,[[68,2,false,-398,[1,"04XWQPz3lIpYP8m0seagMN"],97,98],[15,0,-399,[1,"e8dJVgJDZF7rjPoSmwhGHk"]],[2,-400,[1,"46HuWquiBOAZnMpgaRsbmf"],[5,245,245]]],[0,"e7Uc3G7MhDurjwAs7re39G",1,0],[1,-427.7551,50,0]],[38,"Boss_Sprite",4,[[34,2,false,-401,[1,"fds/uRVDVBX5nMQjn98YVF"],99],[15,0,-402,[1,"5fS4vjpt5Beo0onKMoDRu6"]],[2,-403,[1,"eb0Asswa9DOJ0GB/LqM2Bu"],[5,230,229]]],[0,"ceGgbOAX9PTr6FSARq5O1e",1,0],[1,-404.5581,85,0]],[9,"FrameEF02_3",4,[[39,1,2,false,-404,[1,"d01LWPGXJJI77kV30SF3jq"],100,101],[15,0,-405,[1,"faNSLmKrVHcLx8MuixvFv9"]],[2,-406,[1,"989QyEqlJB94D7zBZq+kO6"],[5,27,27]]],[0,"baKICig0lNf7gTMn4uAeh+",1,0],[1,115.7093,-7.6231,0],[1,100,50,1]],[9,"Sprite_479",4,[[39,1,2,false,-407,[1,"33TouRagxMP4zR9lmUCpKl"],102,103],[15,0,-408,[1,"d0X+IeknFETImJ7DzHDx/8"]],[2,-409,[1,"68sQEQuzNKsrT2e7SUem+f"],[5,129,27]]],[0,"32XQUMGDJOQY5llflVPbHH",1,0],[1,73,-17,0],[1,6.9479,14,1]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,7,0,0,2,0,0,2,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-7,16,0,-8,17,0,-9,18,0,-10,19,0,-11,20,0,-12,21,0,-13,22,0,-14,23,0,-15,24,0,-16,25,0,-17,26,0,-18,27,0,-19,28,0,-20,29,0,-21,30,0,-22,31,0,-23,32,0,-24,33,0,-25,34,0,-26,35,0,-27,36,0,-28,37,0,-29,38,0,-30,39,0,-31,40,0,-32,41,0,-33,42,0,-34,43,0,-35,44,0,-36,45,0,-37,46,0,-38,47,0,-39,48,0,-40,49,0,-41,50,0,-42,51,0,0,3,0,0,3,0,-1,52,0,-2,53,0,-3,54,0,-4,55,0,-5,56,0,-6,57,0,-7,58,0,-8,59,0,-9,60,0,-10,61,0,-11,62,0,-12,63,0,-13,64,0,-14,65,0,-15,66,0,-16,67,0,-17,68,0,-18,69,0,-19,70,0,-20,71,0,-21,72,0,-22,73,0,-23,74,0,-24,75,0,-25,76,0,-26,77,0,-27,78,0,-28,79,0,-29,80,0,-30,81,0,-31,82,0,-32,83,0,-33,84,0,-34,85,0,-35,86,0,-36,87,0,-37,88,0,-38,89,0,-39,90,0,-40,91,0,-41,92,0,-42,93,0,0,4,0,0,4,0,-1,5,0,-2,6,0,-3,94,0,-4,95,0,-5,96,0,-6,97,0,-7,98,0,-8,99,0,-9,100,0,-10,101,0,-11,102,0,-12,103,0,-13,104,0,0,5,0,0,5,0,0,5,0,-1,8,0,-2,9,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,0,47,0,0,47,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,0,55,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,59,0,0,59,0,0,60,0,0,60,0,0,60,0,0,61,0,0,61,0,0,61,0,0,62,0,0,62,0,0,62,0,0,63,0,0,63,0,0,63,0,0,64,0,0,64,0,0,64,0,0,65,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,0,72,0,0,72,0,0,73,0,0,73,0,0,73,0,0,74,0,0,74,0,0,74,0,0,75,0,0,75,0,0,75,0,0,76,0,0,76,0,0,76,0,0,77,0,0,77,0,0,77,0,0,78,0,0,78,0,0,78,0,0,79,0,0,79,0,0,79,0,0,80,0,0,80,0,0,80,0,0,81,0,0,81,0,0,81,0,0,82,0,0,82,0,0,82,0,0,83,0,0,83,0,0,83,0,0,84,0,0,84,0,0,84,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,0,86,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,0,89,0,0,90,0,0,90,0,0,90,0,0,91,0,0,91,0,0,91,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,95,0,0,96,0,0,96,0,0,96,0,0,97,0,0,97,0,0,97,0,0,98,0,0,98,0,0,98,0,0,99,0,0,99,0,0,99,0,0,100,0,0,100,0,0,100,0,0,101,0,0,101,0,0,101,0,0,102,0,0,102,0,0,102,0,0,103,0,0,103,0,0,103,0,0,104,0,0,104,0,0,104,0,9,1,2,1,6,3,1,6,4,1,7,409],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,-1,7,2,3,2,2,2,2,2,15,3,2,2,3,2,3,2,-1,7],[72,72,72,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,315,1,316,317,318,319,320,321,322,323,324,1,325,1,326,149,149]],[[[26,"Axe_Model","3",[{"priority":129,"rasterizerState":{"cullMode":1},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[46,10]],[[{"name":"White","rect":{"x":285,"y":955,"width":16,"height":16},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":16},"rotated":false,"capInsets":[2,2,2,2],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Img_LightDot_Blur","rect":{"x":625,"y":96,"width":30,"height":30},"offset":{"x":-1,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"fmt":"0_4_7@93","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["433HVWiv1MvJ3Uq5atZ2Ge"]}],[1],0,[],[],[]],[[{"name":"UI_Item_LV3_1","rect":{"x":4,"y":4,"width":224,"height":225},"offset":{"x":1,"y":-2},"originalSize":{"width":230,"height":229},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-112,-112.5,0,112,-112.5,0,-112,112.5,0,112,112.5,0],"indexes":[0,1,2,2,1,3],"uv":[4,225,228,225,4,0,228,0],"nuv":[0.017391304347826087,0,0.991304347826087,0,0.017391304347826087,0.982532751091703,0.991304347826087,0.982532751091703],"minPos":{"x":-112,"y":-112.5,"z":0},"maxPos":{"x":112,"y":112.5,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[327]],[[[31,"Giant_Water",".mp3",2.377143],-1],0,0,[],[],[]],[[{"name":"archer_btn_bet_add","rect":{"x":156,"y":588,"width":59,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":59,"height":60},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"roll_light0011","rect":{"x":182,"y":236,"width":71,"height":45},"offset":{"x":14.5,"y":27.5},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["45CekgLTJH7o1v4N2qd5Ar"]}],[1],0,[],[],[]],[[[18,".bin",2763949971,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.9643665552139282,-0.8595052361488342,-9.130283729064104e-7],"maxPosition",8,[1,0.9643665552139282,0.8595052361488342,-8.000003504093911e-7]]],-1],0,0,[],[],[]],[[[19],[32,"s1_08",[-2],[0,"f6qvvN9FhalquNRXoQ24yO",-1,0]],[27,"Plane020",1,[[30,-3,[1,"38kmikC69R+pveM+QZ/shb"],[0],[7],1]],[0,"d2dSexPy9ecqDiTCMXqanv",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[328,128]],[[{"base":"2,2,0,0,0,0","mipmaps":["46BKQUnitJ2ovHZ7jyEvy6@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[150,150,4]],[[[99,"Petrification_MagicLight",2],[47,"Petrification_MagicLight",[-3],[[40,-2,[1,"e9VntD2rpGBYSCy591WFok"],[3],4]],[0,"494CpBCTlCt4PK41CYAm5T",-1,0]],[200,"Dummy_Root",[[10,"Dummy_Point08",-4,[0,"b1RyZY3FhO16UyMp1Y0HOw",1,0],[1,0.20117998123168945,0.6602775454521179,-2.2697525024414062]],[79,"Dummy_floor01",-5,[0,"1fyvupeJxHDpIGhfQzEONY",1,0],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[79,"Dummy_floor02",-6,[0,"20SwkDb4FLtqi3oU1pRuar",1,0],[1,0.5516632795333862,0.5516632795333862,0.5516632795333862]],[79,"Dummy_Circle",-7,[0,"61CSmbVEFCk7IibG3SfuQe",1,0],[1,1,1,0.2977459132671356]],[79,"Dummy_Circle02",-8,[0,"46IYC66OdCO5pNt6UvYAnK",1,0],[1,1,1,0.28946611285209656]],[55,"Dummy_Circle03",-9,[0,"62XdlEPotPALproFRvIU2t",1,0]],[53,"Dummy_Point01",-10,[0,"eetk1VcTRFwKHgMIe3JasZ",1,0],[1,0.7864680290222168,-0.8531680107116699,-1.187727689743042],[1,0.4755224585533142,0.4755224585533142,0.4755224585533142]],[10,"Dummy_Point02",-11,[0,"4eeAyr3ztGWo8oTMQyU96y",1,0],[1,-1.108907699584961,-0.7674927115440369,-1.491006851196289]],[10,"Dummy_Point03",-12,[0,"c5zfn2jbdOTY4jtVEHnsTU",1,0],[1,1.2173337936401367,-2.0456507205963135,-1.9255261421203613]],[53,"Dummy_Point04",-13,[0,"4dKfXlU9hMwqF+PXLwd9E4",1,0],[1,-1.7891664505004883,-0.6040046215057373,-1.3890291452407837],[1,1,1,0.6123722195625305]],[10,"Dummy_Point05",-14,[0,"755EYcpctBPbcoGTMf85AL",1,0],[1,1.2290339469909668,0.34297364950180054,-2.0524373054504395]],[10,"Dummy_Point06",-15,[0,"5czd/pL5JKDpkjMzRCyxAo",1,0],[1,0.450685977935791,-0.4535011351108551,-2.364563465118408]],[10,"Dummy_Point07",-16,[0,"9fDlabaEJA1bwqlK4h7NlZ",1,0],[1,-0.6587028503417969,0.8387623429298401,-2.080812931060791]],[10,"Dummy_Point09",-17,[0,"0aoMOyKzVPa7V8nS8OBgmE",1,0],[1,-0.22737884521484375,-1.4907286167144775,-1.9085965156555176]],[10,"Dummy_Point10",-18,[0,"c5ugbttbhH4LOcARoBbWjq",1,0],[1,0.12270355224609375,1.3433730602264404,-1.9426894187927246]],[10,"Dummy_Smoke01",-19,[0,"b7/qZJmMJLPJbyLlFPkPSV",1,0],[1,-0.31920480728149414,-0.07571756839752197,0]],[10,"Dummy_Smoke02",-20,[0,"d8M3D2O09I0b52dg1YmxbM",1,0],[1,0.3638153076171875,0.7897380590438843,0]],[53,"Dummy_Smoke03",-21,[0,"fa+X4oPNZGhpSjcy5G/DTU",1,0],[1,0.22771072387695312,0.3502238988876343,0],[1,0.6828734874725342,0.6828734874725342,0.6828734874725342]],[53,"Dummy_Smoke04",-22,[0,"21nMD79PdCJYy4pyoKbUUz",1,0],[1,-0.6131057739257812,1.192104697227478,0],[1,0.7139825820922852,0.7139825820922852,1]],[53,"Dummy_Smoke05",-23,[0,"6faPxt4N5D14fe+9+8LB5T",1,0],[1,-0.07251453399658203,0.17154979705810547,0],[1,0.8058562278747559,0.8058562278747559,1]]],[0,"cax4QQRcZI0YHUMBn/V4Ap",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[189,"RootNode",1,[-27,2],[[225,true,-24,[1,"88B32aoORIypek/ANDv7vU"],[1],2],[70,true,-26,[1,"aeJ0XVL3RAk6FET7z6bBs5"],[-25]]],[0,"8a+/MqZu5La7k9TJpJjMXw",1,0],[1,30,30,30]],[133,"Pertrifation",3,[-28],[0,"28CLknGN9AmqDgK6xrFX6R",1,0],[1,0,0.026889078319072723,-2.9279194624365346e-9],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[171,0,4,[1,"34FR9csC9KlqgNAisPDdkM"],[0],[7],3]],0,[0,4,1,0,0,1,0,-1,3,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,0,3,0,-1,5,0,0,3,0,-1,4,0,-1,5,0,9,1,2,1,3,28],[0,0,0,0,0,5,5],[-1,-1,7,-1,7,6,13],[329,49,49,151,151,152,153]],[[[33,"SmallCoin"],[47,"SmallCoin",[-3],[[21,true,-2,[1,"d0V9FGxyNBfoznLpIJJ4pd"],[2],3]],[0,"0eYlTC3xVG3ZrvTp8+btxS",-1,0]],[190,"RootNode",1,[-4],[0,"f5j4f6l8RHxo4WxitczuIx",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,15,15,15],[1,-90,0,0]],[60,"Cylinder001",2,[[74,1,0,-5,[1,"78RNeMTeVKK7lO0/AREdlE"],[0],[7],1]],[0,"b6Jrh4gOlDrYRisdfMXVow",1,0],[1,0.015940463170409203,0.002730138599872589,1.5235717296600342],[3,-5.553603683285775e-8,0.7071067811865455,0.7071067811865452,5.553603683285777e-8],[1,-89.99999999999999,179.999991,0]]],0,[0,4,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,9,1,5],[0,0,0,0],[-1,6,-1,7],[330,85,154,154]],[[{"name":"archer04","rect":{"x":2,"y":366,"width":95,"height":163},"offset":{"x":0,"y":0},"originalSize":{"width":95,"height":163},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"glass_03","rect":{"x":2,"y":2,"width":359,"height":362},"offset":{"x":0,"y":0},"originalSize":{"width":359,"height":362},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"number_7_0_0","rect":{"x":4,"y":492,"width":504,"height":248},"offset":{"x":1,"y":3},"originalSize":{"width":512,"height":256},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[73]],[[[31,"Male_Hurt_01",".mp3",0.574694],-1],0,0,[],[],[]],[[{"name":"roll_light0007","rect":{"x":222,"y":932,"width":27,"height":89},"offset":{"x":36.5,"y":-4.5},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"NormalBullet_HitFx"],[45,"NormalBullet_HitFx",33554432,[-5,-6,-7,-8,-9],[[2,-2,[1,"15XUFTB7xMx4BL/q9EsXCL"],[5,0,0]],[40,-3,[1,"d5r5KcjX5GKbOx25TtkzTF"],[10],11],[4,-4,[1,"cb+uuKLLBIkrm1La/kVKT/"]]],[0,"352kFmd7pIQLO+kSos54p1",-1,0]],[29,"Light_effect_blur",false,33554432,1,[[2,-10,[1,"4ez3CcAAtP3olWX67302cN"],[5,186,187]],[24,1,-11,[1,"32VVJAIRBL+JKJqwc5nMXd"],[4,4278221567],0,1],[4,-12,[1,"64SS7AhMJLr7jEYVQxMkTt"]]],[0,"17mTKQgsdNuZ+dqliA1bE8",1,0],[1,1,1,0]],[29,"Img_LightRadial_Hard",false,33554432,1,[[2,-13,[1,"78AMa9oE1EH7hWH6QhWl9H"],[5,256,256]],[24,1,-14,[1,"2bQc70WoxEb5kpLV1TpEEy"],[4,4278208511],2,3],[4,-15,[1,"baZr7gCKpBAIZQ8jAx/lWA"]]],[0,"80GtbmFwhGo7B2B7rZGpm+",1,0],[1,1,1,0]],[29,"Super_Circle",false,33554432,1,[[2,-16,[1,"a23OzcNWpDhrMV69S+agHO"],[5,111,111]],[13,1,2,false,-17,[1,"d8x6UauFRKGLiJXBC2UHHe"],[4,4278232063],4,5],[4,-18,[1,"c0qrcnSNtHcqJ4q5Kc7YOV"]]],[0,"99idKR3MJJw4wRcZHmy+Lg",1,0],[1,0.5,0.5,0]],[37,"Bullet_Hit_sparks",33554432,1,[[2,-19,[1,"a0C/mkQJJD95RyYPeEbQPg"],[5,150,150]],[39,1,2,false,-20,[1,"18//KOTWhDgrvWv86+wUev"],6,7],[4,-21,[1,"25nkh/GwhHdIknU5HcQ3t8"]]],[0,"f87KgpGVJLNacD65vyfhXr",1,0]],[57,"Bullet_Hit",33554432,1,[[2,-22,[1,"e79Ht9QlVIv7rsFJTlsOem"],[5,150,150]],[39,1,2,false,-23,[1,"32iQDFMtlI9bRUVEO/o/br"],8,9],[4,-24,[1,"3aXAHdA1pBUag579JSxW7x"]]],[0,"81Jev57WJEOLkwUcHnZE74",1,0],[1,0.7,0.7,1]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,9,1,24],[0,0,0,0,0,0,0,0,0,0,0,0],[3,2,3,2,3,2,3,2,3,2,-1,7],[1,26,1,155,1,156,1,331,1,332,157,157]],[[[33,"UI"],[45,"UI",33554432,[-6,-7,-8,-9,-10,-11,-12],[[2,-4,[1,"bdFy6QMj9ABbbLKLvp/pVa"],[5,1136,640]],[98,45,-5,[1,"32k7rBQVpB0rkXIjDr19TS"]]],[215,"99KHcneTxFtp0SYrcio7ut",-3,0,[-1,-2]]],[73,"BottomBar",33554432,[-14,-15,-16,-17,-18,-19,-20,-21,-22],[[2,-13,[1,"d5dFg0V5VMrqjviO9N6Ont"],[5,0,0]]],[0,"59nDMavatNh6StfYeBQ8Ve",1,0],[1,0,-274,0]],[103,"ButtonLayer",512,33554432,1,[-25,-26,-27,-28,-29],[[2,-23,[1,"12sz3TruNH3aoszaYRDfKC"],[5,1136,640]],[75,45,100,100,-24,[1,"d7XMaIxw5FTaSPank+BXwv"]]],[0,"faRgF2rYRJK55tSk90Lbgq",1,0]],[73,"Arrow",33554432,[-33,-34,-35],[[2,-30,[1,"24nPvhGHtD25/RtV3DQhpS"],[5,0,0]],[21,true,-31,[1,"f7eVi2HglFFIqZbN81fNsi"],[5],6],[4,-32,[1,"afDmss89JAO6f1KKHZ9HDs"]]],[0,"4e6QnfCmVMiY3x0q08UWNy",1,0],[1,0,-218,0]],[158,"TopUI",512,33554432,[-38,-39,-40,-41],[[2,-36,[1,"31dtNdVVhE7aVsdrCy9RTN"],[5,1136,640]],[98,45,-37,[1,"ceLkNvbuRH0K1pBfXkdgWM"]]],[0,"99J0pDqnFGfoZ4pw1fS1gr",1,0]],[46,"Border",33554432,5,[-48,-49,-50,-51],[[2,-42,[1,"77FD4uJR5GYrer3mtRNhvM"],[5,0,0]],[174,-47,[1,"d4j1OR7c1CG6jNw553P9B7"],-46,-45,-44,-43]],[0,"81gN4nQqFM7Jg3Zi07edYy",1,0]],[45,"UI",33554432,[-53,-54,2,-55],[[2,-52,[1,"3aGt3QJXFFtLSdanoC4tX+"],[5,0,0]]],[0,"bd+TOEVUZEZZO35R0G43d/",1,0]],[22,"WiFi",33554432,2,[-58,-59,-60],[[2,-56,[1,"83xuKwIklDqKZH2gDMO4e6"],[5,23,18]],[84,-57,[1,"7cTkU152BKboOxHEoClMN7"],[4,4293896032],14]],[0,"82YR5/W8JByKYYPZi2km9i",1,0],[1,-116,-35,0]],[45,"RoomBtnBG",33554432,[-64,-65],[[2,-61,[1,"f3TRX3WpdJlo5dAzW95qqn"],[5,145,90]],[116,1,0,-62,[1,"aeUzUEEkNIEIKDbEBlmlSj"],31],[140,3,1.05,-63,[1,"1dSxng41FM0q+PEvHh5m6A"],32]],[0,"6cp67Du6xC5KNvK0kg0Xj+",1,0]],[46,"LightFx",33554432,9,[-68,-69,-70],[[2,-66,[1,"9egIfUZKREv4c+ZS9vPVoR"],[5,0,0]],[21,true,-67,[1,"4fuJwsY1BCR4tNW5ufdTdg"],[29],30]],[0,"54zk3MDktNzqUFVzewH8id",1,0]],[22,"FuncBtn",33554432,3,[-72,-73,-74,-75],[[2,-71,[1,"b06AKz6a9IkJeuU8ViGe5m"],[5,0,0]]],[0,"cdTD9m5iFN0KSOpwuOPWao",1,0],[1,318,-271,0]],[22,"FuncBtnFx",33554432,3,[-77,-78,-79,-80],[[2,-76,[1,"f0hCBJ0VxFS5ZGaimrQT1W"],[5,0,0]]],[0,"3fXzqVBvpHK7vYfJmbE+rr",1,0],[1,318,-271,0]],[22,"FuncBtnCost",33554432,3,[-82,-83,-84,-85],[[2,-81,[1,"4ek65rcJ5Ppbc4c4Ll2RA+"],[5,0,0]]],[0,"a3V1vhNm9D27yk+in+Li4u",1,0],[1,318,-271,0]],[73,"FuncBtn",33554432,[-87,-88,-89,-90],[[2,-86,[1,"5fBRktKtBNWK0B6UKcTejm"],[5,0,0]]],[0,"24N1HkuLhBV73EHxdWwC/M",1,0],[1,318,-271,0]],[159,"BlackScreen",false,33554432,[[2,-91,[1,"57UJ/sl/RKcJdDNQR8NQtn"],[5,1136,640]],[85,1,0,-92,[1,"03ZolL92hF3ams2EMNrI52"],[4,4278190080],75],[4,-93,[1,"62gb0zWldHLaQdpPnDdVYF"]],[51,-94,[1,"666+cP0shHeZKHI1QWBhRi"]],[75,45,16,16,-95,[1,"e8CW002OBM77+KCMt2GVaq"]]],[0,"de0qxvJepFDoPrJivirFJh",1,0]],[104,"Pivot",false,33554432,[-98,-99],[[2,-96,[1,"21p/FzvGhK37okE/8kgda8"],[5,0,0]],[4,-97,[1,"309uIJmAhP9K1uy8Lab0K8"]]],[0,"d3pzwM2aZMvryoYukcscKX",1,0]],[14,["97CfmgVDND27mBF7ys+wq6"]],[14,["7evMwbm6hJl7cJZ8Ys66Rg"]],[120,"YourLocation",33554432,4,[[2,-100,[1,"178hZRTGFOB5fZwV6mASO4"],[5,180,70.4]],[167,"您的位置",40,false,true,-101,[1,"99/ERJ465MNLrD7eIbvw7F"]],[155,10,-102,[1,"f1Y2QIQf5PdYJYIpGkrPLa"],[4,4292280064],[0,0,0]],[4,-103,[1,"b7T9AB0V5OUZ0uflyT4LCH"]]],[0,"6dYBA03v5ONYNCtd2uIcf0",1,0],[1,0,235,0],[1,0.9,0.9,0.9]],[22,"BtnMinus",33554432,2,[-107],[[2,-104,[1,"90JFN5rRFH4JckgoWfufek"],[5,75,75]],[115,0,-105,[1,"cfkQHrltdEGYftMhGU/l8W"],18],[140,3,1.05,-106,[1,"8edNiVXhtOeIdfOEaQrLp4"],19]],[0,"2eZfqcrV9HtKBONDtPYEv8",1,0],[1,-105,13,0]],[22,"BtnPlus",33554432,2,[-111],[[2,-108,[1,"41W6nkh4JMa4EAdHOlDuGD"],[5,75,75]],[115,0,-109,[1,"ac7AyCzGxH47KvKF9kYLyp"],21],[140,3,1.05,-110,[1,"24IFpAvmBMaYgyDDNZ+ejc"],22]],[0,"75c0PwzP5J7ILiTiwq93VQ",1,0],[1,70,13,0]],[73,"BottomBar",33554432,[-113,-114,-115],[[2,-112,[1,"bc9smsVhBHz6AN8SmxH4A9"],[5,0,0]]],[0,"d4W9Qo/xhPUZ+BeAj0cAJQ",1,0],[1,0,-274,0]],[45,"Use",33554432,[-117,-118,-119],[[2,-116,[1,"2et9y3knBFJL0cZcd11Obp"],[5,90,90]]],[0,"12/Rd2qqFNXacuLDWuA+Mr",1,0]],[45,"Use",33554432,[-121,-122,-123],[[2,-120,[1,"adxCTqNYZNA5AJYam7ETSx"],[5,90,90]]],[0,"d73EdHBHVPHIK/FxZhrJqG",1,0]],[45,"Use",33554432,[-125,-126,-127],[[2,-124,[1,"3cdVYezqtHRpy+drWdlc99"],[5,90,90]]],[0,"31dJcCOftDWbXuvQvRZKQM",1,0]],[45,"Use",33554432,[-129,-130,-131],[[2,-128,[1,"1cEMmw/DNIl6BUkhJUw+DS"],[5,90,90]]],[0,"64OfMITRBOEYaWI/2CYWX+",1,0]],[129,"Cost",false,33554432,[-133,-134,-135],[[2,-132,[1,"87L0MnrFJBDJqyUeueTpCw"],[5,0,0]]],[0,"cfeQVqo61Cwpw+BpJcnf3O",1,0],[1,0,-28.6,0]],[129,"Cost",false,33554432,[-137,-138,-139],[[2,-136,[1,"77Lln6wbxDX6glP9cQbtZG"],[5,0,0]]],[0,"3e3Ovsz69LT6ZVRpLiNFCV",1,0],[1,0,-28.6,0]],[103,"PlayerLayer",512,33554432,1,[7],[[2,-140,[1,"30cNLQw0pB4ZXh3WjroQ//"],[5,1136,640]],[75,45,100,100,-141,[1,"27/S6dQ8NKA4sm8fh65ZCb"]]],[0,"cceHhrn+BDLJLtL4uG7bZ6",1,0]],[46,"Aim",33554432,7,[-143,-144],[[2,-142,[1,"0aNpFLXyhBwrUq4JB7TRqi"],[5,0,0]]],[0,"1b3Hg+4VxGYZhyXoZqXoQm",1,0]],[17,"LocationArrow",33554432,4,[[2,-145,[1,"d4+VeGre1MMpshKg1bLOoR"],[5,66,74]],[35,-146,[1,"b9IEm1CBVCIJUMFrVy9AFF"],2],[4,-147,[1,"e70UA2eaxCZq5Rjf3zGR5M"]]],[0,"71SmJqOo9JVJjthBIlIIjy",1,0],[1,0,175,0]],[120,"Light",33554432,4,[[2,-148,[1,"0fgPWEQK9HOpmZ3/oi59z+"],[5,80,80]],[69,-149,[1,"fauyhR7dJPYoDsnWdgi63p"],3,4],[15,0,-150,[1,"78TvHBUTREcZUdhW++Gbp3"]]],[0,"53n/6djLBCMb1FO7YlHdEs",1,0],[1,0,70,0],[1,0.009999999776482582,0.009999999776482582,1]],[37,"BarBG",33554432,2,[[2,-151,[1,"7fzktkuV9EsID8PHxuCxdP"],[5,1600,115]],[116,1,0,-152,[1,"94SBV3PmZBpIh8t6FRx8ja"],7],[51,-153,[1,"43TC1ZBjtDW4KTd7yhjWaW"]]],[0,"dbdwGBN/pLrZkXLl0bk7J0",1,0]],[105,"DarkImage",false,33554432,20,[[2,-154,[1,"15r4jh75xBip4GYzsBeuSR"],[5,75,75]],[138,0,-155,[1,"86rW0ZgWNEao+rujD62yrr"],[4,4289835441],17],[51,-156,[1,"3bamwgjYBMxIqglBnbc93i"]]],[0,"4bTf0Xu5JIHa2cgcNZt+Vm",1,0]],[105,"DarkImage",false,33554432,21,[[2,-157,[1,"b1yEPDEslD7YuVzu6L7wbr"],[5,75,75]],[138,0,-158,[1,"0bUBUUOXVNuqE56Hg9RqHA"],[4,4289835441],20],[51,-159,[1,"14PfAge3pCM6taDfjHhCDS"]]],[0,"32uGU184NHDqp9GhFOCccn",1,0]],[130,"EF_sprite_ani",false,33554432,10,[[2,-160,[1,"e3Fr/M6JtC74o20X4nOBny"],[5,171.2,98.3]],[173,1,1,0,-161,[1,"0crBZ42VBG76B7e7D3sY6l"],24],[4,-162,[1,"b4PUu2rXRCrLCikk3Xu0NU"]]],[0,"85yb4CIC1BHLKjn+IQjko/",1,0],[1,-0.2,0.1,0],[1,0.8,0.8,1]],[58,"FrameFx_1",false,33554432,10,[[2,-163,[1,"a2ZHaSd4lEh5DguqCXRBdb"],[5,32,32]],[86,1,-164,[1,"78DQEvNoZE2LcER7X791HY"],25,26],[4,-165,[1,"deXM+T/s5Harb1dS6jSOaV"]]],[0,"aeLzqYZDlD25Zyk7C1Xvk8",1,0],[1,-70.282,0,0]],[58,"FrameFx_2",false,33554432,10,[[2,-166,[1,"cbiZTzkANN2rGDldkEu+t/"],[5,32,32]],[86,1,-167,[1,"7dW2Hwy0pEvqT2hi27ouHd"],27,28],[4,-168,[1,"f0g07AY5NKJbkSIVUGBV5l"]]],[0,"27V6EpYoxEDJ6QmXgbwWPV",1,0],[1,-70.282,0,0]],[22,"Hammer",33554432,11,[-171],[[2,-169,[1,"cehA/6nhJOoqza6wvPmb4+"],[5,90,90]],[90,-170,[1,"35QLuV7GdMNKzEqHyC2xBF"]]],[0,"dc6AfPqV9Jp4kTXvQnrOI3",1,0],[1,-150,0,0]],[22,"Axe",33554432,11,[-174],[[2,-172,[1,"8f07x7bHFOt5brFbCdnLSb"],[5,90,90]],[90,-173,[1,"037xsQD7tDSKdfqzDyT9n2"]]],[0,"85brBzhQBE8bEUOoIfh1TJ",1,0],[1,-50,0,0]],[22,"Aim",33554432,11,[-177],[[2,-175,[1,"f9WCcE/mhMs7ESUP4xKnTW"],[5,90,90]],[90,-176,[1,"ffdpgEagxNmoKCdbORxkge"]]],[0,"f4ThSG1qVKSaMyYfnxbesN",1,0],[1,50,0,0]],[22,"Auto",33554432,11,[-180],[[2,-178,[1,"899Re/CpBM35kpQCW+26CL"],[5,90,90]],[90,-179,[1,"2fAKO5DSxKkqiwf0x6JKwU"]]],[0,"3e0ZB8lYxDyJyIxa4PoFXp",1,0],[1,150,0,0]],[104,"FrameFx",false,33554432,[23],[[2,-181,[1,"99UsnN855CopDYCVAm+vcG"],[5,90,90]],[21,true,-182,[1,"bepYdPK71Pza5DkXrv/0ed"],[43],44]],[0,"ca6Bqzm2ZDMKL7XBCIEFa3",1,0]],[104,"FrameFx",false,33554432,[24],[[2,-183,[1,"27x3iGcvFHGKyQEFf04W/f"],[5,90,90]],[21,true,-184,[1,"23XxwnoOxHU4re8YmGYadi"],[51],52]],[0,"fcv1VjgQZN44XpJrLWRgam",1,0]],[104,"FrameFx",false,33554432,[25],[[2,-185,[1,"c3AxQK6ThOfJ+ESQ1eo2hU"],[5,90,90]],[21,true,-186,[1,"08HPAYzqJKM6jG1FOF5XAW"],[59],60]],[0,"deBqmKO1VKFZxxjHIwqLHs",1,0]],[104,"FrameFx",false,33554432,[26],[[2,-187,[1,"8eOoAMQ4RKzpXMdFGPSnal"],[5,90,90]],[21,true,-188,[1,"b3ooGE3VhGV635nWpoQZ13"],[67],68]],[0,"delXG4/fFPlbkFqxcNyeSg",1,0]],[46,"BitmapLabel",33554432,3,[-190,14],[[2,-189,[1,"1fjLR+9RJI5q0EZNLFVbMS"],[5,0,0]]],[0,"7aIspg6UNG0pP447I/R8io",1,0]],[106,"RoomName",33554432,[[2,-191,[1,"35tgLIv9RIHITCP2aZYTsd"],[5,63.38,44.1]],[71,"富豪館\n(單人)",18,30,35,2,false,true,-192,[1,"5elTCbi2hOIr06HoncJNEg"]],[176,1,-193,[1,"dedzobRj9D44V8cB8xUhVh"]]],[0,"50a4PPdx1MFZqy/cCUtggM",1,0],[1,0,-8,0]],[106,"Name",33554432,[[2,-194,[1,"28O/2L4jJARrh901vqN7w+"],[5,82,34.239999999999995]],[71,"雷電槌",24,24,24,2,false,true,-195,[1,"91ZnbL/5VB+rJ7Rgbba8I1"]],[91,-196,[1,"2fHBy4ljhPn67Pg8TuzpfB"],[4,4285072384]]],[0,"c0QLma08pIUodFeOZ9rB77",1,0],[1,0,-27,0]],[106,"Name",33554432,[[2,-197,[1,"9ef8wUXlxEpJQ0etQO1deN"],[5,82,34.239999999999995]],[71,"飛斧",24,24,24,2,false,true,-198,[1,"14JZIB9GBGNKEkqtCEX3mr"]],[91,-199,[1,"0ekicVNHtCArn9JP5rWZQo"],[4,4278210677]]],[0,"c5B5rjxbFLaJZgfy3qk/JA",1,0],[1,0,-27,0]],[106,"Name",33554432,[[2,-200,[1,"8efGv2YLNPb7M7mXgHqD9l"],[5,82,34.239999999999995]],[71,"鎖定",24,24,24,2,false,true,-201,[1,"4ajNMbxTZB+bal4WuW92iO"]],[91,-202,[1,"bee48Ni8hO96zhWWqdHNVD"],[4,4278211759]]],[0,"94OV9U1xtO2IwKK2RouZu4",1,0],[1,0,-27,0]],[106,"Name",33554432,[[2,-203,[1,"6atjWhquNMgYrLK0uDS3xh"],[5,82,34.239999999999995]],[71,"自動",24,24,24,2,false,true,-204,[1,"fbtUv8sIZG7pF7fdozPnil"]],[91,-205,[1,"0aS0xDCXtKVJALwxc6ZwU5"],[4,4278548736]]],[0,"07GJ9Qa8ZDC7wbJINrLYTb",1,0],[1,0,-27,0]],[103,"UILayer",512,33554432,1,[5],[[2,-206,[1,"32bvM/BjFBBLkicGK0wZX7"],[5,1136,640]],[98,45,-207,[1,"4d6Ul7oPhOKo5QIKJb+Ewa"]]],[0,"5b9HR/wilJY7PJxkCNCyAV",1,0]],[46,"Mask",33554432,5,[15],[[2,-208,[1,"feECfps7ND1b09NzuX03jM"],[5,1136,640]],[98,45,-209,[1,"377H7K2WJNaIvg03vVGXsa"]]],[0,"5brVXKwEpPYIU1YbZ0qvsk",1,0]],[46,"Toast",33554432,5,[16],[[2,-210,[1,"a4YPPR5MBCV7KNPYjnXC3e"],[5,0,0]],[177,-212,[1,"84J2pQQjNF9rsgVjZyWSYM"],16,-211]],[0,"1fMGQGGpxCkJIrHm9QP76/",1,0]],[46,"Cursor",33554432,5,[-216],[[2,-213,[1,"39Ct5LL+lKmJJcKInxyh17"],[5,0,0]],[178,-215,[1,"49VKgGHEBExZWNMxrNDmgo"],-214]],[0,"235/bP1ztNlIN66TJjLZnZ",1,0]],[17,"Image",33554432,56,[[8,-217,[1,"17AAJhvHhAEKrI5oW7nVAL"],[5,30,32],[0,0.1,0.9]],[35,-218,[1,"8aerI7lV5OdbAYyTmUG5nS"],77]],[0,"2cYLFJVQhOkaGPUJ0CN4ON",1,0],[1,-10000,0,0]],[80,"Left",false,33554432,6,[[-219,[87,1,0,-220,[1,"a2ZEJysbdCJIbTJI38f6q2"],[4,4278190080],78,79],[51,-221,[1,"aaO0LidN5OpYINzp2RtoPQ"]]],1,4,4],[0,"94N9OrJOZCMKNmLlKYf2OR",1,0],[1,-568,0,0]],[80,"Right",false,33554432,6,[[-222,[87,1,0,-223,[1,"00g6jeMZ1Naq23iEmQ1wIM"],[4,4278190080],80,81],[51,-224,[1,"9blQY5j6BCPL4znJK+M8JQ"]]],1,4,4],[0,"0cl3mZ7lFDKaXs1O+e2mx7",1,0],[1,568,0,0]],[80,"Top",false,33554432,6,[[-225,[87,1,0,-226,[1,"e1dMh3YTZEx6lk8SGV63Fm"],[4,4278190080],82,83],[51,-227,[1,"c6z51MRXNDVYrh0FcCQ8x0"]]],1,4,4],[0,"50KUaOSkJLPr71tPvTrB2V",1,0],[1,0,320,0]],[80,"Bottom",false,33554432,6,[[-228,[87,1,0,-229,[1,"16fGpGHLlNi49Q/qeBS20D"],[4,4278190080],84,85],[51,-230,[1,"c8hllsyNVBZajuNTwhjfs3"]]],1,4,4],[0,"13T/kouvBHz4t/jU/xTE63",1,0],[1,0,-320,0]],[107,"TouchPanel",512,33554432,1,[[2,-231,[1,"a4UKgnOc5ErovZG9BwvtS2"],[5,1936,1040]],[245,45,-400,-400,-200,-200,9999.9,10000,-232,[1,"82eBXwd5hLELp14dc5dpvs"]]],[0,"64XyjAYipHCYWV0vmr5CKP",1,0]],[107,"EffectLayer",512,33554432,1,[[2,-233,[1,"82biSCzaVEL51/qB60AqE7"],[5,1136,640]],[75,45,100,100,-234,[1,"64ZmHIDRVBy5SaQ6m90SEU"]]],[0,"71H53d5SpDrocPyZAD9mZ5",1,0]],[92,0,{},30,[82,"97CfmgVDND27mBF7ys+wq6",-235,[89,"e4MNineuRD3KB6FeFo/sDN",1,[[59,"Sight_Aim",["_name"],17],[36,["_lpos"],17,[1,-1000,-1000,0]],[36,["_lrot"],17,[3,0,0,-1,6.123233995736766e-17]],[36,["_euler"],17,[1,0,0,-180]],[59,false,["_active"],17]]],0]],[92,0,{},30,[82,"7evMwbm6hJl7cJZ8Ys66Rg",-236,[89,"e3Od7enJNPx5s2OR1PYENG",1,[[59,"Sight",["_name"],18],[36,["_lpos"],18,[1,-1000,-1000,0]],[36,["_lrot"],18,[3,0,0,0,1]],[36,["_euler"],18,[1,0,0,0]],[59,false,["_active"],18]]],1]],[46,"Location",33554432,7,[4],[[2,-237,[1,"56pLROitVHFqHOwU925QdZ"],[5,0,0]]],[0,"b0p3JsND9M8asLFtoAIljb",1,0]],[17,"BarBG2",33554432,2,[[8,-238,[1,"ed8PFChddNkZgVdm8gPW3K"],[5,460,47],[0,0,1]],[85,1,0,-239,[1,"2dk5XWS0BLXKqeFUOf5JZD"],[4,2013265920],8]],[0,"57tEvsJshOfZD9uS2G1ThT",1,0],[1,-375,21,0]],[17,"Tower_L",33554432,2,[[2,-240,[1,"82FlytuWZA57CWp48+34TH"],[5,95,163]],[35,-241,[1,"25tiB46VtCDZ/edZ407HjD"],9]],[0,"af7sJVWptMA5kh4MWbjGhg",1,0],[1,-576,4,0]],[17,"Tower_R",33554432,2,[[2,-242,[1,"e3mi6Xu5VLFIvUH21ao3Mz"],[5,95,163]],[35,-243,[1,"7aljwuipJC9a5cGpwLFvE9"],10]],[0,"5eArg+DalMo6ExWFAyGGNV",1,0],[1,576,4,0]],[131,"Level_1",512,33554432,8,[[2,-244,[1,"64KVTbVDZBWbJqMuMwyl8m"],[5,5,6]],[84,-245,[1,"65AMyvmkZNBbhVnd2iCL5a"],[4,4294944592],11]],[0,"35bVTaLttCYqMbSdPRbdHx",1,0],[1,0,-6,0]],[107,"Level_2",512,33554432,8,[[2,-246,[1,"4dqgx59OtKQrU8kYVAocTE"],[5,15,6]],[84,-247,[1,"01D0HuYsBAe7OPSjK5cQ69"],[4,4294944592],12]],[0,"3c/PryBc1M17lYUcfqZ+Ou",1,0]],[131,"Level_3",512,33554432,8,[[2,-248,[1,"daNU1AlspG8qK0oSYv6926"],[5,23,8]],[84,-249,[1,"34sg7wmOFHeKTO5JLmJFoI"],[4,4294944592],13]],[0,"d8nGPph3JHc5BnJMz4YLYB",1,0],[1,0,5,0]],[17,"BetNum",33554432,2,[[8,-250,[1,"5849wvQWRN4bOPKN3dxAX/"],[5,80,39.9],[0,0.5,0.45]],[112,"0",24,24,24,2,false,false,-1,-251,[1,"3ai9/eqm5BKIY1VI+vMdc4"],15]],[0,"4dfaaz3sFAX7dtiIeIruvI",1,0],[1,-17,0,0]],[17,"CoinNum",33554432,2,[[8,-252,[1,"f6FbWbxpVDD7PJdKzVh/8s"],[5,176,39.9],[0,0.5,0.45]],[112,"0",24,24,24,2,false,false,-1,-253,[1,"781lND8mxDZ5uBHIUUVcs7"],16]],[0,"7f8kqdSZdEC5Tyh/8PeC5r",1,0],[1,-252,0,0]],[46,"BitmapLabel",33554432,7,[22],[[2,-254,[1,"38sPZWbNFC27pyACmF6kQ6"],[5,0,0]]],[0,"a4iTZxmfFG/6GmFGThhGqV",1,0]],[17,"BetText",33554432,22,[[2,-255,[1,"7dkh1/rxpCgrrNqoC6Zw7d"],[5,30.02,25.2]],[117,"Bet",20,20,20,false,-256,[1,"0aBK6WYI5PmYPaPvcqbd4I"],[4,4294959501]]],[0,"3azaDuA3VGXLBj95D8flOU",1,0],[1,-18,40,0]],[17,"PlayerName",33554432,22,[[2,-257,[1,"5dvakNjtVMHpjzt7QGSRHb"],[5,56.69,25.2]],[117,"Player",20,20,20,false,-258,[1,"38BD3afK9J/bH2+Ta+UNNl"],[4,4294959501]]],[0,"b2bfoGgTFKZav5YgZ/9VUb",1,0],[1,-252,40,0]],[17,"Session",33554432,22,[[8,-259,[1,"a2LlbWpkpAG4OB9yF1/e0/"],[5,160.17,20.16],[0,0,0.5]],[117,"000000000000000000",16,16,16,false,-260,[1,"05FJF3fuRFYIVeDJHEopaT"],[4,4293433932]]],[0,"044NnKMHhDnr2uCeVmk8wf",1,0],[1,-96,-35,0]],[22,"RoomBtn",33554432,3,[9],[[2,-261,[1,"d34RPJJlRJi7udVpCcfJsn"],[5,0,0]]],[0,"5f/92rAqJGgpIuVtqLNZ9p",1,0],[1,-442,-271,0]],[160,"Arrow",512,33554432,9,[[2,-262,[1,"6dATLvE0lCnJUW6EB9aRv0"],[5,39,30]],[35,-263,[1,"5bUS5J0ulDPab0l8jgswfa"],23]],[0,"9fe395DpBPaIYECCfdP1Rb",1,0],[1,0,30,0],[1,0.7,0.56,1]],[37,"Image",33554432,39,[[2,-264,[1,"c57WwTK7BAlKwDDzFt3EAj"],[5,90,90]],[35,-265,[1,"f13dobVs5MgKWmm2BnJS05"],33]],[0,"d30Cl+JxFNtLO0Ccp+J4/O",1,0]],[37,"Image",33554432,40,[[2,-266,[1,"f237jedXNJNYg3ekBZUrdQ"],[5,90,90]],[35,-267,[1,"47Vi0JXgFIYp2usehbwU02"],34]],[0,"a5YZ0A7ixM54Xh2yv239l9",1,0]],[37,"Image",33554432,41,[[2,-268,[1,"deLyAuKGtDebom3NKKOnoh"],[5,90,90]],[35,-269,[1,"737zavJvlNl4+ZVAuoV2cF"],35]],[0,"45uyM6FDRLkIw1BBX/7EpD",1,0]],[37,"Image",33554432,42,[[2,-270,[1,"1fAYd6b7BANpGq6BD/4haj"],[5,90,90]],[35,-271,[1,"47kh5U3z9I4o+37auL9deZ"],36]],[0,"8cNMmjmsZLi5/IN1CFnFJJ",1,0]],[22,"Hammer",33554432,12,[43],[[2,-272,[1,"f4FWj6aXdOy7L0pdBDlDOf"],[5,90,90]]],[0,"79bnwPmKZKcbIdT9y5lwmi",1,0],[1,-150,0,0]],[29,"RollEf_01",false,33554432,23,[[2,-273,[1,"f2Sbw2r2xMqITHvXYwqgFk"],[5,70,70]],[39,1,0,false,-274,[1,"417scIpblNnJT5Jpn6fR5B"],37,38]],[0,"7a+hXk8BJLMpsEevyp3+wb",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,23,[[2,-275,[1,"d788zB+SFK9a++bD6PgFEX"],[5,70,70]],[39,1,0,false,-276,[1,"7fI/ZnQelH1oNLSGqCQ2+i"],39,40]],[0,"c0Q0BDCftGWavjHLjzD+Ts",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,23,[[2,-277,[1,"55UXbAfzFIoYGa3gpBUx7V"],[5,65,65]],[88,1,0,-278,[1,"2bfgLNlgdIsIGeUS5YNNR7"],41,42]],[0,"23micrSFZAa7vccnydhmTo",1,0],[1,1.4,1.4,1]],[22,"Axe",33554432,12,[44],[[2,-279,[1,"9eADio7RhKo7pdMvI2cTxc"],[5,90,90]]],[0,"c9I4ZmLs1MOYhG+YOCSqr5",1,0],[1,-50,0,0]],[29,"RollEf_01",false,33554432,24,[[2,-280,[1,"07Le77hwRH8rTT0aVyE+Tt"],[5,70,70]],[39,1,0,false,-281,[1,"637JTlnZpIy5w8OJWTosIm"],45,46]],[0,"91EDxYa+hBhoY5OR/AUuTw",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,24,[[2,-282,[1,"8egPbVJwJIsaKr1L5xO68m"],[5,70,70]],[39,1,0,false,-283,[1,"fe8W10YMJBFKv03Sn++GIb"],47,48]],[0,"b1waktwzNBwKSwMnPXxzcJ",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,24,[[2,-284,[1,"6eDnmQe6BBTIzqk6UexdPr"],[5,65,65]],[88,1,0,-285,[1,"1aIjaYWyhOBZVyfgELeR1U"],49,50]],[0,"09G97Sv4pEZ6I7/Se6E+JX",1,0],[1,1.4,1.4,1]],[22,"Aim",33554432,12,[45],[[2,-286,[1,"6ecLQ5PsZPq721yegdgkE9"],[5,90,90]]],[0,"cdh6+7DbZDEKD9IZVj8DOk",1,0],[1,50,0,0]],[29,"RollEf_01",false,33554432,25,[[2,-287,[1,"abi+n/FnZMipmbfk0vH65P"],[5,70,70]],[39,1,0,false,-288,[1,"f2Mqe3wThBaoNlJQdB0lJ2"],53,54]],[0,"07xFyFkIVP+aFO2wCAtspl",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,25,[[2,-289,[1,"a7YoKeGYFORYc+Ogop0t94"],[5,70,70]],[39,1,0,false,-290,[1,"dcp7+13c5E6J0jXNtq+6E/"],55,56]],[0,"179W2fbclM3IQQXLj+MbOp",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,25,[[2,-291,[1,"062Grd9CNMEKNF99Awx8N/"],[5,65,65]],[88,1,0,-292,[1,"b3FZdYhktKOLlPKU4wIwAU"],57,58]],[0,"5cdE9k4C9NIqbxDX+Dfsdx",1,0],[1,1.4,1.4,1]],[22,"Auto",33554432,12,[46],[[2,-293,[1,"760H0t9ZNOk77h0kYwDcHY"],[5,90,90]]],[0,"3ehHE/8YlOGr2r5YX1+P05",1,0],[1,150,0,0]],[29,"RollEf_01",false,33554432,26,[[2,-294,[1,"b4sLMm3wNC9rptufTts9Zm"],[5,70,70]],[39,1,0,false,-295,[1,"58FOXk1DFASaX4NgrAq/mn"],61,62]],[0,"d7vSLwM3dCMIEL/wJ2aRfc",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,26,[[2,-296,[1,"70fvJ/ANVDPIkqDSCK/fJz"],[5,70,70]],[39,1,0,false,-297,[1,"85MX+gRqNEDJD0+2LKOEUV"],63,64]],[0,"d6ZhrVzJJF6av1RLWxoyzk",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,26,[[2,-298,[1,"c3mr5fHZlHBpvVhnucZWOl"],[5,65,65]],[88,1,0,-299,[1,"c11eS6CRRMKqvx7iH0jS0K"],65,66]],[0,"a5B3ko+wlK8YDT+Sq2YTXo",1,0],[1,1.4,1.4,1]],[22,"Hammer",33554432,13,[27],[[2,-300,[1,"5eN4VXBWVCkL34O5VN61MQ"],[5,90,90]]],[0,"90vXD5hsJKCKvJEOSeGX0u",1,0],[1,-150,0,0]],[37,"BG",33554432,27,[[2,-301,[1,"76IjOUiW5CHobRoNHvmNDs"],[5,84,25]],[85,1,0,-302,[1,"8cNmvIPU9Fdrw9Jm8n+jxk"],[4,2885681152],69]],[0,"e4jzXQjztO65gBGKjU1aKJ",1,0]],[17,"Icon",33554432,27,[[2,-303,[1,"a2bQwYX5ZCNrdoIKnP7vuP"],[5,20,20]],[35,-304,[1,"65eGX4Y39EhYq+ehIFvJYH"],70]],[0,"89Mj8deYpCz6OwUsvmeJTH",1,0],[1,-31,-0.2,0]],[17,"CostNum",33554432,27,[[8,-305,[1,"f8rqJHAsBI4r5zulD2V5ZJ"],[5,60,24],[0,0.5,0.45]],[112,"0",16,16,16,2,false,false,-1,-306,[1,"4dRJKPMbhK7o9kM9spMI64"],71]],[0,"f8PeYLsZpDUrXmrvxNN8Au",1,0],[1,10,0,0]],[22,"Axe",33554432,13,[28],[[2,-307,[1,"c47JxvokBDNa+41k0alpUL"],[5,90,90]]],[0,"7960eJJP9AhqiKWVyOU1XA",1,0],[1,-50,0,0]],[37,"BG",33554432,28,[[2,-308,[1,"73yuYY+xBH0JlH4BiHUtj0"],[5,84,25]],[85,1,0,-309,[1,"94WEorm4RJFYFZzggWzs3E"],[4,2885681152],72]],[0,"51obbI15NAZJ3CUNhLuinN",1,0]],[17,"Icon",33554432,28,[[2,-310,[1,"43INahu1tHEJduf/TDdeIt"],[5,20,20]],[35,-311,[1,"80eRrOyzJKi4+gtNBNo4HY"],73]],[0,"17LUM8zKRBDLqJ2kVx4e7Z",1,0],[1,-31,-0.2,0]],[17,"CostNum",33554432,28,[[8,-312,[1,"7dIfRjfBVKFZlU9JonG2wr"],[5,60,24],[0,0.5,0.45]],[112,"0",16,16,16,2,false,false,-1,-313,[1,"aabjDQnNtOnYh5NWnmV1wF"],74]],[0,"78q3M5XwtH7aZV1MIbu8LB",1,0],[1,10,0,0]],[22,"RoomBtn",33554432,47,[48],[[2,-314,[1,"0dBtsSnyNMEq5mnyfijhc2"],[5,0,0]]],[0,"09oYQr3ANHo5nJpvOnymjR",1,0],[1,-442,-271,0]],[22,"Hammer",33554432,14,[49],[[2,-315,[1,"57kTdq39lCDr7iJSUp1+Ue"],[5,90,90]]],[0,"f9BGbFcRRBtpsYGNpPk6gp",1,0],[1,-150,0,0]],[22,"Axe",33554432,14,[50],[[2,-316,[1,"aedhKvf2BDaKYYLAs1f/T6"],[5,90,90]]],[0,"96PzG3IINKOpoYAsRSSiFB",1,0],[1,-50,0,0]],[22,"Aim",33554432,14,[51],[[2,-317,[1,"b5bkKwLzlKb6fzjRJnI5p5"],[5,90,90]]],[0,"cf0h4SDGpGQoMnZfAGtiNM",1,0],[1,50,0,0]],[22,"Auto",33554432,14,[52],[[2,-318,[1,"ecHdQzPM1BQa+NHdMZ0l4Y"],[5,90,90]]],[0,"111P6MoapFfK20WmVdgBVq",1,0],[1,150,0,0]],[107,"RewardLayer",512,33554432,1,[[2,-319,[1,"7bUk+Up+lFeInuTTWZbj76"],[5,1136,640]],[75,45,100,100,-320,[1,"796VcgTc1LT6PBcZDF81RU"]]],[0,"42gdLonYJM/6aKPI3XV1nb",1,0]],[107,"NoticeLayer",512,33554432,1,[[2,-321,[1,"ebWGmAwQRPRYqG1MXUZGjh"],[5,1136,640]],[75,45,100,100,-322,[1,"19/DAnhlxH2pqTwM2oiXqY"]]],[0,"a8Ot5sBJJDTrOagcBuLhtl",1,0]],[37,"BG",33554432,16,[[2,-323,[1,"daNQBR4OlIDYKBDyf/ZjpZ"],[5,550,80]],[116,1,0,-324,[1,"e1gjwfiINHLpuXW6I1WQHP"],76]],[0,"cfpLmyX3ZBo7DwALSuxK7P",1,0]],[109,"Text",33554432,16,[[[2,-325,[1,"e6xhQdS6lJmJU5w5aih3o7"],[5,520,60]],-326],4,1],[0,"08bQB9wQBMNokzK13k/0Fy",1,0],[1,0,0.3,0]],[17,"Aim",33554432,13,[[2,-327,[1,"7eNDs7CHBLF7lfDpkjNHMu"],[5,90,90]]],[0,"56ygZkNAVL/amW9BY8bFfG",1,0],[1,50,0,0]],[17,"Auto",33554432,13,[[2,-328,[1,"e0CsGV//ZJ656b+F6MxUne"],[5,90,90]]],[0,"cfaTjnK81EI7/E7x9jTg5S",1,0],[1,150,0,0]],[168,"",29,28,28,2,117,[1,"3cxBi78EBGG75uV0Cwfdkp"]],[8,58,[1,"57JvckZBFFSKWDKLIyzF7L"],[5,100,640],[0,1,0.5]],[8,59,[1,"ddNvb4qxNF9KZFAzQEImTl"],[5,100,640],[0,0,0.5]],[8,60,[1,"2b9jEsRSVB2J8kGlU3KMfT"],[5,1136,100],[0,0.5,0]],[8,61,[1,"e2NM9a8/tEboGPONC+t3zs"],[5,1136,100],[0,0.5,1]]],0,[0,-1,65,0,-2,64,0,4,1,0,0,1,0,0,1,0,-1,62,0,-2,63,0,-3,29,0,-4,3,0,-5,114,0,-6,115,0,-7,53,0,0,2,0,-1,33,0,-2,67,0,-3,68,0,-4,69,0,-5,8,0,-6,73,0,-7,74,0,-8,20,0,-9,21,0,0,3,0,0,3,0,-1,79,0,-2,11,0,-3,12,0,-4,13,0,-5,47,0,0,4,0,0,4,0,0,4,0,-1,31,0,-2,19,0,-3,32,0,0,5,0,0,5,0,-1,54,0,-2,55,0,-3,56,0,-4,6,0,0,6,0,23,124,0,24,123,0,25,122,0,26,121,0,0,6,0,-1,58,0,-2,59,0,-3,60,0,-4,61,0,0,7,0,-1,30,0,-2,66,0,-4,75,0,0,8,0,0,8,0,-1,70,0,-2,71,0,-3,72,0,0,9,0,0,9,0,0,9,0,-1,80,0,-2,10,0,0,10,0,0,10,0,-1,36,0,-2,37,0,-3,38,0,0,11,0,-1,39,0,-2,40,0,-3,41,0,-4,42,0,0,12,0,-1,85,0,-2,89,0,-3,93,0,-4,97,0,0,13,0,-1,101,0,-2,105,0,-3,118,0,-4,119,0,0,14,0,-1,110,0,-2,111,0,-3,112,0,-4,113,0,0,15,0,0,15,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,-1,116,0,-2,117,0,0,19,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,-1,34,0,0,21,0,0,21,0,0,21,0,-1,35,0,0,22,0,-1,76,0,-2,77,0,-3,78,0,0,23,0,-1,86,0,-2,87,0,-3,88,0,0,24,0,-1,90,0,-2,91,0,-3,92,0,0,25,0,-1,94,0,-2,95,0,-3,96,0,0,26,0,-1,98,0,-2,99,0,-3,100,0,0,27,0,-1,102,0,-2,103,0,-3,104,0,0,28,0,-1,106,0,-2,107,0,-3,108,0,0,29,0,0,29,0,0,30,0,-1,64,0,-2,65,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,0,34,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,-1,81,0,0,40,0,0,40,0,-1,82,0,0,41,0,0,41,0,-1,83,0,0,42,0,0,42,0,-1,84,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,-1,109,0,0,48,0,0,48,0,0,48,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,54,0,0,54,0,0,55,0,40,120,0,0,55,0,0,56,0,27,57,0,0,56,0,-1,57,0,0,57,0,0,57,0,-1,121,0,0,58,0,0,58,0,-1,122,0,0,59,0,0,59,0,-1,123,0,0,60,0,0,60,0,-1,124,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,4,64,0,4,65,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,78,0,0,78,0,0,79,0,0,80,0,0,80,0,0,81,0,0,81,0,0,82,0,0,82,0,0,83,0,0,83,0,0,84,0,0,84,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,90,0,0,90,0,0,91,0,0,91,0,0,92,0,0,92,0,0,93,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,110,0,0,111,0,0,112,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,116,0,0,117,0,-2,120,0,0,118,0,0,119,0,9,1,2,1,7,4,1,66,5,1,53,7,1,29,9,1,79,14,1,47,15,1,54,16,1,55,22,1,75,23,1,43,24,1,44,25,1,45,26,1,46,27,1,101,28,1,105,43,1,85,44,1,89,45,1,93,46,1,97,48,1,109,49,1,110,50,1,111,51,1,112,52,1,113,328],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[18,18,2,3,2,-1,7,2,2,2,2,2,2,2,2,15,15,2,2,21,2,2,21,2,3,3,2,3,2,-1,7,2,21,2,2,2,2,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,2,2,15,2,2,15,2,2,2,3,2,3,2,3,2,3,2],[158,159,160,1,161,50,50,162,163,51,51,164,165,166,167,168,36,37,37,37,38,38,38,169,1,1,52,1,52,53,53,54,54,170,171,172,173,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,55,56,36,55,56,36,174,175,176,28,29,28,29,28,29,28,29]],[[{"name":"number_8_0","rect":{"x":4,"y":4,"width":514,"height":480},"offset":{"x":-3,"y":9},"originalSize":{"width":520,"height":520},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[73]],[[{"fmt":"0_4_7@93","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["4cgWks6wJBTr1bix4YjIbQ"]}],[1],0,[],[],[]],[[{"name":"jp_2_img_0001_2","rect":{"x":4,"y":4,"width":236,"height":236},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":245,"height":245},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-118,-118,0,118,-118,0,-118,118,0,118,118,0],"indexes":[0,1,2,2,1,3],"uv":[4,241,240,241,4,5,240,5],"nuv":[0.0163265306122449,0.02040816326530612,0.9795918367346939,0.02040816326530612,0.0163265306122449,0.9836734693877551,0.9795918367346939,0.9836734693877551],"minPos":{"x":-118,"y":-118,"z":0},"maxPos":{"x":118,"y":118,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[333]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[334,4]],[[[19],[32,"island_Grass_L",[-2],[0,"31UScGtMhRfZlwLg0T70Sb",-1,0]],[44,"island_Grass_L",1,[[30,-3,[1,"80dMPJ7hhUAboi77Wt8hls"],[0],[7],1]],[0,"1cLC8vGXZVEbep/pkcIojC",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[335,336]],[[[18,".bin",3158411535,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4192,"length":2244,"count":561,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4192,"count":131,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5.019352436065674,-2.732194423675537,-3.168940544128418],"maxPosition",8,[1,5.005423069000244,2.6913199424743652,-0.5004947185516357]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[[31,"Giant_Hurt_01",".mp3",0.966531],-1],0,0,[],[],[]],[[[33,"Queen_Cannon"],[72,"Queen_Cannon",[-7,-8,-9],[[256,-5,[1,"dezuxWdVVLf59yg4Jit4C3"],-4,[-2,-3],15,16],[40,-6,[1,"69VcEqLwBODLxKRPArLwUG"],[17,18,19,20,21,22,23],24]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0],[1,50,50,50]],[209,"RootNode",1,[[[55,"Particle View 001",-11,[0,"a4SM53wWdOM6Y9Vffur/yA",1,0]],[55,"Particle View 001",-12,[0,"d6MyXLlsZAVI4knxp6r7iN",1,0]],[10,"Particle View 001",-13,[0,"25DkiFk8xNYZCD+y94VajG",1,0],[1,-974.6693115234375,0,-770.4366455078125]],[10,"Particle View 001",-14,[0,"74kI1P39RLuIygDrEPh7BI",1,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-15,[0,"02LQlLaWJD95nf1cUcOBFz",1,0],[1,-2.51513671875,0,-0.122467041015625]],[10,"Particle View 001",-16,[0,"f3hpc9mHdIQKWnh8fgQp0e",1,0],[1,3.418828248977661,0,0]],[55,"Particle View 001",-17,[0,"56xz8rsy9G3LYf9Ploc2vi",1,0]],[10,"Particle View 001",-18,[0,"dav8pP3H5Js6D5e/kQN7aO",1,0],[1,-974.6693115234375,0,-770.4366455078125]],[141,"Cylinder001",-19,[0,"04d+yEOtZOPbdD7v9GGsXi",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],-20,-21,[6,"Text001",-22,[0,"1darWD6DhL3YHGrPuDqygX",1,0],[1,21.825597763061523,0,0.5448083877563477],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[10,"Particle View 001",-23,[0,"beTrgHZDJO97RBQZk4fjxe",1,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-24,[0,"daBytr+S1CVLlPj5i7sIW8",1,0],[1,-2.51513671875,0,-0.122467041015625]],-25],4,4,4,4,4,4,4,4,4,1,1,4,4,4,1],[[170,false,-10,[1,"f7dpKnpP5EnppHfttgp4C/"],[5,6,7,8,9,10,11],12]],[0,"fdohoXughE6qee+teSFvlG",1,0]],[20,"Bip001 Spine",[-26,-27,-28,-29,-30,-31],[0,"d0baR9ktxFuredJAYM64b+",1,0],[1,0.09832262992858887,-0.00042510777711868286,0.00011793244630098343],[3,-0.13561834610839704,-0.13315269562988086,0.0024363007784324957,0.9817698754208322],[1,-15.418397647059559,-15.12989315514978,2.3440323024072107]],[43,"Bip001 R Hand",[[-32,-33,-34,-35,[12,"hammer",-36,[0,"e5RYF40ApG9IXgMbW0qmeJ",1,0],[1,0.16534423828125,0.09457814693450928,-0.03485417366027832],[3,0.1037332021629504,0.052986609586578186,0.005534035505063469,0.9931773338254194],[1,0.010000000707805157,0.009999995119869709,0.009999997913837433],[1,11.859598294143893,5.976885546716282,1.2597777837424924]]],1,1,1,1,4],[0,"cfMVbg3qJIqKqfriGzn8a4",1,0],[1,0.351168155670166,-5.960464477539063e-8,1.1920928955078125e-7],[3,0.612802256977328,-0.17791174059020548,-0.042681387853688066,0.7687646619964651],[1,75.17830140288902,-13.3389593357438,-16.479562722311194]],[20,"Bip001 L Hand",[-37,-38,-39,-40],[0,"a9okdh7BBHdpDDU/rv4dZ/",1,0],[1,0.351168155670166,0,-2.220446049250313e-16],[3,-0.7499124960287289,-0.16222131158130187,-0.15254828245310592,0.6229321920477471],[1,-99.87637006000219,-25.56366091686405,3.0523926555228487]],[93,"Bip001 Neck",3,[-41,-42,-43],[0,"f3MDXKDvRKhKB1HELj9jRj",1,0],[1,0.5543079376220703,-0.11576654016971588,5.960464477539063e-8]],[5,"Bip001 Head",6,[[10,"Bip001 HeadNub",-44,[0,"b7jdW4yxlGyZkF7ORQQQuW",1,0],[1,0.6926820278167725,1.4901161193847656e-8,-2.9802322387695312e-8]],[6,"Bone002",-45,[0,"6fzXZZL3tDSbYHh0M6IRmh",1,0],[1,0.8220129013061523,0.12468266487121582,0.1734778881072998],[3,0.20846727680880192,0.6665173233843568,0.02529570297165083,0.715301460602203],[1,16.17743143799568,83.33263785668862,18.30541650280896]],[6,"Bone001",-46,[0,"c1PjcTdD1EqJxW49M8O3Vf",1,0],[1,0.9148128032684326,-0.1821257621049881,0.23440569639205933],[3,-0.694639727363996,-0.1321915806576944,-0.13219095480893778,0.6946413366893701],[1,-89.9998624174352,-21.54929901036495,0.000025439458099341306]]],[0,"c9ZQkGKI1Alp/tTkipAyIu",1,0],[1,0.21116507053375244,-1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.16085119686755367,-0.010247585453703377,-0.029884288349998105,0.9864729133475784],[1,18.50297084191076,-0.608761577968074,-3.56935757836684]],[164,"Cylinder_L",false,[[-47,[70,true,-49,[1,"87f7ZpYDFOgYfh/I1M3Z9c"],[-48]]],1,4],[0,"6cl+ZaJSFCSaxuLGwtqsNm",1,0],[3,0,0,0.8660254037844386,0.5000000000000001],[1,0,0,120]],[164,"Cylinder_R",false,[[-50,[70,true,-52,[1,"bb9rWudCNKUKFFPO90pMUO"],[-51]]],1,4],[0,"f6H6wFDElJsaxb2kq8OSs4",1,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[165,"Object004",[[-53,[179,0.5,-55,[1,"40/YJzTAVA1ozc+GHZMSfx"],-54,[0,-0.6,0]]],1,4],[0,"7eK0xkzAhDV4S/EUlk4SkJ",1,0],[3,-0.5000001043081144,-0.49999989569186387,-0.49999989569186387,0.5000001043081144],[1,-13.805624008178711,-13.805624008178711,-13.805624008178711],[1,-90,-89.99997609433862,0]],[165,"Object004",[[-56,[179,0.5,-58,[1,"2eLv90ye9KJKaIGJyv+Xen"],-57,[0,-0.6,0]]],1,4],[0,"c5ld0TLcdG/rZG/rqrPzPI",1,0],[3,-0.5000001043081144,-0.49999989569186387,-0.49999989569186387,0.5000001043081144],[1,-13.805624008178711,-13.805624008178711,-13.805624008178711],[1,-90,-89.99997609433862,0]],[3,"Bip001",2,[-59],[0,"7dNgk8P+1BXamQ36RixslC",1,0],[1,8.570366105686844e-8,0.9804768562316895,-0.09285487234592438],[3,0.45580028794172206,0.540597907424958,0.540597907424958,-0.45580028794172206],[1,-90.00000000000003,-99.7287746072152,0]],[54,"Bip001 Pelvis",12,[3],[0,"e89wbIwzZLfZO8opp7+v8u",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 L Thigh",3,[-60],[0,"daKAwTryVLYqHO6ybiKIAu",1,0],[1,-0.021422505378723145,-0.07779741287231445,0.28698810935020447],[3,0.18964384126483788,0.8651524613511308,0.412054411484135,-0.21391024768547198],[1,-53.459002092910325,-147.81912210469616,8.734520088991712]],[3,"Bip001 L Calf",14,[-61],[0,"36+YZ4XVVC5bRDxiSU5IT/",1,0],[1,0.49940237402915955,-5.960464477539063e-8,-2.9802322387695312e-8],[3,5.08259182903796e-17,-2.6283199484837026e-17,-0.23018961001964997,0.9731457976269545],[1,5.564185646588463e-15,-1.7787828764396486e-15,-26.61647026937319]],[3,"Bip001 L Foot",15,[-62],[0,"5f1MVMxhpDcpp+Dx6CHHaW",1,0],[1,0.4148826003074646,1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.007560265791630779,-0.015713587560148172,0.059123114341569784,0.998098383375959],[1,0.9780097306367616,-1.8617255203016585,6.76421495422629]],[5,"Bip001 L Toe0",16,[[12,"Bip001 L Toe0Nub",-63,[0,"a8IgeiVLVOfbYETJNAzB64",1,0],[1,0.11261016130447388,-1.734723475976807e-18,5.551115123125783e-17],[3,1.0205723798614036e-13,-1.4210854715202004e-14,1,-6.123234262925839e-17],[1,-1.0000001192092896,-1,-1.0000001192092896],[1,179.99999999999838,-179.99999999998832,-7.016709604877195e-15]]],[0,"5517VW6CpB+KUym2L5kvez",1,0],[1,0.0845489650964737,0.18106068670749664,2.9802322387695312e-8],[3,2.8472948575454756e-7,1.7936293113516928e-7,0.7071070792096736,0.7071064831632157],[1,0,0.000046142407756426714,90]],[3,"Bip001 R Thigh",3,[-64],[0,"fetdwdSj5J44dRdp28mTxP",1,0],[1,-0.16827428340911865,0.07251804322004318,-0.2354380488395691],[3,0.022519320445838417,0.9975676027462722,-0.00020987840435860808,-0.06596752313653047],[1,-0.1463871518331418,-172.4299712092421,2.576702181656095]],[3,"Bip001 R Calf",18,[-65],[0,"10CNkFZBFE17Hz9nkxeUiv",1,0],[1,0.4994024634361267,-1.3877787807814457e-17,5.551115123125783e-17],[3,8.527968900637594e-18,4.075058883749535e-17,-0.2048349786371264,0.9787965220242294],[1,2.0882608398423004e-15,5.207846836336099e-15,-23.639678056352047]],[3,"Bip001 R Foot",19,[-66],[0,"48P6UfTRNBA7l0SatLzPu7",1,0],[1,0.4148825407028198,-1.4901161193847656e-8,0],[3,-0.010317276192047736,0.06582679574068374,0.16695225174239745,0.9837110004531995],[1,-2.5642430999182757,8.088009344332383,19.093289663536094]],[5,"Bip001 R Toe0",20,[[10,"Bip001 R Toe0Nub",-67,[0,"d4xwyYd2hCervPRhc/tG6P",1,0],[1,0.11261016130447388,9.313225746154785e-10,2.9802322387695312e-8]]],[0,"ccKM7uB4BE5b7YwdIvhYzy",1,0],[1,0.0845489576458931,0.1810607612133026,-2.9802322387695312e-8],[3,1.5116544008790577e-7,-5.956879180841961e-8,0.7071067215818898,0.7071068407911814],[1,0,0.000024497406122061066,90]],[3,"Bip001 L Clavicle",6,[-68],[0,"82cmEA96BP4Z8o3fwU/wzs",1,0],[1,-0.08568155765533447,0.03203679621219635,0.09742309153079987],[3,0.5752172397408709,-0.16957334959811965,0.7907380361775683,-0.12289574587026961],[1,172.08749430458533,-109.53894422823727,-22.91964099565828]],[3,"Bip001 L UpperArm",22,[-69],[0,"b1PbbBtN1ORK93ArADgP+U",1,0],[1,0.1703396737575531,2.9802322387695312e-8,-1.1920928955078125e-7],[3,0.1763767142970046,0.09378930872856892,0.012103856472216467,0.9797695223268122],[1,20.114777173280054,10.358369279630233,3.2562950329962614]],[3,"Bip001 L Forearm",23,[5],[0,"dcrrfMxN5G85TWwmA5JskN",1,0],[1,0.5310860872268677,0,-1.1920928955078125e-7],[3,2.0687733481406908e-20,3.4693846522485848e-18,-0.005962834134394834,0.9999822221465168],[1,4.741532095345928e-18,3.975975375628089e-16,-0.6832945088494221]],[3,"Bip001 L Finger0",5,[-70],[0,"47G5uqGEVOhpuSvshsxP0+",1,0],[1,0.12257134914398193,0.05296057462692261,-0.07330775260925293],[3,0.8781912923932006,0.3196219504270003,-0.3074812591451522,0.1791009158114835],[1,145.05770005510502,47.17739394679636,26.823145483727156]],[5,"Bip001 L Finger01",25,[[10,"Bip001 L Finger0Nub",-71,[0,"7fLQEBwyNM/6KeP4OuPsDo",1,0],[1,0.1176496297121048,2.9802322387695312e-8,0]]],[0,"76V4SJvTFBXKSk3N79Jqgi",1,0],[1,0.0950484573841095,-1.1920928955078125e-7,2.7755575615628914e-17],[3,-0.628641108558933,-0.13250153835669842,-0.1414574637750866,0.7531556843742362],[1,-80.22474866841188,-22.200509776108774,-2.664478222095746]],[3,"Bip001 L Finger1",5,[-72],[0,"e54nCdAC9IXZeGRsV9wfYY",1,0],[1,0.20349150896072388,0.005485415458679199,-0.0687604546546936],[3,-0.07252247012074971,-0.09263171415993805,-0.04575983886684383,0.992000954639791],[1,-8.790397684990882,-11.010621541508472,-4.436365873891449]],[5,"Bip001 L Finger11",27,[[10,"Bip001 L Finger1Nub",-73,[0,"14rjCyNXJPkZg1dcZwK3aw",1,0],[1,0.12315726280212402,5.960464477539063e-8,2.7755575615628914e-17]]],[0,"825Zc1frlB0LjWBQPUmtLT",1,0],[1,0.12139761447906494,0,-7.450580596923828e-9],[3,1.121796268493872e-8,-1.9129645305184788e-10,-0.10516757636238037,0.9944545142348458],[1,0.000001304915121097995,1.1595683885233938e-7,-12.073642867803345]],[3,"Bip001 L Finger2",5,[-74],[0,"17Za7xcJ9NAqOPeZCglHi2",1,0],[1,0.1929364800453186,0.0030515193939208984,0.04918539524078369],[3,-0.06814929942677685,-0.11456252802174566,-0.06902782720013878,0.9886689330776677],[1,-8.724436728342061,-13.749652453282463,-6.942697756334577]],[5,"Bip001 L Finger21",29,[[10,"Bip001 L Finger2Nub",-75,[0,"fd5bwhrKhPtbcO2ZY6W7nT",1,0],[1,0.11981213092803955,-2.220446049250313e-16,1.4901161193847656e-8]]],[0,"d9apZ+489M+5/4d09jssG1",1,0],[1,0.09083735942840576,0,-1.4901161193847656e-8],[3,-7.299723737106817e-9,-7.598442556401945e-9,0.020046663854511402,0.9997990454427852],[1,-8.195223298715811e-7,-8.544603977515415e-7,2.2973323528922256]],[101,"Axe02",5,[-76],[0,"baS4RXP05PhqdDJX7eTQPZ",1,0],[1,0.05137789249420166,0.03893786668777466,0.164404034614563],[3,0.977912102047815,-0.2090165559672814,1.124350471785386e-9,1.2144791516913189e-8],[1,0.009999998845160007,0.010000002570450306,0.009999999776482582],[1,179.99999847924147,-4.5679441634078775e-7,-24.129452292639858]],[3,"RootNode",31,[10],[0,"ebk4wpnB1BGrY/ZoLFDdHH",1,0],[1,0,0,1],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[137,0,10,[1,"e9ViRiQhZK7oE64ZFUungF"],[0],[7]],[3,"Bip001 R Clavicle",6,[-77],[0,"66Mimr1rZF5qo3jCTflEup",1,0],[1,-0.08568155765533447,0.03203733265399933,-0.09742364287376404],[3,0.7419154129220117,-0.00029453981873919885,-0.670493371677308,-0.0002680519566891448],[1,-179.95458061376746,84.21031975653288,-0.004445759562129794]],[3,"Bip001 R UpperArm",34,[-78],[0,"9cpxK8/8tBM6zZU8o0XWBz",1,0],[1,0.17033976316452026,-2.7755575615628914e-17,-2.384185791015625e-7],[3,0.33027151486609335,0.05135608504848214,-0.08661564507619904,0.9384993388514361],[1,39.35217298090638,8.91076066941571,-7.391850669757464]],[3,"Bip001 R Forearm",35,[4],[0,"0ft/sCPslJBr6T7Hj97mIY",1,0],[1,0.5310859680175781,5.960464477539063e-8,-1.1920928955078125e-7],[3,2.023164439043025e-19,1.3400663739957159e-18,-0.14928318233190227,0.9887944839413598],[1,4.798675491473711e-17,1.625453146112951e-16,-17.170776443445536]],[3,"Bip001 R Finger0",4,[-79],[0,"2bDY5PFaZPwY9SchLLtf2f",1,0],[1,0.12257134914398193,0.05296063423156738,0.07330769300460815],[3,0.7799380862624655,0.2138767199910593,0.3929392617306288,-0.43766661608317525],[1,-121.6976939764018,-53.14850782709409,-0.5919673003340226]],[5,"Bip001 R Finger01",37,[[12,"Bip001 R Finger0Nub",-80,[0,"90leXf7n9Gdo1kztKOvWQx",1,0],[1,0.1176496148109436,-4.440892098500626e-16,1.1102230246251565e-16],[3,6.938894731087841e-18,2.081668336608291e-17,1,1.4901162970204496e-8],[1,-0.9999999403953552,-0.9999999403953552,-0.9999999403953552],[1,-180,-180,0.0000017075474960586878]]],[0,"5cf3gSxwhEtrMyNVRpSHg6",1,0],[1,0.09504848718643188,4.440892098500626e-16,5.960464477539063e-8],[3,-1.4895973589470229e-8,3.931948720429685e-10,-0.026386861193428975,0.9996518061587036],[1,-0.000001707547394387378,-2.68934039623271e-15,-3.024062556762785]],[3,"Bip001 R Finger1",4,[-81],[0,"750/s9wtNEwqf+sIuOCbHR",1,0],[1,0.20349156856536865,0.005485415458679199,0.06876033544540405],[3,-0.050006837784108846,0.0802471059834462,0.046605528455372455,0.9944282995136002],[1,-6.160945999044759,9.488700781032874,4.856813370558287]],[5,"Bip001 R Finger11",39,[[12,"Bip001 R Finger1Nub",-82,[0,"8auWhUiD5FIpz1vDe7vUrV",1,0],[1,0.12315738201141357,-1.1920928955078125e-7,-2.9802322387695312e-8],[3,2.9103826015841605e-9,2.3283062144940914e-9,1,-6.80085995898479e-17],[1,-1.0000001192092896,-1.0000001192092896,-1.0000001192092896],[1,-179.99999973319575,-179.99999966649472,-7.016709038945616e-15]]],[0,"145I+3gRxJzqJwjJE7OHt8",1,0],[1,0.12139749526977539,1.1920928955078125e-7,2.9802322387695312e-8],[3,-9.811414872469271e-9,-1.6383877722784955e-10,0.09967269085415921,0.9950202785360162],[1,-0.0000011394758672531113,9.527452554082104e-8,11.440645759010083]],[3,"Bip001 R Finger2",4,[-83],[0,"d4ZJARCcBFnZFXfmjsxzO5",1,0],[1,0.19293653964996338,0.0030516386032104492,-0.04918545484542847],[3,0.07520547445978387,0.11005923804516107,-0.006837527675822342,0.9910521423958882],[1,8.66000886896155,12.660775992771356,0.17196904429900525]],[5,"Bip001 R Finger21",41,[[12,"Bip001 R Finger2Nub",-84,[0,"07XcLq77ZJLavq+CRLHvz+",1,0],[1,0.11981201171875,-2.384185791015625e-7,-1.1102230246251565e-16],[3,7.4505797087454084e-9,7.450580596923828e-9,1,1.4901159417490817e-8],[1,-1.0000001192092896,-1,-1],[1,-179.99999914622637,-179.9999991462265,0.0000017075470953087969]]],[0,"cc52BhH/dITbEWboS31H+h",1,0],[1,0.09083724021911621,1.1920928955078125e-7,-1.1920928955078125e-7],[3,7.425020522853513e-9,6.166102565785219e-10,0.08276003515004678,0.996569504140059],[1,8.53773543948039e-7,2.112784398315672e-15,9.494460840773806]],[101,"Axe01",4,[-85],[0,"a8kF53ZjRAjaU0pnZSOJLP",1,0],[1,0.15838634967803955,0.10607898235321045,-2.384185791015625e-7],[3,0.13905256002511174,0.1390527537402143,0.693299616770313,0.693299616770313],[1,0.010000001639127731,0.009999996051192284,0.010000000707805157],[1,0,22.68225880720928,90]],[3,"RootNode",43,[11],[0,"57DRthsldDG7kQijVtQ0Ga",1,0],[1,0,0,1],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[137,0,11,[1,"9dtvRHSAtBsKhxi8NBru1d"],[1],[7]],[5,"Bone003",3,[[6,"Bone004",-86,[0,"08IZz7GB1B95SL/Kbr87x0",1,0],[1,0.43474143743515015,2.220446049250313e-16,-5.21540641784668e-8],[3,-0.003042208923754976,-0.01332994719910931,-0.22248039858942797,0.9748412843719856],[1,-0.7543290695881619,-1.7389090487527268,-25.701651048245317]]],[0,"44Z/PVtJlLhZMRuykb8ZxA",1,0],[1,0.4550154209136963,-0.230758935213089,-4.172325134277344e-7],[3,-0.25061320727031206,0.961246112464032,-0.028984249886084956,-0.11117034169693966],[1,7.27721732295621,-164.96327342056045,-28.382633569121147]],[5,"Bone005",3,[[6,"Bone006",-87,[0,"a5qFwTsDBDF70xWeO9qlJm",1,0],[1,0.5124344825744629,0,0],[3,-0.09853565501024582,0.19447375455292312,-0.1525274038415705,0.9639533570454235],[1,-7.962095110542922,21.4480994015419,-19.41352668487176]]],[0,"f5yRiGTh1JDavhim0eMxoD",1,0],[1,0.4767824411392212,-0.1922014206647873,-0.20133483409881592],[3,-0.14430443585851757,0.9736476895943419,0.13424065377294878,0.11474255188798316],[1,-17.70985595353473,164.288522451603,-14.489177672464916]],[5,"Bone005(mirrored)",3,[[6,"Bone006(mirrored)",-88,[0,"33OyTUyOxAq7mEyz/horWI",1,0],[1,0.5124344825744629,-1.1920928955078125e-7,-4.470348358154297e-8],[3,0.0023879373292956703,-0.17823875978636075,-0.18754712751274874,0.9659458148503198],[1,-3.8304605041277346,-21.629929403880105,-21.29512594682061]]],[0,"f4EHkH5HpI94b/V5pd3lvz",1,0],[1,0.4767824411392212,-0.19220195710659027,0.20612064003944397],[3,-0.11269551391943791,0.0014923430117038709,-0.758532992624369,0.6418139864127986],[1,-141.04804680006447,-131.72458737132982,-76.90873965312838]],[3,"gun",2,[-89],[0,"05xAretoJAHbkq0YnDGXS6",1,0],[1,-1.2461202144622803,0.988793134689331,-0.29730814695358276],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"gun",49,[0,"40ZVNi6mFAu70CsbD1lr5c",1,0],[1,0,0,-0.55],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[28,"Queen",2,[[172,0,-90,[1,"abZbTOZoJGm6BdvW3fNLf+"],[2],[7],2,3,4]],[0,"54lU8Btn5CR5EFEESY8D4N",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.8311343193054199,0.8311343193054199,0.8311343193054199],[1,-90.00000000000003,0,0]],[101,"Throw_L",1,[8],[0,"0ce3jZ9q9I070V2U+kMOLr",1,0],[1,0.45,1.774,0],[3,0.5648625214636234,-0.142244259722924,-0.8067072841115988,-0.09960050292505118],[1,1.5,1.5,6],[1,200,110,0]],[137,0,8,[1,"becVzVcUtH7LTx/hNl3IJd"],[13],[7]],[101,"Throw_R",1,[9],[0,"80/GxECj1NXIIYHJ6sl2jC",1,0],[1,-1.032,1.774,0.363],[3,0.8121440849941729,0.0748667481840489,-0.568669410425347,0.10692079719031326],[1,1.5,1.5,6],[1,165,70,0]],[137,0,9,[1,"66P0fc4/BPEIS6bTWAg/Jv"],[14],[7]]],0,[0,4,1,0,-1,8,0,-2,9,0,41,50,0,0,1,0,0,1,0,-1,2,0,-2,52,0,-3,54,0,0,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,-10,12,0,-11,49,0,1,2,0,1,2,0,1,2,0,-15,51,0,-1,14,0,-2,18,0,-3,6,0,-4,46,0,-5,47,0,-6,48,0,-1,37,0,-2,39,0,-3,41,0,-4,43,0,1,4,0,-1,25,0,-2,27,0,-3,29,0,-4,31,0,-1,22,0,-2,34,0,-3,7,0,1,7,0,1,7,0,1,7,0,-1,53,0,-1,53,0,0,8,0,-1,55,0,-1,55,0,0,9,0,-1,33,0,28,33,0,0,10,0,-1,45,0,28,45,0,0,11,0,-1,13,0,-1,15,0,-1,16,0,-1,17,0,1,17,0,-1,19,0,-1,20,0,-1,21,0,1,21,0,-1,23,0,-1,24,0,-1,26,0,1,26,0,-1,28,0,1,28,0,-1,30,0,1,30,0,-1,32,0,-1,35,0,-1,36,0,-1,38,0,1,38,0,-1,40,0,1,40,0,-1,42,0,1,42,0,-1,44,0,1,46,0,1,47,0,1,48,0,-1,50,0,0,51,0,9,1,3,1,13,4,1,36,5,1,24,8,1,52,9,1,54,10,1,32,11,1,44,90],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,45,53,55],[-1,-1,-1,6,13,-1,-2,-3,-4,-5,-6,-7,7,-1,-1,42,43,-1,-2,-3,-4,-5,-6,-7,7,6,6,6,6],[177,177,337,178,179,57,74,180,181,182,183,184,57,185,185,338,339,186,340,341,342,343,344,345,186,40,40,75,75]],[[[31,"Collect_02",".mp3",2.507755],-1],0,0,[],[],[]],[[{"name":"wifi_bg","rect":{"x":2,"y":901,"width":23,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":23,"height":18},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"base":"2,2,0,0,0,0","mipmaps":["508OLTCnZPz7smjwMlD59J@bac6d"]}],[1],0,[],[],[]],[[[26,"Material #14",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[346,347,4]],[[[18,".bin",3117079743,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":256,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":256,"count":8,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6064713001251221,-0.000050008296966552734,-0.5171554684638977],"maxPosition",8,[1,0.606471061706543,-0.000050008296966552734,0.6723008155822754]]],-1],0,0,[],[],[]],[[[19],[32,"Rock_02",[-2],[0,"dcWPZKx/xUbrEZ2RL/DDjU",-1,0]],[44,"Object003",1,[[30,-3,[1,"72o1d9j1dURICGKBPkciI+"],[0],[7],1]],[0,"67OvcUpNNdzbLmYtRgHYR0",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[348,70]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["508OLTCnZPz7smjwMlD59J@f713f"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"name":"OnePunch_AceHit","rect":{"x":332,"y":628,"width":44,"height":209},"offset":{"x":0,"y":0},"originalSize":{"width":44,"height":209},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[33,"CannonLv_01"],[47,"CannonLv_01",[-3,-4,-5,-6],[[170,false,-2,[1,"f4j1C0HQZTmbKCMsJhxx9U"],[19],20]],[0,"6fcxnVe3dTd6Jv0DNtbMrb",-1,0]],[161,"TapOn",1,[-10,-11,-12],[[2,-7,[1,"1akQZmx4ZEmqTOvPc8NB82"],[5,0,0]],[40,-8,[1,"8bhJV3NIVFSb1siuL7VM02"],[9],10],[4,-9,[1,"fbgxEn6+pGqa2itwOMzwV2"]]],[0,"18m2a4IbhN8aLaEWEQZvhU",1,0],[1,0,1.119,0],[3,0.7071067811865475,1.585673897113876e-32,-1.585673897113873e-32,0.7071067811865476],[1,0.005,0.005,0.005],[1,90,2.569694547016882e-30,2.3122570343658168e-45]],[161,"GunFire",1,[-16,-17],[[2,-13,[1,"20zpjx6xFKkrQ86dYqERmQ"],[5,0,0]],[40,-14,[1,"64zyPvjTZJ2ql9YIWT5IEw"],[17],18],[4,-15,[1,"e7qYhZCydKF4wawwBiBqvO"]]],[0,"4az4lhqpNM6KPSuLnRVRfn",1,0],[1,0,0.6,1.9],[3,0.5,0.5,-0.4999999999999999,0.5000000000000001],[1,0.04,0.02,0.02],[1,90,90,0]],[191,"Light_effect_blur",false,3,[-21],[[2,-18,[1,"fe7TPtnVtL2b656ogKJp8x"],[5,186,187]],[24,1,-19,[1,"39gkQY7E9CzZwGiJ5INORr"],[4,4278229503],13,14],[15,0,-20,[1,"76PEF3y6lAapTC+K8+cH84"]]],[0,"c2XetpcSpFcb4aO3jNNnpA",1,0],[1,0.8,0.8,1]],[27,"Light_effect_blur02",2,[[2,-22,[1,"c4BcVOf7RC9a8C65MDpJbx"],[5,186,187]],[24,1,-23,[1,"09nPHwhC5CDLexP884WNOr"],[4,4294938368],3,4],[15,0,-24,[1,"e7/1ne2ktEaZfPLfo2d3fc"]]],[0,"68hVUBM7FCJ5O2Cw9FUt9n",1,0],[1,2.8,2.8,0]],[27,"Light_effect_blur01",2,[[2,-25,[1,"54iWbG9RRI/JuEtiiU8Jn7"],[5,186,187]],[24,1,-26,[1,"11QC7HGepHxr3j/mhy8FOo"],[4,4294930432],5,6],[15,0,-27,[1,"40U52moIhHkJlG8+7RMkrO"]]],[0,"51Uf9AUExNw6VltkBXw6jL",1,0],[1,1.2,1.2,0]],[27,"CircleLight",2,[[2,-28,[1,"b2ri+EMc9K96BimYBcsPnZ"],[5,108,108]],[24,1,-29,[1,"46c6PhVq1DMoMSRU/IT64t"],[4,4294940928],7,8],[15,0,-30,[1,"36m4bzrwZDRLw52vmfEjQ/"]]],[0,"a8njaeFhBE6KOHVlYU1kJA",1,0],[1,4,4,0]],[27,"Light_effect_blur01",4,[[2,-31,[1,"ea97NSYlJCTYQumhvBLwE8"],[5,186,187]],[24,1,-32,[1,"391tMnRjdB2KqHMIEgkbct"],[4,4278239999],11,12],[4,-33,[1,"e7GurdcTFIu7Z9sEVOfJ4k"]]],[0,"eatbC4Uy1HG7Ma89UeMvfh",1,0],[1,0.5,0.5,1]],[142,"GunFire",false,3,[[8,-34,[1,"57WsWpGZ1KO7vtBGZGjQ1F"],[5,110,80],[0,0.85,0.5]],[86,1,-35,[1,"77UfCylKVPF7wAvmFKr4+P"],15,16],[15,0,-36,[1,"car2KH6b5OEaTW5pS9/vIc"]]],[0,"a8s3+H43REWoPw5rxayEzD",1,0]],[5,"Connon",1,[[10,"Muzzle",-37,[0,"820JmQihFTlKDU72GqnmYH",1,0],[1,0,-1.5870170593261719,-0.204909086227417]]],[0,"4eGrT4HKtZw56W/YqZvXli",1,0],[1,0,0.800000011920929,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[44,"Cannon_01",1,[[172,0,-38,[1,"17wQrSDE1d95HcqSzKiuG4"],[0],[7],1,1,2]],[0,"c2qD/ni5lefo0VLzH2s1th",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,-1,10,0,-2,11,0,-3,2,0,-4,3,0,0,2,0,0,2,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,0,3,0,0,3,0,0,3,0,-1,4,0,-2,9,0,0,4,0,0,4,0,0,4,0,-1,8,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,1,10,0,0,11,0,9,1,38],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,-1,7],[349,187,188,2,26,2,26,2,39,189,189,2,26,2,26,2,350,190,190,58,58]],[[[125,"../game/res/shader/3d-unlit-custom-melt",[{"hash":3366370533,"name":"../game/res/shader/3d-unlit-custom-melt|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"Dissolve","stageFlags":17,"binding":0,"members":[{"name":"dissolveThreshold","type":13,"count":1},{"name":"noiseFloatSpeed","type":13,"count":1},{"name":"noiseEdgeWidth","type":14,"count":1},{"name":"offsetEdge","type":13,"count":1}],"defines":[]},{"name":"TexCoords","stageFlags":1,"binding":1,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"ShinyUVSecond","stageFlags":1,"binding":2,"members":[{"name":"tilingOffset01","type":16,"count":1},{"name":"flashRotateDelta","type":13,"count":1}],"defines":["USE_SHINY_UV_SECOND"]},{"name":"UseShinyUV","stageFlags":16,"binding":3,"members":[{"name":"flashTintColor","type":16,"count":1},{"name":"flashSpeed","type":13,"count":1}],"defines":["USE_SHINY_UV_SECOND"]},{"name":"FragConstants","stageFlags":16,"binding":4,"members":[{"name":"tintColor","type":16,"count":1},{"name":"noiseTintColor","type":16,"count":1}],"defines":["USE_DISSOVEFUNC"]},{"name":"Constant","stageFlags":16,"binding":5,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]},{"name":"RimLightValue","stageFlags":16,"binding":6,"members":[{"name":"rimColor","type":16,"count":1},{"name":"rimParam","type":16,"count":1}],"defines":["USE_RIM_LIGHT"]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_TEXTURE"]},{"name":"flashTexture","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_SHINY_UV_SECOND"]},{"name":"maskTexture","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_SHINY_UV_SECOND"]},{"name":"noiseTexture","type":28,"count":1,"stageFlags":16,"binding":10,"defines":["USE_DISSOVEFUNC"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":["USE_SHINY_UV_SECOND"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(std140) uniform Dissolve {\n  float dissolveThreshold;\n  float noiseFloatSpeed;\n  vec2  noiseEdgeWidth;\n  float offsetEdge;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_RIM_LIGHT\n  out vec3 v_worldNormal;\n  out vec3 v_worldPos;\n#endif\n#if USE_SHINY_UV_SECOND\n  in vec2 a_texCoord1;\n  out vec2 v_uv1;\n  layout(std140) uniform ShinyUVSecond {\n    vec4 tilingOffset01;\n    float flashRotateDelta;\n  };\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  #if USE_RIM_LIGHT\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n  #else\n    mat4 matWorld;\n    CCGetWorldMatrix(matWorld);\n  #endif\n  #if USE_RIM_LIGHT\n    v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.)).xyz);\n    v_worldPos = (matWorld * In.position).xyz;\n  #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_SHINY_UV_SECOND\n    v_uv1 = a_texCoord1 * tilingOffset01.xy + tilingOffset01.zw;\n    #if ENABLE_ROTATE\n      vec2 pivot = vec2(0.5, 0.5);\n      v_uv1 -= pivot;\n      float cos_value = cos(flashRotateDelta);\n      float sin_value = sin(flashRotateDelta);\n      v_uv1 = vec2(v_uv1.x * cos_value - v_uv1.y * sin_value, v_uv1.x * sin_value + v_uv1.y * cos_value);\n      v_uv1 += pivot;\n    #endif\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * In.position);\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\nlayout(std140) uniform Dissolve {\n  float dissolveThreshold;\n  float noiseFloatSpeed;\n  vec2  noiseEdgeWidth;\n  float offsetEdge;\n};\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_SHINY_UV_SECOND\n  in vec2 v_uv1;\n  uniform sampler2D flashTexture;\n  uniform sampler2D maskTexture;\n  layout(std140) uniform UseShinyUV {\n    vec4 flashTintColor;\n    float flashSpeed;\n  };\n#endif\n#if USE_DISSOVEFUNC\n  uniform sampler2D noiseTexture;\n  layout(std140) uniform FragConstants {\n  vec4 tintColor;\n  vec4 noiseTintColor;\n};\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_RIM_LIGHT\n  in vec3 v_worldPos;\n  in vec3 v_worldNormal;\n  layout(std140) uniform RimLightValue {\n    vec4 rimColor;\n    vec4 rimParam;\n  };\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_SHINY_UV_SECOND\n    vec2 uv1 = v_uv * 10.0;\n    uv1.y -= cc_time.x * flashSpeed;\n    vec4 maskColor = texture(maskTexture, v_uv);\n    vec4 flashColor = texture(flashTexture, uv1);\n    float grayflash = dot(flashColor.rgb, vec3(0.299, 0.587, 0.114));\n    vec4 grayflashColor = vec4(grayflash, grayflash, grayflash, flashColor.a);\n    flashColor.rgb = SRGBToLinear(grayflashColor.rgb);\n    flashColor = flashColor + (flashColor * flashTintColor * (flashTintColor.a * 3.0));\n    if (maskColor.b > .02) {\n      o.rgb = o.rgb * .7 + o.rgb * (flashColor.rgb * 1.5);\n    }\n  #endif\n  #if USE_DISSOVEFUNC\n  vec2 f_uv = v_uv;\n  f_uv -= cc_time.x * 1.0 * noiseFloatSpeed;\n  vec2 f_uv2 = v_uv;\n  f_uv2 -= cc_time.x * 1.5 * noiseFloatSpeed;\n  vec4 mainColor = texture( mainTexture, v_uv );\n  vec4 noiseTexColor = texture( noiseTexture, f_uv);\n  vec4 noiseTexColor2 = texture( noiseTexture, f_uv2);\n  vec4 noiseTexColorMix = noiseTexColor * noiseTexColor2;\n  vec4 stepColor = vec4(1,1,1,1) * step( dissolveThreshold, noiseTexColorMix.r );\n  vec4 displayArea = vec4(1,1,1,1) - stepColor;\n  vec4 smoothStepColor = vec4(1,1,1,1) * smoothstep(  noiseEdgeWidth.x + offsetEdge + dissolveThreshold, noiseEdgeWidth.y + offsetEdge + dissolveThreshold, noiseTexColorMix.r ) - displayArea;\n  o =  ( mainColor * displayArea * tintColor ) + ( smoothStepColor * noiseTintColor );\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  #if USE_RIM_LIGHT\n    if (rimColor.w > 0.0) {\n      vec3 worldNor = normalize(v_worldNormal);\n      vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);\n      float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));\n      o.rgb = mix(o.rgb, rimColor.rgb * rimParam.y, rimColor.w * pow(theta, rimParam.x));\n    }\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\n#if USE_RIM_LIGHT\n  varying vec3 v_worldNormal;\n  varying vec3 v_worldPos;\n#endif\n#if USE_SHINY_UV_SECOND\n  attribute vec2 a_texCoord1;\n  varying vec2 v_uv1;\n      uniform vec4 tilingOffset01;\n    uniform float flashRotateDelta;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  #if USE_RIM_LIGHT\n    mat4 matWorld, matWorldIT;\n    CCGetWorldMatrixFull(matWorld, matWorldIT);\n  #else\n    mat4 matWorld;\n    CCGetWorldMatrix(matWorld);\n  #endif\n  #if USE_RIM_LIGHT\n    v_worldNormal = normalize((matWorldIT * vec4(In.normal, 0.)).xyz);\n    v_worldPos = (matWorld * In.position).xyz;\n  #endif\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_SHINY_UV_SECOND\n    v_uv1 = a_texCoord1 * tilingOffset01.xy + tilingOffset01.zw;\n    #if ENABLE_ROTATE\n      vec2 pivot = vec2(0.5, 0.5);\n      v_uv1 -= pivot;\n      float cos_value = cos(flashRotateDelta);\n      float sin_value = sin(flashRotateDelta);\n      v_uv1 = vec2(v_uv1.x * cos_value - v_uv1.y * sin_value, v_uv1.x * sin_value + v_uv1.y * cos_value);\n      v_uv1 += pivot;\n    #endif\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * In.position);\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n    uniform float dissolveThreshold;\n    uniform float noiseFloatSpeed;\n    uniform vec2 noiseEdgeWidth;\n    uniform float offsetEdge;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_SHINY_UV_SECOND\n  varying vec2 v_uv1;\n  uniform sampler2D flashTexture;\n  uniform sampler2D maskTexture;\n      uniform vec4 flashTintColor;\n    uniform float flashSpeed;\n#endif\n#if USE_DISSOVEFUNC\n  uniform sampler2D noiseTexture;\n      uniform vec4 tintColor;\n    uniform vec4 noiseTintColor;\n#endif\n     uniform vec4 mainColor;\n     uniform vec4 colorScaleAndCutoff;\n#if USE_RIM_LIGHT\n  varying vec3 v_worldPos;\n  varying vec3 v_worldNormal;\n      uniform vec4 rimColor;\n    uniform vec4 rimParam;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_SHINY_UV_SECOND\n    vec2 uv1 = v_uv * 10.0;\n    uv1.y -= cc_time.x * flashSpeed;\n    vec4 maskColor = texture2D(maskTexture, v_uv);\n    vec4 flashColor = texture2D(flashTexture, uv1);\n    float grayflash = dot(flashColor.rgb, vec3(0.299, 0.587, 0.114));\n    vec4 grayflashColor = vec4(grayflash, grayflash, grayflash, flashColor.a);\n    flashColor.rgb = SRGBToLinear(grayflashColor.rgb);\n    flashColor = flashColor + (flashColor * flashTintColor * (flashTintColor.a * 3.0));\n    if (maskColor.b > .02) {\n      o.rgb = o.rgb * .7 + o.rgb * (flashColor.rgb * 1.5);\n    }\n  #endif\n  #if USE_DISSOVEFUNC\n  vec2 f_uv = v_uv;\n  f_uv -= cc_time.x * 1.0 * noiseFloatSpeed;\n  vec2 f_uv2 = v_uv;\n  f_uv2 -= cc_time.x * 1.5 * noiseFloatSpeed;\n  vec4 mainColor = texture2D(mainTexture, v_uv );\n  vec4 noiseTexColor = texture2D(noiseTexture, f_uv);\n  vec4 noiseTexColor2 = texture2D(noiseTexture, f_uv2);\n  vec4 noiseTexColorMix = noiseTexColor * noiseTexColor2;\n  vec4 stepColor = vec4(1,1,1,1) * step( dissolveThreshold, noiseTexColorMix.r );\n  vec4 displayArea = vec4(1,1,1,1) - stepColor;\n  vec4 smoothStepColor = vec4(1,1,1,1) * smoothstep(  noiseEdgeWidth.x + offsetEdge + dissolveThreshold, noiseEdgeWidth.y + offsetEdge + dissolveThreshold, noiseTexColorMix.r ) - displayArea;\n  o =  ( mainColor * displayArea * tintColor ) + ( smoothStepColor * noiseTintColor );\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  #if USE_RIM_LIGHT\n    if (rimColor.w > 0.0) {\n      vec3 worldNor = normalize(v_worldNormal);\n      vec3 viewDir = normalize(cc_cameraPos.xyz - v_worldPos);\n      float theta = 1. - clamp(0., 1., dot(worldNor, viewDir));\n      o.rgb = mix(o.rgb, rimColor.rgb * rimParam.y, rimColor.w * pow(theta, rimParam.x));\n    }\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":79,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":56}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"USE_RIM_LIGHT","type":"boolean"},{"name":"USE_SHINY_UV_SECOND","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"ENABLE_ROTATE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_DISSOVEFUNC","type":"boolean"}]},{"hash":2765152188,"name":"../game/res/shader/3d-unlit-custom-melt|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_ALPHA_TEST\n    #if USE_TEXTURE\n      o *= texture(mainTexture, v_uv);\n    #endif\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp vec4 cc_cameraPos;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nuniform highp mat4 cc_matLightViewProj;\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\nvec4 frag () {\n  vec4 o = mainColor;\n  #if USE_ALPHA_TEST\n    #if USE_TEXTURE\n      o *= texture2D(mainTexture, v_uv);\n    #endif\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":89,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":103}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"../game/res/shader/3d-unlit-custom-melt|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"maskTexture":{"value":"grey","type":28},"flashTintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"flashTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset01":{"type":16,"value":[1,1,0,0]},"flashRotateDelta":{"type":13,"value":[0]},"flashSpeed":{"type":13,"value":[1.5]},"rimColor":{"linear":true,"type":16,"value":[1,1,1,0]},"rimExp":{"type":13,"value":[2.7],"handleInfo":["rimParam",0,13]},"rimScale":{"type":13,"value":[1.5],"handleInfo":["rimParam",1,13]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTexture":{"value":"grey","type":28},"noiseFloatSpeed":{"type":13,"value":[1]},"offsetEdge":{"type":13,"value":[0]},"noiseEdgeWidth_Max":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",0,13]},"noiseEdgeWidth_Min":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",1,13]},"dissolveThreshold":{"type":13,"value":[0.5]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"rimParam":{"type":16,"value":[2.7,1.5,0,0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"noiseEdgeWidth":{"type":14,"value":[0.5,0.5]},"mainColor":{"type":16,"value":[0,0,0,0]}}},{"phase":"shadow-caster","propertyIndex":0,"program":"../game/res/shader/3d-unlit-custom-melt|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"../game/res/shader/3d-unlit-custom-melt|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"maskTexture":{"value":"grey","type":28},"flashTintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"flashTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset01":{"type":16,"value":[1,1,0,0]},"flashRotateDelta":{"type":13,"value":[0]},"flashSpeed":{"type":13,"value":[1.5]},"rimColor":{"linear":true,"type":16,"value":[1,1,1,0]},"rimExp":{"type":13,"value":[2.7],"handleInfo":["rimParam",0,13]},"rimScale":{"type":13,"value":[1.5],"handleInfo":["rimParam",1,13]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTexture":{"value":"grey","type":28},"noiseFloatSpeed":{"type":13,"value":[1]},"offsetEdge":{"type":13,"value":[0]},"noiseEdgeWidth_Max":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",0,13]},"noiseEdgeWidth_Min":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",1,13]},"dissolveThreshold":{"type":13,"value":[0.5]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"rimParam":{"type":16,"value":[2.7,1.5,0,0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"noiseEdgeWidth":{"type":14,"value":[0.5,0.5]},"mainColor":{"type":16,"value":[0,0,0,0]}}}]},{"name":"add","passes":[{"program":"../game/res/shader/3d-unlit-custom-melt|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"maskTexture":{"value":"grey","type":28},"flashTintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"flashTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset01":{"type":16,"value":[1,1,0,0]},"flashRotateDelta":{"type":13,"value":[0]},"flashSpeed":{"type":13,"value":[1.5]},"rimColor":{"linear":true,"type":16,"value":[1,1,1,0]},"rimExp":{"type":13,"value":[2.7],"handleInfo":["rimParam",0,13]},"rimScale":{"type":13,"value":[1.5],"handleInfo":["rimParam",1,13]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTexture":{"value":"grey","type":28},"noiseFloatSpeed":{"type":13,"value":[1]},"offsetEdge":{"type":13,"value":[0]},"noiseEdgeWidth_Max":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",0,13]},"noiseEdgeWidth_Min":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",1,13]},"dissolveThreshold":{"type":13,"value":[0.5]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"rimParam":{"type":16,"value":[2.7,1.5,0,0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"noiseEdgeWidth":{"type":14,"value":[0.5,0.5]},"mainColor":{"type":16,"value":[0,0,0,0]}}}]},{"name":"alpha-blend","passes":[{"program":"../game/res/shader/3d-unlit-custom-melt|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"maskTexture":{"value":"grey","type":28},"flashTintColor":{"linear":true,"type":16,"value":[1,1,1,1]},"flashTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"tilingOffset01":{"type":16,"value":[1,1,0,0]},"flashRotateDelta":{"type":13,"value":[0]},"flashSpeed":{"type":13,"value":[1.5]},"rimColor":{"linear":true,"type":16,"value":[1,1,1,0]},"rimExp":{"type":13,"value":[2.7],"handleInfo":["rimParam",0,13]},"rimScale":{"type":13,"value":[1.5],"handleInfo":["rimParam",1,13]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTintColor":{"type":16,"value":[0.5,0.5,0.5,0.5]},"noiseTexture":{"value":"grey","type":28},"noiseFloatSpeed":{"type":13,"value":[1]},"offsetEdge":{"type":13,"value":[0]},"noiseEdgeWidth_Max":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",0,13]},"noiseEdgeWidth_Min":{"type":13,"value":[0.5],"handleInfo":["noiseEdgeWidth",1,13]},"dissolveThreshold":{"type":13,"value":[0.5]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"handleInfo":["mainColor",0,16]},"rimParam":{"type":16,"value":[2.7,1.5,0,0]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"noiseEdgeWidth":{"type":14,"value":[0.5,0.5]},"mainColor":{"type":16,"value":[0,0,0,0]}}}]}]]],0,0,[],[],[]],[[[31,"Monster_Hurt_02",".mp3",0.653061],-1],0,0,[],[],[]],[[[125,"../game/res/shader/3d-flat-river",[{"hash":2803451968,"name":"../game/res/shader/3d-flat-river|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_ALBEDO_MAP"]},{"name":"shineTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":4,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":5,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":6,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 uv0;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  uv0 = a_texCoord;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nin vec3 v_position;\nin vec2 uv0;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n  uniform sampler2D normalTexture;\n  uniform sampler2D shineTexture;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec3 getNormal(vec4 norm) {\n  return normalize(norm.rgb * 2.0 - 1.0);\n}\nfloat calcVignette(vec2 pixCoord, vec4 borderExtent, float smoothValue) {\n  vec4 rect = vec4(borderExtent.xy, 1. - (borderExtent.xy + borderExtent.zw));\n  vec4 rectSmooth = smoothstep(rect - smoothValue, rect + smoothValue, vec4(pixCoord, 1. - pixCoord));\n  return rectSmooth.x * rectSmooth.y * rectSmooth.z * rectSmooth.w;\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 o = baseColor;\n    vec2 offset = vec2(cc_time.x * .05, 0.);\n    vec2 b1 = getNormal(texture(normalTexture, v_uv * .8 + offset)).xy;\n    vec2 b2 = getNormal(texture(normalTexture, v_uv * .4 - offset * .2)).xy;\n    vec2 water_uv = v_uv + offset * 1.5 + ((b1 + b2) * .15);\n    vec4 texColor = texture(albedoMap, water_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n    float mixing = texture(shineTexture, (b1 + b2) * 1.2).a;\n    float t = clamp(mixing * .92, 0., 1.);\n    vec3 sun = mix(vec3(1.), o.rgb, .9) * 6.;\n    vec3 shine = mix(o.rgb, sun, pow(t, 8.));\n    o.rgb = shine;\n    vec2 vigParam = vec2(.1, .3);\n    float vig = calcVignette(uv0, vec4(vec2(vigParam.x), vec2(1. - vigParam.x * 2.)), vigParam.y);\n    o.rgb *= vig;\n    baseColor = o;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n}\nvec4 MyUnlitShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb;\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  vec3 finalColor = diffuse * shadow;\n  return vec4(finalColor, s.albedo.a);\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(MyUnlitShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 uv0;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  uv0 = a_texCoord;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_time;\n  uniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nvarying vec3 v_position;\nvarying vec2 uv0;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n  uniform sampler2D normalTexture;\n  uniform sampler2D shineTexture;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec3 getNormal(vec4 norm) {\n  return normalize(norm.rgb * 2.0 - 1.0);\n}\nfloat calcVignette(vec2 pixCoord, vec4 borderExtent, float smoothValue) {\n  vec4 rect = vec4(borderExtent.xy, 1. - (borderExtent.xy + borderExtent.zw));\n  vec4 rectSmooth = smoothstep(rect - smoothValue, rect + smoothValue, vec4(pixCoord, 1. - pixCoord));\n  return rectSmooth.x * rectSmooth.y * rectSmooth.z * rectSmooth.w;\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 o = baseColor;\n    vec2 offset = vec2(cc_time.x * .05, 0.);\n    vec2 b1 = getNormal(texture2D(normalTexture, v_uv * .8 + offset)).xy;\n    vec2 b2 = getNormal(texture2D(normalTexture, v_uv * .4 - offset * .2)).xy;\n    vec2 water_uv = v_uv + offset * 1.5 + ((b1 + b2) * .15);\n    vec4 texColor = texture2D(albedoMap, water_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n    float mixing = texture2D(shineTexture, (b1 + b2) * 1.2).a;\n    float t = clamp(mixing * .92, 0., 1.);\n    vec3 sun = mix(vec3(1.), o.rgb, .9) * 6.;\n    vec3 shine = mix(o.rgb, sun, pow(t, 8.));\n    o.rgb = shine;\n    vec2 vigParam = vec2(.1, .3);\n    float vig = calcVignette(uv0, vec4(vec2(vigParam.x), vec2(1. - vigParam.x * 2.)), vigParam.y);\n    o.rgb *= vig;\n    baseColor = o;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n}\nvec4 MyUnlitShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb;\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  vec3 finalColor = diffuse * shadow;\n  return vec4(finalColor, s.albedo.a);\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(MyUnlitShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_IBL","CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":132,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":104}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2293664903,"name":"../game/res/shader/3d-flat-river|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"tilingOffset","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":13,"defines":["HAS_SECOND_UV"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 tilingOffset;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALPHA_TEST\n    #if USE_ALBEDO_MAP\n      baseColor *= texture(albedoMap, ALBEDO_UV);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALPHA_TEST\n    #if USE_ALBEDO_MAP\n      baseColor *= texture2D(albedoMap, ALBEDO_UV);\n    #endif\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":47,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":104}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"ALBEDO_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r"]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"../game/res/shader/3d-flat-river|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalTexture":{"value":"grey","type":28},"shineTexture":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../game/res/shader/3d-flat-river|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../game/res/shader/3d-flat-river|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"../game/res/shader/3d-flat-river|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"normalTexture":{"value":"grey","type":28},"shineTexture":{"value":"grey","type":28},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}},{"phase":"forward-add","propertyIndex":0,"program":"../game/res/shader/3d-flat-river|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"../game/res/shader/3d-flat-river|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[31,"Giant_Hurt_02",".mp3",1.227755],-1],0,0,[],[],[]],[[[23,"Axe_GlowFx",[{"rasterizerState":{"cullMode":1},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_DIFFUSE_TEXTURE":true}],[[[{},"mainTexture",6,0,"glowTexture",6,1,"diffuseTexture",6,2]],11]]],0,0,[0,0,0,0],[10,44,45,8],[46,351,46,352]],[[{"name":"old_hit_normal","rect":{"x":2,"y":186,"width":176,"height":176},"offset":{"x":0,"y":0},"originalSize":{"width":176,"height":176},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Activity_whiteHQ1","rect":{"x":259,"y":69,"width":40,"height":44},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":44},"rotated":false,"capInsets":[5,8,5,22],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Icon_Time","rect":{"x":258,"y":195,"width":44,"height":50},"offset":{"x":0.5,"y":0},"originalSize":{"width":45,"height":50},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["58D1IjOVJLPpONBi869EGZ"]}],[1],0,[],[],[]],[[{"name":"WaterSplash03_00000","rect":{"x":23,"y":45,"width":82,"height":74},"offset":{"x":0,"y":-18},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-41,-37,0,41,-37,0,-41,37,0,41,37,0],"indexes":[0,1,2,2,1,3],"uv":[23,83,105,83,23,9,105,9],"nuv":[0.1796875,0.0703125,0.8203125,0.0703125,0.1796875,0.6484375,0.8203125,0.6484375],"minPos":{"x":-41,"y":-37,"z":0},"maxPos":{"x":41,"y":37,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[191]],[[[23,"Weapon_Stone_01",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[353,10]],[[[33,"AxeBullet"],[47,"AxeBullet",[-6],[[257,-5,[1,"caDsMru3tP57RHr04eLgS7"],-4,-3,-2,6]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[78,"Axe",1,[-7,-8],[0,"cdpkqnl4pAPqvcEHgyxZEo",1,0],[1,55,55,55]],[77,"Light",2,[-10],[[21,true,-9,[1,"2f0dy7BbtErIe5vamJA+wq"],[4],5]],[0,"76mkhm9+5MJbtTzswF0MA5",1,0]],[28,"Object004",2,[[74,1,0,-11,[1,"c124G25sdOeYC0OWxE64Pk"],[0],[7],1]],[0,"20e6OlvmZMlIeHAZGQKBuY",1,0],[3,0.6123725634466226,-0.6123723079449397,-0.35355331683628344,-0.35355346435024887],[1,-13.805624008178711,13.805624008178714,13.805624008178713],[1,-90.00001380194004,89.99997239611992,-29.999999999997108]],[48,"RootNode",3,[-12],[0,"30K/8CiVxAbIsk9Vq/RqOy",1,0]],[28,"Quad",5,[[83,"Quad<ModelComponent>",0,-13,[1,"fa/1FKo3ZMarACxHi9WgXX"],[2],[7],3]],[0,"76yCFJBqxLZIVkdLjbN57j",1,0],[3,0.6123724356957945,-0.3535533905932738,-0.6123724356957946,0.35355339059327384],[1,4,4,1],[1,0,-90,-120]]],0,[0,4,1,0,46,3,0,29,4,0,47,2,0,0,1,0,-1,2,0,-1,4,0,-2,3,0,0,3,0,-1,5,0,0,4,0,-1,6,0,0,6,0,9,1,13],[0,0,0,0,0,0,0],[-1,6,-1,6,-1,7,30],[354,40,192,17,193,193,355]],[[{"base":"2,2,0,0,0,0","mipmaps":["59ULXs6CZCOY80VtHQFS2X@692aa"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[19],[32,"Bullet_S02_speed",[-2],[0,"2cLok8SVxb/bkWMK79y8Uc",-1,0]],[28,"Cylinder001",1,[[30,-3,[1,"23PXCU2DJWR7RcWKlPTKe3"],[0],[7],1]],[0,"74juZ2515TG6zKH4fHhOVr",1,0],[3,3.908834656235628e-9,-0.7071065427679242,3.908832435789541e-9,0.7071070196050905],[1,1,1,3.953686475753784],[1,6.33453591351151e-7,-89.99996136261471,3.366523828498091e-14]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[356,75]],[[[26,"Material #464",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[194,194,4]],[[[18,".bin",60508054,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1600,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1600,"count":50,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.3064451217651367,-1.3064451217651367,-0.08579863607883453],"maxPosition",8,[1,1.3064451217651367,1.3064450025558472,0.08579863607883453]]],-1],0,0,[],[],[]],[[[18,".bin",3622899010,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2688,"length":336,"count":84,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2688,"count":84,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.441656231880188,-1.4480586051940918,-0.5053151845932007],"maxPosition",8,[1,1.4210268259048462,1.4451947212219238,-0.008759021759033203]]],-1],0,0,[],[],[]],[[[19],[32,"Boss_floor_s",[-2],[0,"07ZgT1XfJU5pEa4T5jWb/2",-1,0]],[44,"Boss_floor_s",1,[[30,-3,[1,"00mwkr+/1c7JCm7r2VI+is"],[0],[7],1]],[0,"6ao6Kz0ZJXA5UN0qmbIoJQ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[357,67]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[358,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[[33,"PropertyRes"],[192,"PropertyRes",0,[[258,-2,[1,"8a7CzPfbdO5YgrDmKtAQjr"],[12,13,14,15,16,17,18,19],0,1,2,3,4,5,6,7,8,9,10,11]],[0,"a6BxCH1ftPgKzWqOL9CaHW",-1,0]]],0,[0,4,1,0,0,1,0,9,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[48,49,50,51,52,53,54,55,56,57,58,59,-1,-2,-3,-4,-5,-6,-7,-8],[359,360,361,362,363,364,365,366,367,368,369,370,195,195,371,372,373,374,375,376]],[[[19],[32,"s1_04",[-2],[0,"3ajuGlbW5VvJ6N4N7Q8Je+",-1,0]],[27,"Plane025",1,[[30,-3,[1,"23J1od06tS+IeK5r+VFyQt"],[0],[7],1]],[0,"a5CaQtRgVScIb/Zl4owSbz",1,0],[1,0.06396088749170303,0.06396088749170303,0.06396088749170303]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[377,125]],[[{"base":"2,2,0,0,0,0","mipmaps":["60ErW61FpEzb3k+PwfvCPp@ba695"]}],[1],0,[],[],[]],[[[18,".bin",1963352354,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-2.8359720706939697,-1.8683634996414185,2.7991220452605603e-9],"maxPosition",8,[1,2.835970163345337,1.8683631420135498,1.3334818049770547e-7]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[196,196,4]],[[[19],[32,"Rock_01",[-2],[0,"1d6KxW0eRQe7ylGCnkc/k/",-1,0]],[44,"Object002",1,[[30,-3,[1,"4a7J2Dc2leSZTRf/K2boEg"],[0],[7],1]],[0,"d4dHwBgvFSUpb6BH2M7X5N",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[378,69]],[[{"base":"2,2,0,0,0,0","mipmaps":["60gyGh13hN45fkhuH5L5E3@bac6d"]}],[1],0,[],[],[]],[[[26,"Material #14",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[379,380,4]],[[[18,".bin",682093916,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":384,"length":48,"count":12,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":384,"count":12,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7559361457824707,-1.1340219974517822,-0.000049958358431467786],"maxPosition",8,[1,0.7559363842010498,1.1340219974517822,-0.00004995765266357921]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["60gyGh13hN45fkhuH5L5E3@f713f"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["61wSCwCn1ObIccFY28KD1l@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[197,197,4]],[[[19],[32,"s1_16",[-2],[0,"69oO4PfkFUhr30FdGQ1r4U",-1,0]],[27,"Plane011",1,[[30,-3,[1,"4fkPvFMsld0J5/pAmUT6Ta"],[0],[7],1]],[0,"54HK0M+3VSHYrJF6eeN7OJ",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[381,382]],[[[18,".bin",838720525,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7675901651382446,-1.3847768306732178,-8.782901090853557e-7],"maxPosition",8,[1,0.7675909996032715,1.3847768306732178,-8.630368597550842e-7]]],-1],0,0,[],[],[]],[[[23,"Material #1993714",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[383,4]],[[[65,"Skin-0",1177960716,["Connon","Connon/Muzzle"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,-4.8985874103406714e-17,-0.800000011920929,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,1.5870170593261719,-0.595090925693512,1]],8,8]]],0,0,[],[],[]],[[[19],[47,"CannonLv_01attack",[-3,-4],[[63,-2,[1,"f4j1C0HQZTmbKCMsJhxx9U"],[3],4]],[0,"6fcxnVe3dTd6Jv0DNtbMrb",-1,0]],[5,"Connon",1,[[10,"Muzzle",-5,[0,"820JmQihFTlKDU72GqnmYH",1,0],[1,0,-1.5870170593261719,-0.204909086227417]]],[0,"4eGrT4HKtZw56W/YqZvXli",1,0],[1,0,0.800000011920929,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[44,"Cannon_01",1,[[64,-6,[1,"17wQrSDE1d95HcqSzKiuG4"],[0],[7],1,1,2]],[0,"c2qD/ni5lefo0VLzH2s1th",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,-1,2,0,-2,3,0,1,2,0,0,3,0,9,1,6],[0,0,0,0,0],[-1,6,13,-1,7],[384,187,188,58,58]],[[[18,".bin",241332332,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":19488,"length":5136,"count":1284,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19488,"count":348,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1]]},"minPosition",8,[1,-0.6572305560112,-1.7567472457885742,0.18549519777297974],"maxPosition",8,[1,0.6572305560112,0.6513766050338745,1.090503454208374]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["41eLo59L9NQ4jU7EeH2c3k"]}],[1],0,[],[],[]],[[[26,"Material #18",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[385,386,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["a1lreGTc9AeZTH9iNhMYrb"]}],[1],0,[],[],[]],[[[18,".bin",2802799823,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-115.99488830566406,-58.355499267578125,-1.7501020431518555],"maxPosition",8,[1,115.99491882324219,51.722259521484375,-1.7501020431518555]]],-1],0,0,[],[],[]],[[[18,".bin",2743451287,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-104.78334045410156,0.000050589715101523325,-18.95187759399414],"maxPosition",8,[1,104.78334045410156,0.00005582713129115291,19.80179214477539]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["a1lreGTc9AeZTH9iNhMYrb"]}],[1],0,[],[],[]],[[[19],[32,"Scene",[-2,-3],[0,"bcvMlQXQ9YSZ4dfsuazZeJ",-1,0]],[118,"background_01",1,[[30,-4,[1,"9aGCYL5+paB6HCuVLowpcH"],[0],[7],1]],[0,"deXfUk5+deCJJsXD2W2Dyx",1,0],[1,2.715637492656242e-7,-0.0008139885612763464,-3.11795973777771],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.02539999969303608,0.02539999969303608,0.02539999969303608],[1,-90.00000000000003,0,0]],[118,"foreground_01",1,[[30,-5,[1,"a48vwwYJ1f24tngKPc69tw"],[2],[7],3]],[0,"4atQf4FhBRFKYdwtvIOj7D",1,0],[1,0.0013122069649398327,-0.08389025181531906,2.5758299827575684],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.02539999969303608,0.02539999969303608,0.02539999969303608],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,-2,3,0,0,2,0,0,3,0,9,1,5],[0,0,0,0],[-1,6,-1,6],[198,120,198,121]],[[[26,"water_splash_3","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4294941744],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[191,10]],[[{"name":"003","rect":{"x":175,"y":832,"width":30,"height":22},"offset":{"x":-45.5,"y":0.5},"originalSize":{"width":129,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"monster_M_003",[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[387,10]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["64E1bcbwlG5pT3sfvfSswv"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["65Yrylyi9Pj5G7VkB3P9iQ"]}],[1],0,[],[],[]],[[[31,"Boss_Coming",".mp3",1.593469],-1],0,0,[],[],[]],[[[31,"BGM_Boss",".mp3",32],-1],0,0,[],[],[]],[[[18,".bin",356136335,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.9854104518890381,-0.8936789631843567,-9.010381063490058e-7],"maxPosition",8,[1,0.9854101538658142,0.8936788439750671,-7.961577352944005e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["66lPHAdWdM54CF4kqArdic@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_05",[-2],[0,"fd78iyDBRTBp0ctdQZE7JH",-1,0]],[27,"Plane023",1,[[30,-3,[1,"6fKau62IxT5J+RIcAo1aRt"],[0],[7],1]],[0,"55WCyQ0tdTnpSP0CvNVLVI",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[388,126]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[199,199,4]],[[{"name":"roll_light0017","rect":{"x":253,"y":932,"width":28,"height":88},"offset":{"x":-36,"y":5},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"Queen",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[389,10]],[[{"name":"roll_light0013","rect":{"x":2,"y":854,"width":97,"height":19},"offset":{"x":-1.5,"y":40.5},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"base":"2,2,0,0,0,0","mipmaps":["6e5d/5In1F+qOVgdFwONlW@1fda3"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[65,"Skin-0",1751871335,["Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone009(mirrored)","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone009(mirrored)/Bone010(mirrored)","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone004","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bone001","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone004/Bone005","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Root/Bip001","Root/Bip001/Bip001 Pelvis","Root/Bip001/Bip001 Pelvis/Bip001 Spine","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bone011","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3/Bip001 L Finger31","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger3","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger4","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger4/Bip001 L Finger41","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone009","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone002/Bone003/Bone009/Bone010","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bone001_R","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3/Bip001 R Finger31","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger3","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger4","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger4/Bip001 R Finger41","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot"],[[[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-2.66009521484375,0.060891423374414444,-0.00006039211802999489,1],[7,2.417371263163659e-7,-0.0000014132473324934836,1,0,0.9961947798728943,-0.08715435862541199,-3.6398796510184184e-7,0,0.08715435862541199,0.9961948394775391,0.0000013868012729290058,0,-2.9112937450408936,0.31348514556884766,-0.000059333924582460895,1],[7,0.5325581431388855,0.002331687370315194,0.8463900089263916,0,-0.5726476907730103,0.7373642325401306,0.3582850694656372,0,-0.6232624650001526,-0.6754909753799438,0.39402467012405396,0,0.08116400241851807,-2.5308070182800293,-0.7374800443649292,1],[7,0.5628832578659058,-0.007296719588339329,0.8265042901039124,0,-0.5475087761878967,0.7458174824714661,0.3794604241847992,0,-0.6191901564598083,-0.666110098361969,0.41581329703330994,0,-0.7604997754096985,-2.5184595584869385,-0.7139487266540527,1],[7,1.466497820956647e-7,-4.963853683648267e-8,-1,0,-0.6740498542785645,-0.7386857867240906,-6.218199644081324e-8,0,-0.7386857867240906,0.6740498542785645,-1.4178698393152445e-7,0,-0.07444219291210175,2.526259422302246,-1.1742950078996728e-7,1],[7,0.8916664719581604,-0.45269280672073364,7.934441725865327e-8,0,0.45269283652305603,0.8916664123535156,-6.74034765779652e-8,0,-4.0235690335066465e-8,9.602006656450612e-8,1,0,-1.6676095724105835,-1.9152828454971313,1.164232017458744e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-2.0283124446868896,0.05918391793966293,8.327025824428347e-8,1],[7,1.4827770655756467e-7,-4.454063784464779e-8,-1,0,-0.6481180787086487,-0.7615398168563843,-6.218199644081324e-8,0,-0.7615398168563843,0.6481180787086487,-1.4178698393152445e-7,0,1.2237573862075806,2.5406253337860107,3.985860530519858e-8,1],[7,2.809148647031634e-8,-4.963851196748692e-8,-1,0,-0.12911751866340637,-0.7386857867240906,-6.218199644081324e-8,0,-0.1414988934993744,0.6740496754646301,-1.4178699814237916e-7,0,-0.13791820406913757,2.526259183883667,-1.8916720989636815e-7,1],[7,1.4695379491058702e-7,-4.873115244663495e-8,-1,0,-0.6694712042808533,-0.7428379058837891,-6.218199644081324e-8,0,-0.7428379058837891,0.6694712042808533,-1.4178698393152445e-7,0,0.5599108934402466,2.5257508754730225,-4.474571824175655e-8,1],[7,0.9951538443565369,-0.0000013752051017945632,0.09833045303821564,0,-0.09833046048879623,-4.3499564839066807e-8,0.9951537847518921,0,-0.0000013642633120980463,-1,-1.7851328948381706e-7,0,-0.11622089147567749,0.017088450491428375,-2.4372239112854004,1],[7,-0.037023697048425674,0.17989106476306915,-0.982989490032196,0,-0.9888837337493896,-0.1483476608991623,0.010097474791109562,0,-0.14400775730609894,0.9724361896514893,0.18338370323181152,0,0.6380054354667664,0.037388745695352554,0.5225313305854797,1],[7,-0.004811019636690617,0.18359844386577606,-0.982989490032196,0,-0.9995605945587158,0.027869561687111855,0.010097474791109562,0,0.029249370098114014,0.9826061725616455,0.18338367342948914,0,1.2114899158477783,-0.0753936618566513,0.5225313305854797,1],[7,0.000001370906943520822,1,-6.123234262925839e-17,0,4.371139183945161e-8,-5.986301677887024e-14,1,0,1,-0.000001370906943520822,-4.371138828673793e-8,0,0.05717603117227554,-8.088225911251357e-8,-1.207782506942749,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,4.370756556681954e-8,-0.0000013868002497474663,0,-4.371138828673793e-8,1,-0.0000027577070795814507,0,-1.207782506942749,0.05717603117227554,0.0000015147788872127421,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-1.3676413297653198,0.0587911419570446,8.218085412181608e-8,1],[7,0.7202984690666199,0.05950171500444412,0.6911076307296753,0,-0.6935793161392212,0.04617457464337349,0.7188989520072937,0,0.01086412277072668,-0.9971596598625183,0.07452862709760666,0,1.1110060214996338,-0.1369607299566269,-2.2236976623535156,1],[7,-0.7202984094619751,-0.059504441916942596,0.691107451915741,0,-0.6935792565345764,0.04617457091808319,-0.7188990116119385,0,0.010866097174584866,-0.997159481048584,-0.07453051954507828,0,1.1110061407089233,-0.1369607001543045,2.2236976623535156,1],[7,0.015106732957065105,-0.04066528007388115,-0.9990585446357727,0,-0.9998740553855896,-0.005447388160973787,-0.01489733811467886,0,-0.004836454521864653,0.9991580843925476,-0.04074244946241379,0,2.929981231689453,-1.401753544807434,0.05906158313155174,1],[7,0.09555647522211075,0.3637780249118805,0.9265716075897217,0,-0.8776594996452332,-0.40839630365371704,0.2508513331413269,0,0.46966248750686646,-0.837184727191925,0.28024834394454956,0,0.7414319515228271,0.11866607517004013,-2.0035367012023926,1],[7,0.21450179815292358,0.30895721912384033,0.9265716075897217,0,-0.964487612247467,-0.08268875628709793,0.2508513033390045,0,0.1541193276643753,-0.9474746584892273,0.2802485227584839,0,0.5276819467544556,-0.06629450619220734,-2.0035364627838135,1],[7,0.5993842482566833,-0.7958346605300903,0.08594023436307907,0,-0.7997278571128845,-0.5999690294265747,0.02173815667629242,0,0.03426149860024452,-0.08175830543041229,-0.9960631728172302,0,0.06326241046190262,2.2417869567871094,-0.1444978415966034,1],[7,0.540799081325531,-0.8082211017608643,0.23305600881576538,0,-0.8312392234802246,-0.5559141039848328,0.0009949132800102234,0,0.12875501811504364,-0.19426332414150238,-0.9724628329277039,0,-0.21788106858730316,2.302114963531494,-0.24100396037101746,1],[7,0.3896176517009735,-0.8910011649131775,0.2330559939146042,0,-0.9163261651992798,-0.4004315733909607,0.0009949131635949016,0,0.09243649989366531,-0.21394294500350952,-0.9724628329277039,0,-0.015202656388282776,2.341578960418701,-0.2410038858652115,1],[7,0.35533568263053894,-0.9317747950553894,0.0743798092007637,0,-0.931556224822998,-0.3595637083053589,-0.05401071161031723,0,0.07707010209560394,-0.0500970333814621,-0.9957663416862488,0,0.0729765072464943,2.339693784713745,-0.028997713699936867,1],[7,0.5271315574645996,-0.8465223908424377,0.07437977194786072,0,-0.8454985022544861,-0.5312395095825195,-0.05401071533560753,0,0.08523476123809814,-0.034417226910591125,-0.9957663416862488,0,-0.15005263686180115,2.3103952407836914,-0.02899762988090515,1],[7,0.13408538699150085,-0.9909467101097107,0.006757685448974371,0,-0.9867451786994934,-0.13413968682289124,-0.0913250520825386,0,0.09140472859144211,0.005577242001891136,-0.9957981705665588,0,0.6026970744132996,2.2104625701904297,-0.03350505232810974,1],[7,0.7196924686431885,0.0664311870932579,0.6911075711250305,0,-0.6939914226531982,0.03949737921357155,0.7188990712165833,0,0.020460380241274834,-0.9970089793205261,0.07452863454818726,0,0.2049349695444107,-0.13499470055103302,-2.2236979007720947,1],[7,0.4175936281681061,-0.9086087346076965,0.006757989525794983,0,-0.904574453830719,-0.41641882061958313,-0.09132501482963562,0,0.08579285442829132,0.03202364593744278,-0.9957981705665588,0,0.14146241545677185,2.2901148796081543,-0.03350573033094406,1],[7,0.46146491169929504,-0.8853574395179749,-0.05649944022297859,0,-0.886981189250946,-0.45916274189949036,-0.04933520033955574,0,0.017736850306391716,0.07288038730621338,-0.9971830248832703,0,0.019961467012763023,2.245767593383789,-0.09855440258979797,1],[7,0.2333219051361084,-0.9707566499710083,-0.056499361991882324,0,-0.9717745184898376,-0.23069514334201813,-0.04933517798781395,0,0.034858327358961105,0.06641560792922974,-0.9971830248832703,0,0.39304935932159424,2.2165613174438477,-0.0985545963048935,1],[7,-0.9951538443565369,-0.000001366608785247081,0.09833045303821564,0,-0.09833046048879623,-4.3499564839066807e-8,-0.9951537847518921,0,0.0000013642633120980463,-1,-9.109050580491385e-8,0,-0.11622075736522675,0.017088452354073524,2.4372239112854004,1],[7,-0.5325583815574646,0.0023320831824094057,-0.8463900685310364,0,-0.5726475715637207,-0.7373645901679993,0.35828471183776855,0,-0.6232627034187317,0.6754904985427856,0.3940252363681793,0,0.08109505474567413,2.5308072566986084,-0.7375863790512085,1],[7,-0.5628834962844849,-0.0072954390197992325,-0.826504111289978,0,-0.5475097298622131,-0.7458170056343079,0.379459947347641,0,-0.6191893815994263,0.6661105155944824,0.4158138334751129,0,-0.7605689764022827,2.5184595584869385,-0.714052140712738,1],[7,-0.8916670083999634,-0.4526921212673187,3.2826552143205845e-8,0,0.4526922106742859,-0.891666829586029,4.9692935988332465e-8,0,6.774747873805609e-9,5.916986367537902e-8,1,0,-1.6676826477050781,1.9152464866638184,-1.0241176084946346e-7,1],[7,0.03702313080430031,-0.17988844215869904,-0.982990026473999,0,-0.9888837933540344,-0.1483476161956787,-0.010097302496433258,0,-0.1440078467130661,0.9724367260932922,-0.18338103592395782,0,0.6380053758621216,0.03738868981599808,-0.5225314497947693,1],[7,0.004810924641788006,-0.18359574675559998,-0.982990026473999,0,-0.9995605945587158,0.027869591489434242,-0.010097302496433258,0,0.02924935519695282,0.9826067090034485,-0.18338097631931305,0,1.2114899158477783,-0.0753936693072319,-0.5225313901901245,1],[7,4.371138828673793e-8,-0.23004385828971863,-0.97318035364151,0,-1,3.248352697937662e-8,-5.259460067463806e-8,0,4.371138828673793e-8,0.9731802940368652,-0.23004387319087982,0,0.17118015885353088,-0.0136712696403265,-0.52423095703125,1],[7,-0.2145014852285385,-0.3089594841003418,0.9265708327293396,0,-0.9644875526428223,-0.08268879354000092,-0.2508513629436493,0,0.15411989390850067,-0.94747394323349,-0.2802506983280182,0,0.5276817679405212,-0.06629381328821182,2.0035364627838135,1],[7,-0.09555530548095703,-0.36378008127212524,0.9265708923339844,0,-0.8776595592498779,-0.40839630365371704,-0.2508513033390045,0,0.46966269612312317,-0.8371838331222534,-0.2802506387233734,0,0.7414318323135376,0.11866657435894012,2.0035364627838135,1],[7,-0.5993841886520386,0.7958344221115112,0.08594296127557755,0,-0.7997277975082397,-0.5999690890312195,-0.02173815853893757,0,0.034263141453266144,-0.08176048845052719,0.9960629343986511,0,0.06326232105493546,2.2417869567871094,0.1444978266954422,1],[7,-0.5407987833023071,0.8082205057144165,0.23305858671665192,0,-0.8312390446662903,-0.5559142231941223,-0.000994913512840867,0,0.12875646352767944,-0.1942654550075531,0.9724622368812561,0,-0.21788135170936584,2.302114963531494,0.24100376665592194,1],[7,-0.38961753249168396,0.891000509262085,0.23305857181549072,0,-0.9163260459899902,-0.40043172240257263,-0.0009949136292561889,0,0.09243755787611008,-0.21394526958465576,0.9724622368812561,0,-0.015203077346086502,2.341578722000122,0.24100370705127716,1],[7,-0.355335533618927,0.9317746162414551,0.07438251376152039,0,-0.9315561652183533,-0.35956379771232605,0.054010722786188126,0,0.07707108557224274,-0.050099555402994156,0.9957661032676697,0,0.07297638803720474,2.339693546295166,0.028997639194130898,1],[7,-0.5271313786506653,0.8465222716331482,0.07438250631093979,0,-0.8454983830451965,-0.5312396287918091,0.054010722786188126,0,0.08523620665073395,-0.03441954031586647,0.9957661032676697,0,-0.15005281567573547,2.3103952407836914,0.028997628018260002,1],[7,-0.13408520817756653,0.9909467697143555,0.006760185584425926,0,-0.9867451786994934,-0.13413973152637482,0.09132508933544159,0,0.09140510112047195,0.005574763752520084,0.9957982301712036,0,0.60269695520401,2.2104625701904297,0.03350453078746796,1],[7,-0.41759344935417175,0.9086088538169861,0.006760688964277506,0,-0.9045743942260742,-0.4164189100265503,0.09132503718137741,0,0.08579399436712265,0.03202119469642639,0.9957982301712036,0,0.1414622664451599,2.2901148796081543,0.0335056446492672,1],[7,-0.7196924090385437,-0.06643391400575638,0.6911073327064514,0,-0.6939913630485535,0.03949737921357155,-0.718899130821228,0,0.02046235278248787,-0.9970088005065918,-0.07453052699565887,0,0.2049349844455719,-0.13499468564987183,2.2236979007720947,1],[7,-0.46146491169929504,0.8853576183319092,-0.05649670213460922,0,-0.8869810700416565,-0.4591628611087799,0.049335211515426636,0,0.017738118767738342,0.07287796586751938,0.9971832036972046,0,0.019961364567279816,2.245767593383789,0.09855441004037857,1],[7,-0.2333219051361084,0.9707568287849426,-0.05649667978286743,0,-0.9717744588851929,-0.23069524765014648,0.04933520406484604,0,0.03485896810889244,0.06641300767660141,0.9971832036972046,0,0.39304909110069275,2.2165613174438477,0.09855447709560394,1],[7,4.371138828673793e-8,0.23004652559757233,-0.9731796979904175,0,-1,5.259468593976635e-8,-3.248338131811579e-8,0,4.371138828673793e-8,0.9731796383857727,0.23004654049873352,0,0.1711800992488861,-0.013671260327100754,0.5242308974266052,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[19],[123,"monster_M_003",[[-3,-4,-5,[6,"Dummy004",-7,[0,"e24bJtzWhWmoCdUre1QK0m",-6,0],[1,-0.016441356390714645,-0.33935022354125977,1.4171502590179443],[3,0.5150974470276765,-0.5050231294210329,-0.4872353746181229,0.49216658616376474],[1,110.08563738476025,17.752397960299984,-89.09113880761949]],-8],1,1,1,4,1],[[63,-2,[1,"60gOVxxvZSXa55TV1+zFBZ"],[3,4,5,6,7,8,9,10,11,12,13],14]],[0,"89uoCG4SJcfp8fsI2vkoYg",-1,0]],[20,"Bip001 L Hand",[-9,-10,-11,-12,-13],[0,"cafn9TAnNT9pI0n5bcgqQ0",1,0],[1,0.5006297826766968,-1.1920928955078125e-7,4.440892098500626e-16],[3,-0.6582899510683116,0.04228806753212849,-0.09385046107694317,0.7456930673021733],[1,-83.22488656741238,-3.5365847203699854,-11.28228223805411]],[20,"Bip001 R Hand",[-14,-15,-16,-17,-18],[0,"07PdnEktBQeKobH2QiflVR",1,0],[1,0.5006297826766968,0,0],[3,0.7456827893975648,0.00012470362932455798,-0.041570116582792464,0.6650030732655037],[1,96.64501704438383,3.5693535204206266,-3.1587423695373786]],[20,"Bip001 Spine",[-19,-20,-21],[0,"f0rOGBpOlQY7wxrF+5mZXZ",1,0],[1,0.15989065170288086,-0.0005258247256278992,2.22465359911439e-7],[3,-0.0000020707484351451806,-6.840717735626471e-7,-0.013363486985303973,0.9999107046185863],[1,-0.00023840179991270626,-0.0000815820152655527,-1.5313883897460843]],[128,"Bip001 Neck",[-22,-23,-24],[0,"3bRAcPZORRULVcrmVfZO9p",1,0],[1,0.631783127784729,-0.001707509160041809,0.00006047538772691041]],[20,"Bone003",[-25,-26,-27],[0,"d3YRg6aP5bVYsD1kyv/GuG",1,0],[1,0.7357587814331055,-4.440892098500626e-16,8.460415301669855e-8],[3,3.997127023116263e-14,1.1464957899787013e-13,0.02330703410588638,0.9997283541848692],[1,4.277568359160024e-12,1.3041719295891e-11,2.671031237002317]],[3,"Bip001 Spine1",4,[5,-28],[0,"a6/WLA4VJSZLTfn+5LHzM2",1,0],[1,0.6606606245040894,-0.00039261579513549805,-1.0889777968259295e-9],[3,1.8363594974792656e-14,3.816920530814549e-8,-0.013761612811058711,0.9999053045228017],[1,6.021640004495724e-8,0.000004375111721124669,-1.5770144457597477]],[62,"Bip001 L Clavicle",5,[[-29,[6,"Bone001",-30,[0,"70nxWvBF1UUIRoFNufQBK5",1,0],[1,0.25853222608566284,0.017087489366531372,0.07450723648071289],[3,0.3291996983294883,-0.18397237180632867,0.23716725177184989,0.8952839883069035],[1,45.25343808701887,-30.637810491034568,17.67015518109092]]],1,4],[0,"f9maaYPAFehq1pdT+e75vu",1,0],[1,-0.24609780311584473,0.0760565921664238,0.3552507162094116],[3,0.7055554348934967,0.06829647680154777,0.7019529897888603,0.06920346577466076],[1,179.89651945190954,-89.69660065951494,11.158808181510317]],[62,"Bip001 R Clavicle",5,[[-31,[6,"Bone001_R",-32,[0,"e5YSNZanJUY4gn/qQ09CmP",1,0],[1,0.2586156725883484,0.01708918809890747,-0.07451558113098145],[3,0.8794379763040657,0.2795447387754223,-0.1868928209541957,0.33691936473431405],[1,131.49759110537656,33.750933398701356,21.45367841070574]]],1,4],[0,"7ddWFo8QZTWKawqtT3Wcmt",1,0],[1,-0.24609780311584473,0.07605855911970139,-0.35537123680114746],[3,0.7055552446307499,0.06829841284423577,-0.7019527995845692,-0.06920542415437266],[1,-179.89651670418527,89.69660002752158,11.159125236615294]],[38,"monster_M_003",1,[[64,-33,[1,"d75dTBC7dV8Jfi8YsTivud"],[0],[7],1,1,2]],[0,"f5wi5oniBWxZLqMAMs8hmv",1,0],[1,0.23828887939453125,0,0]],[54,"Root",1,[-34],[0,"8e0HbMHv1Wa47vh6Kjeycc",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001",11,[-35],[0,"fa6K4dxqtb+L21Wn6kTiRs",1,0],[1,2.561137080192566e-9,0.057176027446985245,1.143359899520874],[3,-8.312010776862054e-39,8.311991158683218e-39,-0.707105946721014,0.7071076156510963],[1,0,1.3470174164166888e-36,-90]],[54,"Bip001 Pelvis",12,[4],[0,"8dNJo6b7JdN5v+VFk1jem9",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[5,"Bip001 Head",5,[[10,"Bip001 HeadNub",-36,[0,"229LPNRUlcTqhRUWLcuJjH",1,0],[1,1.0493707656860352,-2.7755575615628914e-17,3.637978807091713e-12]]],[0,"dcuHXBM1NRzqIfhxPGpToH",1,0],[1,0.2673945426940918,-7.450580596923828e-9,3.637978807091713e-12],[3,-2.4964688692569808e-9,-6.271651082158686e-8,0.0014889813384960668,0.9999988914666704],[1,-2.753741783095854e-7,-0.000007186380691056864,0.17062475598689478]],[3,"Bip001 L UpperArm",8,[-37],[0,"482yIWSklQRby5T2o8B68p",1,0],[1,0.3912932276725769,-2.0816681711721685e-17,-4.440892098500626e-16],[3,-0.25651204330178984,0.1241501780882364,-0.6302342351995177,0.722214035936909],[1,-70.92398438562613,-39.48424240175178,-76.91114917985112]],[3,"Bip001 L Forearm",15,[2],[0,"46zfXgFL9Wt6WsnA6nYcC4",1,0],[1,0.9073795676231384,1.1920928955078125e-7,0],[3,-4.578849592800137e-17,-6.262542611058353e-17,-0.4362915673032536,0.8998053502286317],[1,-1.2679224301157081e-14,-1.4123258827036254e-14,-51.73501364487481]],[3,"Bip001 L Finger0",2,[-38],[0,"f4Q4DLffJeXoFE/RR5W06r",1,0],[1,0.15724682807922363,0.10853540897369385,-0.280010461807251],[3,0.6469967347866844,0.4224053311910211,-0.1247771602493949,0.6224143488359418],[1,81.77525315266503,48.315717546497766,23.03314405482635]],[5,"Bip001 L Finger01",17,[[10,"Bip001 L Finger0Nub",-39,[0,"f9/Ck2ok9TzZelzxC5N03r",1,0],[1,0.19635671377182007,-1.1920928955078125e-7,4.440892098500626e-16]]],[0,"a9DJfOqJ1QK5vUXirmRk86",1,0],[1,0.2230098843574524,-2.220446049250313e-16,-2.384185791015625e-7],[3,1.5970774585043392e-8,-4.742369063156933e-9,0.1741082035222399,0.9847265272481788],[1,0.0000020191989521741145,-9.088762633852202e-7,20.05353050162362]],[3,"Bip001 L Finger1",2,[-40],[0,"b4jPTU2eNZHbWvNjpiN2KQ",1,0],[1,0.41220617294311523,-0.05643582344055176,-0.18570828437805176],[3,0.05480386961589817,0.05151804069817767,0.026161871371950605,0.9968239482697344],[1,6.12756778948025,5.739660577371665,3.313791647145718]],[5,"Bip001 L Finger11",19,[[10,"Bip001 L Finger1Nub",-41,[0,"89NS2sKwRX4ph4epmcKfMi",1,0],[1,0.21047544479370117,-2.384185791015625e-7,0]]],[0,"119h5jovNVso/KdA8kmF9z",1,0],[1,0.21047544479370117,-4.440892098500626e-16,2.384185791015625e-7],[3,-1.157355726393661e-8,-3.739024392000969e-8,0.30279246077905875,0.9530565175766654],[1,4.086591713252195e-8,-0.0000045086310785628456,35.25080448952805]],[3,"Bip001 L Finger2",2,[-42],[0,"39QiWvNdtW6YoGNfp1tRjH",1,0],[1,0.4075636863708496,-0.043886661529541016,-0.008726358413696289],[3,-0.026201416960130487,0.02795337809921632,0.04119503759051985,0.998416277551623],[1,-3.141501951624513,3.334612362515148,4.634249782307842]],[5,"Bip001 L Finger21",21,[[10,"Bip001 L Finger2Nub",-43,[0,"070jIVf/VRzrCjBqWxLbVi",1,0],[1,0.24555480480194092,2.384185791015625e-7,2.220446049250313e-16]]],[0,"09Ee0YonBQ+aGasRi7HX47",1,0],[1,0.22620201110839844,-4.440892098500626e-16,1.1920928955078125e-7],[3,-2.1346562362788676e-9,6.405774153524933e-9,0.3161475668371008,0.9487100273439618],[1,-5.800948741783755e-7,9.670428303541836e-7,36.86021051465174]],[3,"Bip001 L Finger3",2,[-44],[0,"317VVGwk5ek4CnIDfyjeNi",1,0],[1,0.4085817337036133,-0.004747867584228516,0.1710878610610962],[3,-0.06296034802314279,0.028271691424540484,0.10428203476704014,0.9921501717308957],[1,-7.678888342068354,4.054677243803466,11.733914809176078]],[5,"Bip001 L Finger31",23,[[10,"Bip001 L Finger3Nub",-45,[0,"10nTzJv+5Qh55tHQkYyiYu",1,0],[1,0.21047547459602356,4.440892098500626e-16,-1.1920928955078125e-7]]],[0,"c3VK6AaANb8auvHKXO+43v",1,0],[1,0.21047556400299072,-4.440892098500626e-16,1.1920928955078125e-7],[3,7.957158328760457e-9,3.2193729677553806e-11,0.3549088168792099,0.9349009207939628],[1,0.0000011377869143528558,-4.27982761659063e-7,41.57571216559368]],[3,"Bip001 L Finger4",2,[-46],[0,"c9MhVFU8ZUOqCsQ1rZO4Gv",1,0],[1,0.40224790573120117,0.0662531852722168,0.30907320976257324],[3,-0.07959501248243317,-0.0002520443751012064,0.17639633576478786,0.9810957665744514],[1,-9.577306672352574,1.6849620829429341,20.252837505544477]],[5,"Bip001 L Finger41",25,[[10,"Bip001 L Finger4Nub",-47,[0,"40K+LFt2tdN5QCmcym4OgR",1,0],[1,0.1753963828086853,0,1.1920928955078125e-7]]],[0,"7aAR/7sChbgrHgfRrjh768",1,0],[1,0.17539632320404053,-2.384185791015625e-7,-1.1920928955078125e-7],[3,-1.9879662589075646e-8,-1.1645787579274914e-8,0.2811044784887674,0.959677170809829],[1,-0.0000021509891620421565,-7.605226948869812e-7,32.65226898124036]],[3,"Bip001 R UpperArm",9,[-48],[0,"bdW5iXs6pZGKc3qxguWR10",1,0],[1,0.3912932872772217,-6.938893903907228e-18,2.384185791015625e-7],[3,0.2515311215018178,-0.13698530054828675,-0.5888658104754068,0.7557805102031115],[1,50.57590099324775,18.344106061208937,-73.5401934381205]],[3,"Bip001 R Forearm",27,[3],[0,"65zIhZGcxawKBqDRizeNrv",1,0],[1,0.9073795080184937,1.1102230246251565e-16,-2.384185791015625e-7],[3,-3.6334093714294004e-17,-3.509544699461461e-17,-0.5007262232599189,0.8656057124002001],[1,-1.1268278153721893e-14,-1.1164395301403043e-14,-60.09611637247491]],[3,"Bip001 R Finger0",3,[-49],[0,"5eJknSeVJa84TYh3uqf6vF",1,0],[1,0.15724670886993408,0.1085350513458252,0.2800103425979614],[3,-0.4903048346297891,-0.23648313022586753,0.10585494489290807,0.8321488021375444],[1,-57.032644809000274,-18.506133996956443,24.08376416602293]],[5,"Bip001 R Finger01",29,[[12,"Bip001 R Finger0Nub",-50,[0,"59CA2B0TVemruz69pZX/0V",1,0],[1,0.19635677337646484,2.220446049250313e-16,0],[3,1.676380634307861e-8,1.4901161193847653e-8,0.9999999999999998,-9.313225746154784e-9],[1,-1,-1,-1],[1,-179.99999829245272,-179.9999980790093,-0.0000010672170291894999]]],[0,"4eOj1UfXpWFLw1VxZ+3QVl",1,0],[1,0.2230098843574524,1.1102230246251565e-16,4.440892098500626e-16],[3,-9.31315600776908e-8,3.5886007648688746e-10,0.2762988178514842,0.9610717784088053],[1,-0.000012118246156648651,0.000003526666269156071,32.07886036818074]],[3,"Bip001 R Finger1",3,[-51],[0,"e4zd+zb/tSZo0nOX5BV6Zf",1,0],[1,0.4122058153152466,-0.05643606185913086,0.18570828437805176],[3,-0.06541616438281203,-0.03712547180151396,0.2607267784502007,0.9624780370376956],[1,-7.100514471020022,-2.4833229064553257,30.447245236763784]],[5,"Bip001 R Finger11",31,[[12,"Bip001 R Finger1Nub",-52,[0,"67iyem1QZQa4Joa1nn34V8",1,0],[1,0.21047556400299072,0,5.960464477539063e-8],[3,2.421438694000243e-8,-3.4694469519536127e-16,0.9999999999999996,1.490116119384765e-8],[1,-1,-1,-1.0000001192092896],[1,179.99999999999991,-179.99999722523566,0.0000017075472925031854]]],[0,"c7JYPBBGNW4IM/nIlK0vvb",1,0],[1,0.21047544479370117,-2.384185791015625e-7,-1.1920928955078125e-7],[3,-1.6341425749857566e-8,2.385570461618585e-8,0.333480502231466,0.9427569965963912],[1,-0.000003442751507937372,0.0000041174479739484076,38.960329068296176]],[3,"Bip001 R Finger2",3,[-53],[0,"10ZorIbwBeYJn8exbIairm",1,0],[1,0.40756332874298096,-0.04388689994812012,0.008726418018341064],[3,0.021896179950574267,-0.031439848509984256,0.18475227214124296,0.9820380293898447],[1,3.358577767625456,-4.295849417654638,21.191772614908217]],[5,"Bip001 R Finger21",33,[[12,"Bip001 R Finger2Nub",-54,[0,"dbPxDKUU1ZL7qQH1yKPyEE",1,0],[1,0.24555468559265137,2.384185791015625e-7,1.1920928955078125e-7],[3,-8.271806125530277e-25,5.551115123125783e-17,1,-1.4901161193847656e-8],[1,-1,-1,-1],[1,-180,180,-0.0000017075472925031882]]],[0,"46+OIs/0hRSZvuZmwVXdNG",1,0],[1,0.22620177268981934,-2.384185791015625e-7,5.960464477539063e-8],[3,1.3407156351816275e-8,6.50328683567694e-9,0.4364281918084341,0.8997390918454197],[1,0.0000017075471445800586,7.175171620203642e-14,51.75241362083951]],[3,"Bip001 R Finger3",3,[-55],[0,"71+AsLqDJQoJyM0biAwII3",1,0],[1,0.40858161449432373,-0.00474858283996582,-0.17108803987503052],[3,0.059768468138726084,-0.034511238334929195,0.20436614750848237,0.9764584898486371],[1,8.187225964791564,-5.736545326590685,23.26502307682617]],[5,"Bip001 R Finger31",35,[[12,"Bip001 R Finger3Nub",-56,[0,"54f72rs5Zdy7eeEb0Cf0No",1,0],[1,0.21047556400299072,4.440892098500626e-16,1.1102230246251565e-16],[3,-1.4901161193847656e-8,1.6653345369377348e-16,1,7.450580596923828e-9],[1,-1,-1,-1],[1,-179.99999999999997,179.99999829245272,8.537736462515936e-7]]],[0,"5085ckWltSyKHlBISvf+SD",1,0],[1,0.21047544479370117,-4.440892098500626e-16,5.960464477539063e-8],[3,-3.68297718810549e-9,1.4438845406500246e-8,0.24716043013283467,0.9689745723064934],[1,-9.317230887541956e-7,0.0000019452057246076284,28.619088921753793]],[3,"Bip001 R Finger4",3,[-57],[0,"77immLBo5ZwJ6nJUgYprCr",1,0],[1,0.4022477865219116,0.0662531852722168,-0.309073269367218],[3,0.07950635113264229,-0.0037639657298711936,0.22566972272389496,0.9709468311587807],[1,9.997081224034087,-2.7534288436552545,25.95264134901938]],[5,"Bip001 R Finger41",37,[[12,"Bip001 R Finger4Nub",-58,[0,"2fSMeS785WqJ8B/b+PA/qJ",1,0],[1,0.17539623379707336,4.76837158203125e-7,-2.220446049250313e-16],[3,-3.725290742551124e-9,5.551115123125783e-17,1,-6.123234262925839e-17],[1,-0.9999999403953552,-1,-0.9999999403953552],[1,-180,179.99999957311312,-7.016709628407983e-15]]],[0,"b3hBxyVdtZCpegLEw/AEvc",1,0],[1,0.17539632320404053,-2.384185791015625e-7,-5.960464477539063e-8],[3,-1.3377650052020978e-8,-7.547245468846736e-9,0.26545631792725083,0.9641228880555146],[1,-0.0000014531915980045273,-4.969197803668559e-7,30.788138078395612]],[3,"Bone002",7,[6],[0,"f9T+ucEalQgZdN6lfLMKpt",1,0],[1,0.6990445852279663,-0.6576737761497498,-0.0000011920928955078125],[3,-0.22280555341304684,0.9748629059346446,6.842456436880665e-7,7.057808291655062e-7],[1,-0.00010486947199264184,179.9998930700659,-25.747740571768734]],[5,"Bone004",6,[[12,"Bone005",-59,[0,"98UhthCWVa+qv8X8Mn5JOo",1,0],[1,0.6455504894256592,-2.384185791015625e-7,7.173753147071693e-8],[3,6.003795527769369e-15,-4.31387555951176e-14,0.13784547524667792,0.9904537470038757],[1,5.220435619354248,1.0000001192092896,1],[1,1.4166706726991842e-12,-5.188146256989575e-12,15.846384609582314]]],[0,"98HpD63gJfyIYYBDV3yGMo",1,0],[1,0.6499662399291992,0,7.268363333423622e-8],[3,3.091399865389307e-14,5.947836180799249e-14,0.07919220577241098,0.9968593654798555],[1,3.029605668362637e-12,6.596514292902829e-12,9.08427043930414]],[5,"Bone009",6,[[6,"Bone010",-60,[0,"6c0/RYsexbNpvdgLSNcw+K",1,0],[1,0.7753241062164307,2.220446049250313e-16,1.1920928955078125e-7],[3,-0.011118670047852917,0.05979838251134043,0.11957953928025762,0.9909597683109622],[1,-2.1428340721020587,7.162661312006386,13.63095919876253]]],[0,"84NwVGU8hbVLxGwGPkfj8n",1,0],[1,0.11905777454376221,-0.007365226745605469,0.58700031042099],[3,-0.0003223349605736925,-0.2131822837374954,0.004397411330190191,0.9770024937400276],[1,0.07133920587392908,-24.618369859256568,0.5001982726571514]],[5,"Bone009(mirrored)",6,[[6,"Bone010(mirrored)",-61,[0,"e9xDfJjltcHqa0iv2+LqfW",1,0],[1,0.775323748588562,1.1920928955078125e-7,-2.384185791015625e-7],[3,0.013301920366607503,0.05311263068288659,-0.15241828813895747,0.9867982432175757],[1,2.549578896703496,6.552431354026983,-17.421521144527965]]],[0,"11MRj1FXNSUrUieZPFN9SI",1,0],[1,0.11905741691589355,-0.007365703582763672,-0.5868726372718811],[3,0.9770025793409386,0.004397621926103129,-0.21318188707852975,-0.0003223417212392335],[1,179.92865660902956,24.618323391840107,0.5002220447302346]],[3,"Bip001 L Thigh",4,[-62],[0,"69VTEILMdYmZRSK+TyxOwY",1,0],[1,-0.15984761714935303,-0.003748806193470955,0.533313512802124],[3,0.12373682743045374,0.978287211026555,0.06842639234473548,-0.1515294001506474],[1,-10.121767164528197,-161.25327248328267,12.789106516426445]],[3,"Bip001 L Calf",43,[-63],[0,"8cShLMtXtcmbjz5y2miQI0",1,0],[1,0.5768526196479797,0,0],[3,1.7970034390187534e-17,-4.669889626213724e-17,-0.21887602469840506,0.9757526765590875],[1,9.268139175499661e-16,-5.276380075867698e-15,-25.28605020439066]],[3,"Bip001 L Foot",44,[-64],[0,"c6wa7uFF1WfZaUgEL3mWR8",1,0],[1,0.4651743769645691,1.4901161193847656e-8,-5.960464477539063e-8],[3,-0.012796611456113164,-0.13994103594657625,0.06448836589847265,0.9879746979843083],[1,-0.4182186895957434,-16.09647203350615,7.527803604549367]],[5,"Bip001 L Toe0",45,[[12,"Bip001 L Toe0Nub",-65,[0,"7fQHMjR0xURagIxe19LmqZ",1,0],[1,0.049959659576416016,1.3552527156068805e-20,0],[3,6.245004513516506e-16,1.0587911840678754e-22,1,-6.123234262925839e-17],[1,-1,-1,-1],[1,-180,-179.99999999999991,-7.0167096047110005e-15]]],[0,"ebIcdQpJNVIrwH6k9uGguw",1,0],[1,0.17106933891773224,0.49293577671051025,5.960464477539063e-8],[3,6.622408766566225e-7,-1.2108311383525853e-8,0.7071070494072362,0.7071065129654467],[1,0,0.0001073207686755142,90]],[3,"Bip001 R Thigh",4,[-66],[0,"89ef0Yggpf06YGpWWjY/Po",1,0],[1,-0.15984761714935303,-0.003745848312973976,-0.533313512802124],[3,0.11196639993231877,0.9782180067225633,-0.07028863490754758,0.16003925897343044],[1,10.183555087377924,160.40379615318938,11.33570613527419]],[3,"Bip001 R Calf",47,[-67],[0,"76JN1FVGRb0rl4fG1NeaWX",1,0],[1,0.576852560043335,2.9802322387695312e-8,0],[3,1.5608380153510016e-17,7.570008630751557e-18,-0.19075210159904316,0.9816382407667034],[1,2.072001855290787e-15,1.2863168393551515e-15,-21.993358466378957]],[3,"Bip001 R Foot",48,[-68],[0,"7fvQubF0paQZJvl/lpem4I",1,0],[1,0.46517419815063477,-2.9802322387695312e-8,0],[3,0.013025433766278854,0.14875319611374496,0.04664943743305901,0.9876875288816425],[1,0.6822159362329092,17.096781713702082,5.510334117318387]],[5,"Bip001 R Toe0",49,[[10,"Bip001 R Toe0Nub",-69,[0,"181BiOV+hV+rqBmf1Y+BLi",1,0],[1,0.04995971918106079,2.710505431213761e-20,5.960464477539063e-8]]],[0,"516DZKa6dRs54YNMn/M1bQ",1,0],[1,0.17106932401657104,0.49293577671051025,-5.960464477539063e-8],[3,-3.315904268091345e-8,-4.0194426691136005e-7,0.7071071686165652,0.7071063937562025],[1,0,-0.000005373655831955448,90]],[5,"Dummy003",1,[[10,"Dummy006",-70,[0,"0cDS6q0nBXMKdwfD/Fchcl",1,0],[1,3.4119272232055664,7.152557373046875e-7,1.1920928955078125e-7]]],[0,"3bBwKraCxfOZpkx5ZEAxG2",1,0],[1,-1.2556428909301758,4.300552845001221,-2.042227268218994],[3,0.5504373365659305,0.7514449431245787,-0.2802211073537989,0.2320029460160228],[1,70.69501175568277,113.54720733070516,44.204584284411204]],[5,"Bone011",1,[[141,"Dummy001",-71,[0,"98xvvVW09esaf0HP8XIs0g",1,0],[3,-0.0000029733048449865835,-2.1932669369464557e-7,5.33175814607506e-8,0.9999999999955542],[1,-0.00034071563630752653,-0.00002513296960027896,0.000006109819511099089]]],[0,"6fF/OkxrteUq4qzFrEvVSm",1,0],[1,-0.04225916042923927,2.9228570461273193,1.4171502590179443],[3,0.5150962503368085,-0.5050218732154472,-0.4872366517687362,0.49216786327036005],[1,110.0856277642325,17.75267529634454,-89.0911344777076]]],0,[0,4,1,0,0,1,0,-1,10,0,-2,11,0,-3,51,0,4,1,0,1,1,0,-5,52,0,-1,17,0,-2,19,0,-3,21,0,-4,23,0,-5,25,0,-1,29,0,-2,31,0,-3,33,0,-4,35,0,-5,37,0,-1,7,0,-2,43,0,-3,47,0,-1,14,0,-2,8,0,-3,9,0,-1,40,0,-2,41,0,-3,42,0,-2,39,0,-1,15,0,1,8,0,-1,27,0,1,9,0,0,10,0,-1,12,0,-1,13,0,1,14,0,-1,16,0,-1,18,0,1,18,0,-1,20,0,1,20,0,-1,22,0,1,22,0,-1,24,0,1,24,0,-1,26,0,1,26,0,-1,28,0,-1,30,0,1,30,0,-1,32,0,1,32,0,-1,34,0,1,34,0,-1,36,0,1,36,0,-1,38,0,1,38,0,1,40,0,1,41,0,1,42,0,-1,44,0,-1,45,0,-1,46,0,1,46,0,-1,48,0,-1,49,0,-1,50,0,1,50,0,1,51,0,1,52,0,9,1,2,1,16,3,1,28,4,1,13,5,1,7,6,1,39,71],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,7],[390,200,201,59,202,203,204,205,206,207,208,209,210,211,59]],[[[23,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[391,4]],[[[18,".bin",1971595296,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":132944,"length":31368,"count":7842,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":132944,"count":2374,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]]},"minPosition",8,[1,-2.254701614379883,-0.38619011640548706,-2.6080493927001953],"maxPosition",8,[1,2.254701614379883,4.427635669708252,1.5873537063598633]]],-1],0,0,[],[],[]],[[{"name":"004","rect":{"x":257,"y":324,"width":39,"height":22},"offset":{"x":-41,"y":0.5},"originalSize":{"width":129,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[26,"OddsPanel_1","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[392,24]],[[[99,"Petrification_Broken",2],[47,"Petrification_Broken",[-3,-4],[[21,true,-2,[1,"908NxwEc5LxbbSYoRZLbKN"],[38],39]],[0,"141spuYZlHGJXhGck+oxqK",-1,0]],[119,"Smoke",1,[-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[[4,-5,[1,"f3AIFXQttOXbwruqJj1NMR"]],[2,-6,[1,"7cUMu8N85JJJMeqqkDq6kz"],[5,0,0]]],[0,"0cRvJyMyhE9pzAxTupGHYb",1,0],[1,0,0,80]],[119,"Rock",1,[-19,-20,-21,-22,-23,-24,-25,-26,-27],[[4,-17,[1,"d8cDVrh79GFoF2jdE2C8Du"]],[2,-18,[1,"20XaTLz1pLK7uK+jVXmFXp"],[5,0,0]]],[0,"22l/j5uUZJZpQ/XcxyX3aw",1,0],[1,0,1,0]],[38,"Big_Smoke_01",2,[[68,2,false,-28,[1,"d4JmeQM61FsY7Bl/GeUL4x"],0,1],[4,-29,[1,"995UGz505CW6T87VU4J1J2"]],[25,-30,[1,"a5UZH/PINCAZlUvf6j4tB5"]]],[0,"30FcdVPhxHnZQH8NE1MNPf",1,0],[1,0,0,47.147]],[38,"Big_Smoke_02",2,[[68,2,false,-31,[1,"92cxExXdNBt5KrB/GAd79t"],2,3],[4,-32,[1,"4f04SU/qlBl4R2LX37eeYk"]],[25,-33,[1,"994jGdT3ZMio2xYfQAH4a1"]]],[0,"4bKKD/mklKubcp4NzukrRX",1,0],[1,-48.503,-15.157,-37.817]],[38,"Big_Smoke_03",2,[[68,2,false,-34,[1,"c5y3F4RBtDvIpQ1OuEjgcj"],4,5],[4,-35,[1,"21NuT4trlJH5opSouklOfC"]],[25,-36,[1,"0eIjtQOZhCjq2ZmzFVy/sP"]]],[0,"b5s5e2bBRNoIjBgVe86YN3",1,0],[1,75.786,24.252,14.966]],[38,"Big_Smoke_04",2,[[68,2,false,-37,[1,"01WMVsC2pF16uUYzdaxRjj"],6,7],[4,-38,[1,"56M3HCgNBIBJZourEYzctI"]],[25,-39,[1,"5eOlvHTHFCtp2H34EnQHEn"]]],[0,"93XjsA2HZK1rLiTvKUjJBP",1,0],[1,27.283,33.346,34.174]],[38,"Big_Smoke_05",2,[[68,2,false,-40,[1,"de6bVYMwNAL7EFUqvD1Aza"],8,9],[4,-41,[1,"4dbH5Z50BCyYVg8COTTJxZ"]],[25,-42,[1,"99PaXj5a5ML6aIrMU8uQq1"]]],[0,"7fz9AtWN9DdoDEZZF2UViL",1,0],[1,45.472,-12.125,23.822]],[38,"Big_Smoke_06",2,[[68,2,false,-43,[1,"f266aZpaVKRbt3uunsODkQ"],10,11],[4,-44,[1,"5eCdo/v+FBH6Broegt6F8D"]],[25,-45,[1,"9eOUwzUHJMQrz4vZx2H+8Q"]]],[0,"21DHsY8ohA6Jtb9SgifRQE",1,0],[1,-21.22,22.736,33.521]],[38,"Big_Smoke_07",2,[[68,2,false,-46,[1,"ddFcyZSclLkJBNrgp7qZ2L"],12,13],[4,-47,[1,"82KgPFO6pIv4tQhuGGARxR"]],[25,-48,[1,"68CP9NtA1KNJgrOWT1OIEe"]]],[0,"12l9jGt/1IBbul9kO2UZ8v",1,0],[1,-34.083,36.756,18.326]],[38,"Big_Smoke_08",2,[[68,2,false,-49,[1,"cdtSZru3hKn5NFzlTh+Pp/"],14,15],[4,-50,[1,"e1hF1FQ+RCLr24D365opgC"]],[25,-51,[1,"10KbqnVRZPqJgyLvORVOiu"]]],[0,"f91XyYQ8ZHFJlDVeobHcln",1,0],[1,11.858,22.736,12.799]],[38,"Big_Smoke_09",2,[[68,2,false,-52,[1,"e085f6akBIpotFRhZIvjB2"],16,17],[4,-53,[1,"679BWUS/lN2Z1W4QWLH/k1"]],[25,-54,[1,"88C57VMt9JTbYN47r/rrAX"]]],[0,"6am79oftlDTJYsVSe4SkUP",1,0],[1,54.128,22.736,5.836]],[38,"Big_Smoke_10",2,[[68,2,false,-55,[1,"d5oKKYhRBCwqWMx4dxMluD"],18,19],[4,-56,[1,"d3RbWe2n5JEpXyoN28Thv0"]],[25,-57,[1,"abDUgjxcNIk4N2KXf1T/r3"]]],[0,"224iE9529COL9IdqXVXHB5",1,0],[1,36.618,22.736,-12.358]],[67,"Glay_Rock01",3,[[69,-58,[1,"0eTk+TOmJPbIANtbumQzoM"],20,21],[4,-59,[1,"12Z5dM2XtNpIfYi0rDONDI"]],[2,-60,[1,"53AG9ITo5P3p8rgBTvYRTw"],[5,27,27]]],[0,"6bLSXEaRFCBrJNiZybuLhY",1,0]],[67,"Glay_Rock02",3,[[69,-61,[1,"d8FxJ6lPFKubjHYHYRA7M3"],22,23],[4,-62,[1,"aaoeqwBlhEpZvMF/HC3g3E"]],[2,-63,[1,"1fsOuRGOhP9LeplHedPpz6"],[5,22,28]]],[0,"b5NdByLPFIdo4ZikuRsqjg",1,0]],[67,"Glay_Rock03",3,[[69,-64,[1,"44ZkhvM49L+7KW7rrrSsjO"],24,25],[4,-65,[1,"58olMbPApN3YQqP7Xj3ISH"]],[2,-66,[1,"691oG3VR1EW4gNeAIpgtaH"],[5,24,29]]],[0,"a9bdCq4w9OybMJbBocESdu",1,0]],[67,"Glay_Rock04",3,[[69,-67,[1,"d8DkqaqaJDi4KyoPtEue8y"],26,27],[4,-68,[1,"4cHwwSnklLQ7MGqewN+0uy"]],[2,-69,[1,"512nBnymdAD6KbFLeuug/2"],[5,27,27]]],[0,"82fBTLXUdO57dTv7mdY3ku",1,0]],[67,"Glay_Rock05",3,[[69,-70,[1,"53x9ZLtk9BkLp5KkkZ0v/n"],28,29],[4,-71,[1,"58FKXfZnxBnYnLErOycEvr"]],[2,-72,[1,"06YI65xnxMoa6MYMGjLhD0"],[5,22,28]]],[0,"97nbhRMwJLGafyLxDG8MOk",1,0]],[67,"Glay_Rock06",3,[[69,-73,[1,"54SDs8w3xIzIcbogrN3Gxo"],30,31],[4,-74,[1,"e00FelmqRKjo5p308EsxrG"]],[2,-75,[1,"70YrsyMy9Ky7YES2uaqQj9"],[5,24,29]]],[0,"48BMEsdZlE9pCPSZWEjj88",1,0]],[67,"Glay_Rock07",3,[[69,-76,[1,"e3qimmc51N2ZIc+n7e1h4v"],32,33],[4,-77,[1,"f7vcEfyCNPLZN+L29vlm67"]],[2,-78,[1,"54eJwCmU1ONY+utFcziFaA"],[5,27,27]]],[0,"74RtTwA0JGb727FC7y7u3K",1,0]],[67,"Glay_Rock08",3,[[69,-79,[1,"96JS6EJptFX5XlW3/jrRgh"],34,35],[4,-80,[1,"b3O1AHVdBJ/6q4Lni1xFiR"]],[2,-81,[1,"4allNLbgtJh7lHawf/t7gD"],[5,22,28]]],[0,"5fMfewpMhL67ocrBM/p9Du",1,0]],[67,"Glay_Rock09",3,[[69,-82,[1,"baAw7QK3RNSZL+MtZh4fEL"],36,37],[4,-83,[1,"4bhiThHyZGF77Zr4DqXqor"]],[2,-84,[1,"2889dtPYdKI4xXDSFhUqoU"],[5,24,29]]],[0,"33ip7+XJZNyKVmJYb0kPoR",1,0]]],0,[0,4,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,0,3,0,0,3,0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,-5,18,0,-6,19,0,-7,20,0,-8,21,0,-9,22,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,9,1,84],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,-1,7],[8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,9,8,76,8,77,8,78,8,76,8,77,8,78,8,76,8,77,8,78,212,212]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["724LHufd9J+a2uiLGOdzGR"]}],[1],0,[],[],[]],[[[31,"Switch",".mp3",1.906875],-1],0,0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["73gumfuq1AHZaON3DtJxWv"]}],[1],0,[],[],[]],[[[18,".bin",2975043247,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.1941279172897339,-1.2116942405700684,-8.658365686642355e-7],"maxPosition",8,[1,1.1941277980804443,1.2116941213607788,-8.398236559514771e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["74VCyyhUFPlqw+tSEhjeHl@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_09",[-2],[0,"5dyZH/jOdeZ4sdBr1WQL4w",-1,0]],[27,"Plane019",1,[[30,-3,[1,"b8RyjrQmxWxJmuYwSuTuMS"],[0],[7],1]],[0,"4edpuE72ZUI67CVj23HeSS",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[393,131]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[213,213,4]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["76OuKgg0lH+K+eYz7cWz/M"]}],[1],0,[],[],[]],[[{"name":"pattern2L_3","rect":{"x":259,"y":2,"width":63,"height":43},"offset":{"x":-4,"y":1},"originalSize":{"width":87,"height":57},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"AxeBullet_TrackFx"],[72,"AxeBullet_TrackFx",[-3],[[21,true,-2,[1,"40BK92hvdA1L6QTzeWe/11"],[2],3]],[0,"c9L20uaBdIf5ZNwWZdcaB3",-1,0],[1,55,55,55]],[48,"RootNode",1,[-4],[0,"453VQzq+pLDYaUOPZnOXlh",1,0]],[28,"Quad",2,[[83,"Quad<ModelComponent>",0,-5,[1,"6dD1TIxg9MQ4T5ijVkASoY"],[0],[7],1]],[0,"32AUcWPQJHUYGU3ve7Vt51",1,0],[3,0,-0.7071067811865475,0,0.7071067811865476],[1,4,4,1],[1,0,-90,0]]],0,[0,4,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,9,1,5],[0,0,0,0],[-1,6,-1,7],[192,17,214,214]],[[[19],[32,"s1_01",[-2],[0,"faMoVgENhaTLaAZPLo7iSe",-1,0]],[27,"Plane027",1,[[30,-3,[1,"3e7lW4VE9R3IkNjpHz0VEg"],[0],[7],1]],[0,"6bKv1CL7NWmYkOyOQjkFiH",1,0],[1,0.1197221502661705,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[394,395]],[[{"base":"2,2,0,0,0,0","mipmaps":["7aCc9ii0dEAIrwcu+f7dsh@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[215,215,4]],[[[18,".bin",803349022,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.3260430097579956,-1.277186632156372,-9.286679301112599e-7],"maxPosition",8,[1,1.3260427713394165,1.2771865129470825,-9.152228699349507e-7]]],-1],0,0,[],[],[]],[[[125,"../game/res/shader/3d-unlit-glow-fx",[{"hash":504868035,"name":"../game/res/shader/3d-unlit-glow-fx|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1}],"defines":[]},{"name":"VALUE","stageFlags":16,"binding":2,"members":[{"name":"mixingColor","type":16,"count":1},{"name":"bleaching","type":13,"count":1},{"name":"glowing","type":13,"count":1},{"name":"offset","type":14,"count":1},{"name":"tiling","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"glowTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"diffuseTexture","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D glowTexture;\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n};\nlayout(std140) uniform VALUE {\n  vec4 mixingColor;\n  float bleaching;\n  float glowing;\n  vec2 offset;\n  float tiling;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  vec4 color = mainColor;\n  #if USE_TEXTURE\n    color = texture(glowTexture, (v_uv + offset) * tiling);\n    o *= texture(diffuseTexture, v_uv);\n  #endif\n  o.rgb = o.rgb + (color.rgb * glowing);\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  if (bleaching > 0.0) {\n    color.rgb = mix(color.rgb, mixingColor.rgb, bleaching);\n  }\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * In.position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D glowTexture;\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n    uniform vec4 mixingColor;\n    uniform float bleaching;\n    uniform float glowing;\n    uniform vec2 offset;\n    uniform float tiling;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  vec4 color = mainColor;\n  #if USE_TEXTURE\n    color = texture2D(glowTexture, (v_uv + offset) * tiling);\n    o *= texture2D(diffuseTexture, v_uv);\n  #endif\n  o.rgb = o.rgb + (color.rgb * glowing);\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  if (bleaching > 0.0) {\n    color.rgb = mix(color.rgb, mixingColor.rgb, bleaching);\n  }\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":73,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":6}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../game/res/shader/3d-unlit-glow-fx|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"glowTexture":{"value":"white","type":28},"diffuseTexture":{"value":"white","type":28},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1]},"mixingColor":{"type":16,"value":[2.1,0.1,0.1,1]},"bleaching":{"type":13,"value":[0]},"glowing":{"type":13,"value":[0]},"offset":{"type":14,"value":[0,0]},"tiling":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]],[[[33,"AxeModel"],[72,"AxeModel",[-4],[[70,true,-3,[1,"96Kj7OgFhOPrXU8HHxz3E2"],[-2]]],[0,"cdpkqnl4pAPqvcEHgyxZEo",-1,0],[1,52,52,52]],[145,"Object004",1,[-5],[0,"20e6OlvmZMlIeHAZGQKBuY",1,0],[3,0.6123725634466226,-0.6123723079449397,-0.35355331683628344,-0.35355346435024887],[1,-13.805624008178711,13.805624008178714,13.805624008178713],[1,-90.00001380194004,89.99997239611992,-29.999999999997108]],[223,1,0,2,[1,"c124G25sdOeYC0OWxE64Pk"],[0],[7]]],0,[0,4,1,0,-1,3,0,0,1,0,-1,2,0,-1,3,0,9,1,5],[0,3],[-1,6],[396,40]],[[{"name":"wifi_03","rect":{"x":169,"y":366,"width":23,"height":8},"offset":{"x":0,"y":0},"originalSize":{"width":23,"height":8},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Female_Hurt_01",".mp3",0.444082],-1],0,0,[],[],[]],[[{"name":"a_effect_02_1","rect":{"x":639,"y":262,"width":80,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":80,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[114,"CircleResultMoney_New",185,{"commonHeight":209,"fontSize":185,"atlasName":"CircleResultMoney_0_New.png","fontDefDictionary":{"32":{"xOffset":-7,"yOffset":-7,"xAdvance":46,"rect":{"x":744,"y":0,"width":15,"height":23}},"33":{"xOffset":7,"yOffset":37,"xAdvance":52,"rect":{"x":308,"y":163,"width":86,"height":151}},"35":{"xOffset":11,"yOffset":34,"xAdvance":131,"rect":{"x":217,"y":0,"width":148,"height":162}},"36":{"xOffset":3,"yOffset":40,"xAdvance":90,"rect":{"x":479,"y":0,"width":124,"height":161}},"37":{"xOffset":20,"yOffset":48,"xAdvance":149,"rect":{"x":395,"y":163,"width":147,"height":142}},"38":{"xOffset":6,"yOffset":36,"xAdvance":129,"rect":{"x":0,"y":193,"width":147,"height":153}},"40":{"xOffset":12,"yOffset":32,"xAdvance":74,"rect":{"x":0,"y":0,"width":108,"height":192}},"41":{"xOffset":-12,"yOffset":32,"xAdvance":74,"rect":{"x":109,"y":0,"width":107,"height":192}},"43":{"xOffset":10,"yOffset":67,"xAdvance":88,"rect":{"x":374,"y":483,"width":104,"height":108}},"44":{"xOffset":-12,"yOffset":130,"xAdvance":52,"rect":{"x":660,"y":440,"width":77,"height":80}},"45":{"xOffset":13,"yOffset":92,"xAdvance":79,"rect":{"x":60,"y":622,"width":91,"height":57}},"46":{"xOffset":3,"yOffset":123,"xAdvance":52,"rect":{"x":0,"y":622,"width":59,"height":65}},"47":{"xOffset":-6,"yOffset":36,"xAdvance":61,"rect":{"x":366,"y":0,"width":112,"height":162}},"48":{"xOffset":11,"yOffset":52,"xAdvance":117,"rect":{"x":0,"y":347,"width":132,"height":137}},"49":{"xOffset":8,"yOffset":50,"xAdvance":60,"rect":{"x":670,"y":156,"width":86,"height":136}},"50":{"xOffset":0,"yOffset":52,"xAdvance":96,"rect":{"x":0,"y":485,"width":124,"height":136}},"51":{"xOffset":-4,"yOffset":52,"xAdvance":90,"rect":{"x":260,"y":345,"width":124,"height":137}},"52":{"xOffset":3,"yOffset":48,"xAdvance":102,"rect":{"x":543,"y":162,"width":126,"height":139}},"53":{"xOffset":-3,"yOffset":53,"xAdvance":93,"rect":{"x":133,"y":347,"width":126,"height":137}},"54":{"xOffset":9,"yOffset":51,"xAdvance":103,"rect":{"x":624,"y":302,"width":115,"height":137}},"55":{"xOffset":8,"yOffset":53,"xAdvance":88,"rect":{"x":125,"y":485,"width":120,"height":135}},"56":{"xOffset":4,"yOffset":52,"xAdvance":91,"rect":{"x":385,"y":315,"width":120,"height":137}},"57":{"xOffset":15,"yOffset":52,"xAdvance":105,"rect":{"x":506,"y":306,"width":117,"height":137}},"58":{"xOffset":2,"yOffset":84,"xAdvance":46,"rect":{"x":479,"y":453,"width":68,"height":103}},"61":{"xOffset":8,"yOffset":79,"xAdvance":89,"rect":{"x":548,"y":444,"width":111,"height":81}},"64":{"xOffset":15,"yOffset":34,"xAdvance":127,"rect":{"x":604,"y":0,"width":139,"height":155}},"88":{"xOffset":-1,"yOffset":36,"xAdvance":114,"rect":{"x":148,"y":193,"width":159,"height":151}},"120":{"xOffset":-4,"yOffset":78,"xAdvance":90,"rect":{"x":246,"y":485,"width":127,"height":109}}},"kerningDict":{}}]],0,0,[0],[19],[397]],[[[18,".bin",1438319670,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10528,"length":3408,"count":852,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10528,"count":329,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.07752303779125214,-0.01646454632282257,-0.08078354597091675],"maxPosition",8,[1,0.07791928201913834,0.01646454632282257,0.07391601800918579]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["8dtgqpeedBD7PbjC6K9nGr"]}],[1],0,[],[],[]],[[[19],[32,"Axe",[-2],[0,"63Rsm9xD5eLrejlJ2LtzxV",-1,0]],[28,"Object004",1,[[30,-3,[1,"bbJF6RLdBbfJKb1L6kqwMB"],[0],[7],1]],[0,"b0kbUyUVFYnJ/ibeFRjYtB",1,0],[3,-0.5000001043081144,-0.49999989569186387,-0.49999989569186387,0.5000001043081144],[1,-13.805624008178711,-13.805624008178711,-13.805624008178711],[1,-90,-89.99997609433862,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[398,40]],[[[23,"Material #513",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[399,4]],[[{"name":"WaterSplash03_00000","rect":{"x":723,"y":262,"width":82,"height":74},"offset":{"x":0,"y":-18},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[23,"monster_M_Medusa",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[400,10]],[[{"name":"Glay_Rock01","rect":{"x":513,"y":781,"width":27,"height":27},"offset":{"x":-0.5,"y":-0.5},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"base":"2,2,0,0,0,0","mipmaps":["095XHcDpxJ7qV9LoP0eFgv"]}],[1],0,[],[],[]],[[[124,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_RIM_LIGHT":true,"USE_DISSOVEFUNC":true}],[[[{"rimExp":10,"rimScale":100,"noiseEdgeWidth_Max":0.05,"noiseEdgeWidth_Min":0.01,"dissolveThreshold":1},"tilingOffset",8,[2,3,3,0,0],"rimColor",8,[4,4278232063],"tintColor",8,[4,3478476287],"noiseTintColor",8,[4,1224750079],"mainTexture",6,0,"noiseTexture",6,1]],11]]],0,0,[0,0,0],[10,60,8],[401,402,403]],[[[65,"Skin-0",2643913713,["Center","Smoke01","Smoke02","Bone001","Bone002","Bone003","Bone004","Bone005","Bone006","Bone007","Bone008","Bone009","Bone010","Bone011","Bone012","Bone013","Bone014","Bone015","Bone016","Bone017","Bone018","Bone019","Bone020","Bone021","Bone022","Bone023","Bone024","Bone025"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],[7,0.9951733946800232,-1.1920928955078125e-7,-0.09813243895769119,0,1.186339133596448e-7,1,-1.1698297441853356e-8,0,0.09813243895769119,-3.4397086839667e-16,0.9951733946800232,0,6.573970355379966e-18,5.541391998042933e-11,-6.482485730595249e-19,1],[7,0.7071757316589355,0.6170619130134583,-0.3451622724533081,0,-0.593390703201294,0.7834146618843079,0.18479406833648682,0,0.38443461060523987,0.07413420081138611,0.9201707243919373,0,-3.2882103290221565e-11,4.341207948677095e-11,1.0240163751673581e-11,1],[7,-0.22123220562934875,0.9691081047058105,0.10902199894189835,0,-0.9108465313911438,-0.24527667462825775,0.3319607675075531,0,0.34844642877578735,-0.025861896574497223,0.9369718432426453,0,-5.0473576707066314e-11,-1.3591742314966737e-11,1.8395248865821223e-11,1],[7,0.7340955138206482,-0.6592110991477966,-0.16292476654052734,0,0.6483613848686218,0.7517593502998352,-0.12035531550645828,0,0.2018197774887085,-0.01728183403611183,0.9792701601982117,0,3.592824648901427e-11,4.1657930577310154e-11,-6.669359942784725e-12,1],[7,0.11027268320322037,-0.9912852644920349,-0.0720650926232338,0,0.8178773522377014,0.13170216977596283,-0.5601171255111694,0,0.5647270083427429,0.002825207309797406,0.8252729177474976,0,4.532178798921649e-11,7.298133451738575e-12,-3.1038283054840576e-11,1],[7,-0.744198739528656,-0.6664389371871948,0.04502706974744797,0,0.663347065448761,-0.745287299156189,-0.06721334904432297,0,0.0783516988158226,-0.020151518285274506,0.9967221021652222,0,3.675866208641132e-11,-4.1299290376439757e-11,-3.7245553863307634e-12,1],[7,-0.9420488476753235,0.037643831223249435,0.3333570659160614,0,-0.058412883430719376,-0.9969112873077393,-0.05249696969985962,0,0.33035120368003845,-0.06892705708742142,0.9413379430770874,0,-3.2368868869980805e-12,-5.52427617539486e-11,-2.9090627476358044e-12,1],[7,-0.5582800507545471,0.8069024085998535,0.1929556280374527,0,-0.7661675214767456,-0.5906493663787842,0.25322073698043823,0,0.3182935118675232,-0.006468245293945074,0.9479702115058899,0,-4.245634399602238e-11,-3.273019702487723e-11,1.4031953550486254e-11,1],[7,0.6902996897697449,0.4121874272823334,-0.5946325659751892,0,-0.3411009907722473,0.9101920127868652,0.23494809865951538,0,0.6380724310874939,0.04064514487981796,0.7689028382301331,0,-1.8901743017996075e-11,5.043730710863059e-11,1.3019395457558591e-11,1],[7,0.19574080407619476,0.970384418964386,-0.14156202971935272,0,-0.7737706303596497,0.24151261150836945,0.5856199264526367,0,0.6024653911590576,-0.005093171261250973,0.7981287837028503,0,-4.2877663225526774e-11,1.3383160031577024e-11,3.2451496351226794e-11,1],[7,-0.6602358222007751,0.4061307907104492,0.6317803859710693,0,-0.26379096508026123,-0.9129897356033325,0.31122997403144836,0,0.7032090425491333,0.03882721811532974,0.709922194480896,0,-1.461769247312894e-11,-5.059233934567864e-11,1.7246473346665958e-11,1],[7,-0.25584879517555237,-0.9369363784790039,0.23809991776943207,0,0.6640729904174805,-0.34932640194892883,-0.6610431671142578,0,0.7025299668312073,-0.011011374182999134,0.7115688920021057,0,3.679888685437227e-11,-1.9357545080755933e-11,-3.663099337747333e-11,1],[7,-0.17087115347385406,-0.1701604127883911,0.9704887270927429,0,0.030803270637989044,-0.985415518283844,-0.16735413670539856,0,0.9848117232322693,0.0012982345651835203,0.1736205667257309,0,1.7069300617053584e-12,-5.4605736599100396e-11,-9.273748435845164e-12,1],[7,0.4451000392436981,0.8949604034423828,-0.03052489273250103,0,-0.8812862634658813,0.4438353180885315,0.1623106449842453,0,0.158809632062912,-0.0453433059155941,0.9862674474716187,0,-4.883552590095874e-11,2.4594654438048202e-11,8.994268871354016e-12,1],[7,0.3569124937057495,-0.46003982424736023,-0.8130047917366028,0,0.24788311123847961,0.8857671618461609,-0.39239078760147095,0,0.9006483554840088,-0.061480987817049026,0.4301774501800537,0,1.3736174524214828e-11,4.908383074986311e-11,-2.1743912226313e-11,1],[7,0.48908019065856934,-0.8704690933227539,-0.05553433299064636,0,0.8653788566589355,0.49221864342689514,-0.09402208775281906,0,0.10917834937572479,-0.0020738975144922733,0.9940200448036194,0,4.7954036574981984e-11,2.7275764979961536e-11,-5.2101322388364846e-12,1],[7,-0.7639515399932861,-0.4940093159675598,0.4151298701763153,0,0.4137718975543976,-0.8687000274658203,-0.2723105847835541,0,0.49514731764793396,-0.03626302257180214,0.8680518865585327,0,2.2928721421511256e-11,-4.8138073388548364e-11,-1.508979746711603e-11,1],[7,0.0762631893157959,-0.9970488548278809,-0.008807975798845291,0,0.9792994260787964,0.07656087726354599,-0.18737952411174774,0,0.18750087916851044,0.005664514843374491,0.982248067855835,0,5.4266820204151855e-11,4.242538178406141e-12,-1.0383433696192768e-11,1],[7,0.8565480709075928,-0.21256761252880096,-0.47025567293167114,0,0.19215668737888336,0.9770744442939758,-0.09165854752063751,0,0.47895845770835876,-0.011852824129164219,0.8777575492858887,0,1.0648155100712042e-11,5.414352646782028e-11,-5.079159315357629e-12,1],[7,0.2479562610387802,0.8718401789665222,-0.4223889112472534,0,-0.40494397282600403,0.48936256766319275,0.772363007068634,0,0.8800784349441528,-0.02046840637922287,0.47438696026802063,0,-2.2439532870732748e-11,2.711749921835427e-11,4.279966311915295e-11,1],[7,-0.660434365272522,0.6364253759384155,0.3984836935997009,0,-0.54453045129776,-0.7713380455970764,0.32943016290664673,0,0.5170233845710754,0.000580503954552114,0.855971097946167,0,-3.0174564236151724e-11,-4.274286480310252e-11,1.825501728947021e-11,1],[7,0.2783021032810211,-0.9517765045166016,-0.129110649228096,0,0.8677434325218201,0.3067757189273834,-0.39103707671165466,0,0.41178786754608154,-0.0032084831036627293,0.9112741351127625,0,4.8085067178016416e-11,1.6999644747439646e-11,-2.1668897579041335e-11,1],[7,-0.5165440440177917,-0.8455626964569092,0.13492976129055023,0,0.8143312335014343,-0.5338191986083984,-0.22781942784786224,0,0.2646636962890625,-0.0078012533485889435,0.9643092155456543,0,4.512528892219869e-11,-2.958101472105845e-11,-1.2624367697056105e-11,1],[7,-0.03588831424713135,-0.9965797662734985,0.07443534582853317,0,0.5161827802658081,-0.08226379752159119,-0.8525185585021973,0,0.8557261824607849,0.007826787419617176,0.5173696279525757,0,2.8603711413333066e-11,-4.558559259237871e-12,-4.7241398293262904e-11,1],[7,-0.8769153356552124,0.4572311043739319,0.14818641543388367,0,-0.4532474875450134,-0.8892512321472168,0.06163596361875534,0,0.15995682775974274,-0.013115597888827324,0.9870368838310242,0,-2.5116221602505817e-11,-4.9276898533845426e-11,3.4154905466377006e-12,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["095XHcDpxJ7qV9LoP0eFgv"]}],[1],0,[],[],[]],[[[124,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4291480266],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[216,10]],[[[124,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true}],[[[{},"tilingOffset",8,[2,0.3,1.5,0,0],"mainColor",8,[4,4291480266],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[216,10]],[[[19],[123,"explosion",[[-3,[16,"Center",-5,[0,"7enFhoMXleQa4NAmi8xCo0",-4,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Smoke01",-7,[0,"c6er5elBRTs7v8MaP5eun3",-6,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Smoke02",-9,[0,"bclBo8+vJaipOfcPFT8N9c",-8,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Bone001",-11,[0,"9ccvnBiQtdUZkcoaxA+ZqU",-10,0],[3,-0.7062530293092724,-0.03473694884632855,0.0347370345280027,0.7062530293092724],[1,1.2172287702560425,1,1.000000238418579],[1,-90.00000034271574,0.000006967903880339513,5.631637175467161]],[16,"Bone002",-13,[0,"6aEviAdNBThowC92uiVIwt",-12,0],[3,-0.6741356711780282,-0.37140022948668155,-0.09205432792961446,0.631766544771102],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-85.39387429997583,-39.99998995291547,22.608643815522772]],[16,"Bone003",-15,[0,"5fGgtXLQtYP7GK0/1xgB2O",-14,0],[3,0.5330550063464916,0.6179261790745318,0.47831299801296334,-0.3244014077576457],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.58105412241288,-103.65199858254984,20.392323490397327]],[16,"Bone004",-17,[0,"92Qc6LUcRaVangmwepkiBY",-16,0],[3,-0.6385573599275324,0.17907212266592834,0.3176246213066153,0.6777110541419019],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.01103011401533,41.45130182352175,11.643395612072615]],[16,"Bone005",-19,[0,"ebFUFswQZZk4TS6Ass5kCQ",-18,0],[3,-0.3699089001720681,0.2882860609546329,0.6014605778512617,0.6467640419222291],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.80386006651895,82.32123971975935,34.3833351073313]],[16,"Bone006",-21,[0,"c1R6LEmHtfGYVb6Z51XmZv",-20,0],[3,-0.22844006905986058,0.643590293584084,0.6766763561984481,0.27516500107075653],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.15823592099746,138.287548605756,4.493826431523457]],[16,"Bone007",-23,[0,"e7bfnAg+RXjprfz9MrWUfa",-22,0],[3,0.1363646255814735,0.6746526443492096,0.7182396738655725,0.10188360637570498],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-94.18786414313364,-176.4518484052417,19.29009370117969]],[16,"Bone008",-25,[0,"db2DIXItBfFoAIvFo9wHwh",-24,0],[3,0.41875078661861925,0.671757509422417,0.5726097142413399,-0.21332543776429908],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.39093585047345,-126.07954565688854,18.5597564669865]],[16,"Bone009",-27,[0,"88jG0vn51fJa1WO9aHoOV+",-26,0],[3,-0.6864041554480814,-0.3825223968612831,0.09234047504085198,0.6115547301365062],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-86.97409130222461,-26.29557225900434,39.64823547388661]],[16,"Bone010",-29,[0,"89FesPdkNYkKyH2lL3hUMt",-28,0],[3,0.668291453188857,0.5883846315024667,0.23650182912492018,-0.38891765687224794],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.3656211904349,-75.80370606177492,37.046671310767046]],[16,"Bone011",-31,[0,"20PvNizK5adLeO2pE+j8B/",-30,0],[3,0.3912054972529596,0.7089240092988996,0.5723151676038395,0.1297704006668225],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-86.86948567421464,-158.2212878535223,44.685039045804615]],[16,"Bone012",-33,[0,"2c1pHMoUtTo7xx8s9X5wZD",-32,0],[3,-0.15339441560985992,0.3820321550821651,0.6942448003472915,0.5903776273993924],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.88656932990698,111.07028285720821,44.63034016371058]],[16,"Bone013",-35,[0,"f3E6LqbmhROZnTqH0qMB8o",-34,0],[3,0.4063485326429576,0.5012023524986808,0.5781278101896936,0.49944499892778293],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.57159115801282,169.78094382320552,80.001324868445]],[16,"Bone014",-37,[0,"2eW0CBctRZjb6j/2L7do0k",-36,0],[3,-0.6427974004712064,-0.40983756738007543,-0.3308823951180281,0.5562027606119903],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.63230066948167,-63.20361062730711,9.137810384848787]],[16,"Bone015",-39,[0,"420oFSL5VWMqZJ//LOf8rR",-38,0],[3,-0.5064589371413412,-0.21749468105649847,0.5236791362161284,0.6495810734571359],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-98.13363534753863,34.780780471645976,64.24342268610513]],[16,"Bone016",-41,[0,"e68e+AzL9YibJEpkeQeSgz",-40,0],[3,-0.591001686681503,0.32203408925751903,0.3895560782885907,0.6286947697922356],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.11953829575658,60.52646875453639,6.2679536916278416]],[16,"Bone017",-43,[0,"07vyJgZPFWbqv9186bZ9HQ",-42,0],[3,0.000471641732438248,0.6031952101574855,0.7198133704046455,0.3435462527576856],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.39215040121667,151.5591091607285,29.679467643185287]],[12,"Bone018",-45,[0,"fcsm2bXhZeAKbF4LLmB2Fc",-44,0],[1,0.02539999969303608,0.02539999969303608,-0.02539999969303608],[3,-0.4698987041605227,0.43070343452681287,0.5257023611478714,0.5633176606486094],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.66958789601851,85.54706572000671,10.806974032586487]],[16,"Bone019",-47,[0,"c40urqNWxe2K0xaI9jJ0sC",-46,0],[3,-0.6664724924993499,-0.09992566673221523,0.248476996233866,0.69576465863999],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.7736467143074,12.644300855792775,28.617398246836707]],[16,"Bone020",-49,[0,"48/GN57ltU6qAUwq0CxwJD",-48,0],[3,0.7142807206991547,0.6131758060986996,-0.006105778240487271,-0.3373146933129125],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.47061873353756,-58.51992512537176,61.65182834569619]],[16,"Bone021",-51,[0,"28oNIweUlSVa6EvW91cDHM",-50,0],[3,0.4087833752220783,0.7054156643866722,0.5767199383052113,-0.05175910877506354],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.96114132434134,-140.49429788043685,31.132796164829927]],[16,"Bone022",-53,[0,"77XHdnclxX0IsTpjuTPN3Y",-52,0],[3,-0.4718245175322684,0.28611725007570693,0.5281911388746408,0.6453934185276974],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.20173213999186,72.21795081444914,24.31719763011717]],[16,"Bone023",-55,[0,"19fdOlW2VRRoVwjttM+1ve",-54,0],[3,-0.25663095598903524,0.5658894156167034,0.6618468136059595,0.41936680488657885],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.46351529348973,122.38764707732128,15.346969790002538]],[16,"Bone024",-57,[0,"6awa6E0wVUuI4f5PI6lyRZ",-56,0],[3,-0.16106387918514542,0.21863010451972612,0.6856712079766438,0.6753623462789264],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.13328736611564,93.97716064408002,58.84005573649517]],[16,"Bone025",-59,[0,"46LeVicQVbsphAnclcaxKg",-58,0],[3,0.22239390529800984,0.6938003462034662,0.6760907925522723,-0.10992393151761969],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.76129406943767,-152.66710866865043,9.20438996867641]]],1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[[63,-2,[1,"c77DwYFHVY7rTYCaIggQey"],[6],7]],[0,"e36cYSKQNSELxrBh1ebww1",-1,0]],[44,"Bomb",1,[[64,-60,[1,"2cOtnnM7BflYeRODoun8Bk"],[0,1,2,3],[7],1,4,5]],[0,"14F8wkDPRcW76tlonOFSEY",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,-1,2,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,0,2,0,9,1,60],[0,0,0,0,0,0,0,0],[-1,-2,-3,-4,6,13,-1,7],[217,218,219,220,221,222,60,60]],[[[18,".bin",3748813618,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":10696,"length":4320,"count":1080,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[1],"indexView":{"offset":22072,"length":2304,"count":576,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[2],"indexView":{"offset":27176,"length":576,"count":144,"stride":4}},{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[3],"indexView":{"offset":38952,"length":1200,"count":300,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10696,"count":191,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":15016,"length":7056,"count":126,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":24376,"length":2800,"count":50,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":27752,"length":11200,"count":200,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]]},"minPosition",8,[1,-77.86260986328125,-75.343017578125,-6.133390426635742],"maxPosition",8,[1,80.6903305053711,79.96206665039062,80.32100677490234]]],-1],0,0,[],[],[]],[[[124,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4291480266],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[404,10]],[[{"base":"2,2,0,0,0,0","mipmaps":["9aVzaif7FEPL930cs7R3iW"]}],[1],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["73gumfuq1AHZaON3DtJxWv"]}],[1],0,[],[],[]],[[[23,"Golden_Giant",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[405,10]],[[{"name":"monster_L_004_body","rect":{"x":2,"y":134,"width":127,"height":128},"offset":{"x":-0.5,"y":0},"originalSize":{"width":128,"height":128},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[71]],[[[26,"OddsPanel_3","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[406,24]],[[{"name":"WARNING","rect":{"x":259,"y":117,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"CircleLight","rect":{"x":735,"y":730,"width":108,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":108,"height":108},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"zh-TW","spriteFrames":["BossComing_1","88adoQvJ5AE6enyL4x5OMb@cd952","BossComing_2","88adoQvJ5AE6enyL4x5OMb@9e2de","BossComing_4","88adoQvJ5AE6enyL4x5OMb@db9f1","BossComing_5","88adoQvJ5AE6enyL4x5OMb@580a7","CardTitle_01","88adoQvJ5AE6enyL4x5OMb@d92fc","CardTitle_02","88adoQvJ5AE6enyL4x5OMb@45836","CardTitle_03","88adoQvJ5AE6enyL4x5OMb@30c8a","FishWaveLogo_3","88adoQvJ5AE6enyL4x5OMb@dd7e5","GetReward","88adoQvJ5AE6enyL4x5OMb@063e8","HelpTitle","88adoQvJ5AE6enyL4x5OMb@28ada","JackPot","88adoQvJ5AE6enyL4x5OMb@77a70","JackPot02","88adoQvJ5AE6enyL4x5OMb@85d98","JackPot03","88adoQvJ5AE6enyL4x5OMb@ebe6a","PaperRollCollection10","88adoQvJ5AE6enyL4x5OMb@e7f36","PaperRollCollection11","88adoQvJ5AE6enyL4x5OMb@46103","TreasureSkill01_text","88adoQvJ5AE6enyL4x5OMb@1b46f","TreasureSkill02_text","88adoQvJ5AE6enyL4x5OMb@be6d1","WPageWord","88adoQvJ5AE6enyL4x5OMb@8730e","bet","88adoQvJ5AE6enyL4x5OMb@ba7c5","bonusGameText01_1_L","88adoQvJ5AE6enyL4x5OMb@6cabe","bonusGameText01_2_L","88adoQvJ5AE6enyL4x5OMb@c1f1c","bonusGameText01_L","88adoQvJ5AE6enyL4x5OMb@5ea1f","bonusType","88adoQvJ5AE6enyL4x5OMb@635ea","crocodile_text01","88adoQvJ5AE6enyL4x5OMb@86077","crocodile_text02","88adoQvJ5AE6enyL4x5OMb@f2c91","crocodile_text03","88adoQvJ5AE6enyL4x5OMb@b1f05","icon_auto","88adoQvJ5AE6enyL4x5OMb@72cd4","icon_lock","88adoQvJ5AE6enyL4x5OMb@5f240","icon_skilltext01","88adoQvJ5AE6enyL4x5OMb@4fc6e","icon_skilltext02","88adoQvJ5AE6enyL4x5OMb@7d95e"]}],[36],0,[],[],[]],[[{"name":"GetReward","rect":{"x":404,"y":482,"width":224,"height":66},"offset":{"x":0,"y":0},"originalSize":{"width":224,"height":66},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"TreasureSkill01_text","rect":{"x":404,"y":1164,"width":110,"height":33},"offset":{"x":0,"y":0},"originalSize":{"width":110,"height":33},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"HelpTitle","rect":{"x":2,"y":1644,"width":90,"height":54},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":54},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"CardTitle_03","rect":{"x":403,"y":1595,"width":112,"height":37},"offset":{"x":0,"y":0},"originalSize":{"width":112,"height":37},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"CardTitle_02","rect":{"x":403,"y":1451,"width":142,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":142,"height":38},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"PaperRollCollection11","rect":{"x":398,"y":1276,"width":173,"height":72},"offset":{"x":0,"y":0},"originalSize":{"width":173,"height":72},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"icon_skilltext01","rect":{"x":443,"y":1451,"width":73,"height":27},"offset":{"x":0,"y":0},"originalSize":{"width":73,"height":27},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"BossComing_5","rect":{"x":106,"y":1543,"width":196,"height":103},"offset":{"x":0,"y":0},"originalSize":{"width":196,"height":103},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"bonusGameText01_L","rect":{"x":2,"y":943,"width":593,"height":184},"offset":{"x":0,"y":0},"originalSize":{"width":593,"height":184},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"icon_lock","rect":{"x":443,"y":1526,"width":51,"height":27},"offset":{"x":0,"y":0},"originalSize":{"width":51,"height":27},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"bonusType","rect":{"x":439,"y":1164,"width":73,"height":21},"offset":{"x":0,"y":0},"originalSize":{"width":73,"height":21},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"bonusGameText01_1_L","rect":{"x":404,"y":708,"width":246,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":246,"height":58},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"icon_auto","rect":{"x":244,"y":1648,"width":48,"height":27},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":27},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"JackPot","rect":{"x":354,"y":1524,"width":148,"height":47},"offset":{"x":0,"y":0},"originalSize":{"width":148,"height":47},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"icon_skilltext02","rect":{"x":443,"y":1579,"width":51,"height":27},"offset":{"x":0,"y":0},"originalSize":{"width":51,"height":27},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"JackPot02","rect":{"x":94,"y":1648,"width":148,"height":46},"offset":{"x":0,"y":0},"originalSize":{"width":148,"height":46},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"crocodile_text01","rect":{"x":296,"y":482,"width":395,"height":106},"offset":{"x":0,"y":0},"originalSize":{"width":395,"height":106},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"WPageWord","rect":{"x":296,"y":2,"width":478,"height":132},"offset":{"x":0,"y":0},"originalSize":{"width":478,"height":132},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"BossComing_2","rect":{"x":188,"y":1341,"width":200,"height":110},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":110},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"crocodile_text03","rect":{"x":296,"y":879,"width":395,"height":106},"offset":{"x":0,"y":0},"originalSize":{"width":395,"height":106},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"bet","rect":{"x":442,"y":1632,"width":49,"height":25},"offset":{"x":0,"y":0},"originalSize":{"width":49,"height":25},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"TreasureSkill02_text","rect":{"x":244,"y":1677,"width":111,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":111,"height":34},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"bonusGameText01_2_L","rect":{"x":430,"y":2,"width":291,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":291,"height":36},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"BossComing_1","rect":{"x":300,"y":1276,"width":246,"height":96},"offset":{"x":0,"y":0},"originalSize":{"width":246,"height":96},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"CardTitle_01","rect":{"x":430,"y":295,"width":142,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":142,"height":38},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"BossComing_4","rect":{"x":2,"y":1538,"width":102,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":102,"height":104},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"FishWaveLogo_3","rect":{"x":2,"y":2,"width":939,"height":292},"offset":{"x":-4,"y":-1},"originalSize":{"width":949,"height":294},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"PaperRollCollection10","rect":{"x":404,"y":956,"width":206,"height":56},"offset":{"x":0,"y":0},"originalSize":{"width":206,"height":56},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"JackPot03","rect":{"x":304,"y":1524,"width":147,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":147,"height":48},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"name":"crocodile_text02","rect":{"x":188,"y":943,"width":396,"height":106},"offset":{"x":0,"y":0},"originalSize":{"width":396,"height":106},"rotated":true,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[],"indexes":[],"uv":[],"nuv":[],"minPos":{"x":0,"y":0,"z":0},"maxPos":{"x":0,"y":0,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[6]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["89kku7yJpD85nVpzF02cKs"]}],[1],0,[],[],[]],[[[26,"Rock_01","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.6},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[43,24]],[[{"name":"SunLight","rect":{"x":592,"y":346,"width":150,"height":149},"offset":{"x":0,"y":-0.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"fire","rect":{"x":2,"y":265,"width":30,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":30},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[71]],[[{"name":"your_location_arrow","rect":{"x":182,"y":334,"width":66,"height":74},"offset":{"x":1,"y":-1},"originalSize":{"width":70,"height":76},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Frame_01","rect":{"x":2,"y":618,"width":106,"height":106},"offset":{"x":0,"y":0},"originalSize":{"width":106,"height":106},"rotated":false,"capInsets":[5,5,5,5],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["8dtgqpeedBD7PbjC6K9nGr"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["8epTw98txCKZrcPmtiGNgM"]}],[1],0,[],[],[]],[[{"name":"Default","rect":{"x":0,"y":0,"width":16,"height":16},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":16},"rotated":false,"capInsets":[2,2,2,2],"vertices":{"rawPosition":[-8,-8,0,8,-8,0,-8,8,0,8,8,0],"indexes":[0,1,2,2,1,3],"uv":[0,16,16,16,0,0,16,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-8,"y":-8,"z":0},"maxPos":{"x":8,"y":8,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[407]],[[[18,".bin",113784299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.7378522753715515,-0.5237905383110046,-9.541948884361773e-7],"maxPosition",8,[1,0.7378523349761963,0.5237904787063599,-7.611262162754429e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["8eq4ymAcVEfZZmAMt3z4Ft@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_07",[-2],[0,"2fWQpksbNe77BmzN3lJMqy",-1,0]],[27,"Plane021",1,[[30,-3,[1,"83OP2wWedZxK5nw2oOrIeH"],[0],[7],1]],[0,"bb2XNivRpTn4+m0VmrCo+m",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[408,129]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[223,223,4]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["91e5bqTsBFGZ7CLdzBsBF4"]}],[1],0,[],[],[]],[[[31,"Glass_Broken",".mp3",0.757551],-1],0,0,[],[],[]],[[[23,"monster_S_004",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[409,10]],[[{"name":"S_coin0003","rect":{"x":2,"y":156,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[31,"Medusa_01",".mp3",4.310204],-1],0,0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["96iGVSgndMapePO7/d3GSo"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["97buOjJiNGQpAA8CMY/TDE"]}],[1],0,[],[],[]],[[{"name":"roll_light0001","rect":{"x":257,"y":249,"width":71,"height":45},"offset":{"x":-13.5,"y":-27.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"roll_light0006","rect":{"x":182,"y":285,"width":45,"height":71},"offset":{"x":27.5,"y":-13.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"mouse_position","rect":{"x":2,"y":728,"width":98,"height":98},"offset":{"x":0,"y":0},"originalSize":{"width":98,"height":98},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"Axe_Chips","rect":{"x":513,"y":676,"width":28,"height":101},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":101},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[23,"Coin_LP",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[410,10]],[[{"fmt":"0_4_7@93","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["9aVzaif7FEPL930cs7R3iW"]}],[1],0,[],[],[]],[[[31,"Medusa_02",".mp3",2.194286],-1],0,0,[],[],[]],[[{"name":"S_coin0001","rect":{"x":2,"y":310,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[33,"Monster_6"],[94,"Monster_6",[-13],[[[2,-2,[1,"8d2mUer6lIiK5B95pC1tJP"],[5,0,0]],[259,true,58,30,[60,70,80],-8,[1,"a6kc6d6dxLuKldctfgCYga"],[-7],[-6],[-5],-4,-3,37,38,39],-9,[66,8,4,-10,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[70,true,-12,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-11]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[20,"Bip001 Head",[-14,-15,-16,-17,-18,-19,-20,-21],[0,"abDV/PdSxDZYzaD63M7H55",1,0],[1,0.1295163631439209,2.2351741790771484e-8,1.862645149230957e-9],[3,0.07394517312672352,0.023110153464713862,-0.08993150414918638,0.992930187243575],[1,8.82244615640815,3.446883851549998,-10.088763148988493]],[43,"Bip001 Spine1",[[-22,[6,"Bone006_L",-23,[0,"6fHpU4/EhP9KNUgRt6ouhv",1,0],[1,0.5088258981704712,0.42776697874069214,0.1937049776315689],[3,0.28355473112256985,0.542766865858189,0.784542615542204,0.09743576439215411],[1,-116.19698700654031,-157.53511065584348,27.431850341928737]],[6,"Bone005_R",-24,[0,"33/pGtXGtF/oYQWAYE6o/J",1,0],[1,0.6713540554046631,-0.2445410043001175,-0.20629499852657318],[3,-0.06030400236645095,0.7224620151482791,-0.6253005410605694,0.2888101406042279],[1,76.36450314494448,157.51233440395697,-26.63601047466797]],[6,"Bone004_R",-25,[0,"50AopUPdRNEYN08fTji/Af",1,0],[1,0.7057569026947021,-0.0912640243768692,-0.4272949695587158],[3,-0.043889558445851226,0.8127568708426727,0.05041825987683029,0.5787555396092963],[1,-7.6296556927139685,109.04186637627085,-0.743914120805029]],[6,"Bone004",-26,[0,"d3kXmUQxJDGar2cMqu3cbv",1,0],[1,0.7057571411132812,-0.09126503765583038,0.414730966091156],[3,0.5444103901221266,0.04854447984325859,0.8361514539180148,-0.04595113398613222],[1,-172.45808853135853,-113.77384865555763,-1.3745416614866315]],[12,"Bone005",-27,[0,"e7xbngaGFNP4gTl7ULtXXX",1,0],[1,0.671353816986084,-0.24454204738140106,0.21195097267627716],[3,0.2888095330695279,-0.6253023639313815,0.7224606155034472,-0.0603047785533435],[1,0.733959972858429,1,1],[1,103.6351934974812,-157.51251740117513,-26.636090332415165]],[12,"Bone006",-28,[0,"3ehtmkSJJNZojOL78j8C0c",1,0],[1,0.5088269710540771,0.42776793241500854,-0.2493010312318802],[3,0.09743568200798261,0.7845415988187666,0.5427684131959524,0.28355461066835175],[1,0.5433869957923889,1,1],[1,-63.803245458229355,157.53517314301604,27.43187741305809]]],1,4,4,4,4,4,4],[0,"ecJAuiYJVBPLP1U8E9rSIT",1,0],[1,0.2922067642211914,-0.0005435049533843994,-2.7939677238464355e-9],[3,-7.074955604125484e-8,3.609806006398555e-7,-0.09701794955097177,0.9952826319517436],[1,-0.000004133693964366004,0.00004115844683504198,-11.134952828824668]],[134,"RootNode",[-30,-31,-32,-33],[-29],[0,"bauRncKMlGWrb6M1Wk25Uc",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.3,1.3,1.3],[1,90,0,0]],[102,"HeartFx",4,[-35,-36,-37,-38],[[40,-34,[1,"9cIf81VYxMzLtHj1ZSPmdd"],[11],12]],[0,"06ZEF8pghCCpi1urYE6YJg",1,0],[1,0,2,1.5],[1,0.05,0.05,0.05]],[77,"RootNode",1,[-40,-41,-42],[[40,-39,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[32,33,34,35],36]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[3,"Bip001 Neck",3,[2,-43,-44],[0,"35s5itAJhOKYQkhnpn2F/S",1,0],[1,0.8279080390930176,0.012804195284843445,7.427297532558441e-8],[3,-4.069383665223806e-10,-1.9270195851371112e-7,0.06905978827008684,0.9976125227983327],[1,0.0000014926972131874775,-0.00002223819639387183,7.919972725768341]],[81,"Bip001 R Hand",[[6,"Bip001 R Finger0",-45,[0,"75+m13OnZFY5GdFGU9cgXv",1,0],[1,0.20745021104812622,0.05669069290161133,0.12940382957458496],[3,0.7625060801962249,0.4272671113598833,-0.08812193716327978,-0.47776753490014384],[1,-105.27061024714571,-23.85524983138282,47.374108901816655]],[6,"Bip001 R Finger1",-46,[0,"ebMhUSuxRPe54ebOLI15kZ",1,0],[1,0.2144753336906433,-0.02633523941040039,-0.0002695322036743164],[3,0.00852050608967541,0.0014097985892154582,0.18827795468144026,0.9820778101682612],[1,0.9993659180810737,-0.027095927597114162,21.705209010925373]],[12,"Bone009",-47,[0,"bfcRHZ7SlCmK9zIGLcDCpe",1,0],[1,0.22783297300338745,0.1078529953956604,-1.7005300521850586],[3,0.5145162304489943,-0.490295764021116,0.48460584506988236,0.5099414547883048],[1,1.0432720184326172,0.9999989867210388,1],[1,89.95069739927534,-87.16057116528395,-0.5895288174405287]]],[0,"412yzZcSJPL7Ktny+huuAf",1,0],[1,0.5122831463813782,-5.960464477539063e-8,0],[3,0.9227514579131476,0.07445021489695781,0.07470077791472385,0.37068410567475457],[1,136.69825954123868,-4.832653576967103,11.11500052792832]],[142,"eff_heart_002_1",false,5,[[2,-48,[1,"2bvMY0eq5HGoxZUsjcQ+8l"],[5,150,150]],[39,1,2,false,-49,[1,"ff6s3fx7tKupUUzo/hL9tW"],3,4],[15,0,-50,[1,"6apsQxuoFNp4L7ecx1C887"]]],[0,"ec1FvRu85NGLZny5bfjkeE",1,0]],[162,"eff_heart_003_2",false,5,[[2,-51,[1,"b9mS56v9tAy4uZ6Sa2BD9u"],[5,150,150]],[39,1,2,false,-52,[1,"d0ynP/fCtAiJZ/nOQAndGI"],5,6],[15,0,-53,[1,"44ELkyb/FOZ6Lh/+buEevC"]]],[0,"53qe+vGhFOrqUIW+nWShbx",1,0],[1,0.5,0.5,1]],[162,"eff_heart_003_2_add",false,5,[[2,-54,[1,"c0M5r1fZ5A0652dVPLA/gB"],[5,150,150]],[39,1,2,false,-55,[1,"a5JU+tFo1NlIuKDcmAL04C"],7,8],[15,0,-56,[1,"a3mOkgPkFEw5NzYRd0rhHO"]]],[0,"e28h3EcpdFVLjzKgqxJ11E",1,0],[1,0.5,0.5,1]],[72,"RootNode",[-58],[[40,-57,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[26,27,28],29]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",12,[4],[[74,1,0,-59,[1,"0cCuiskZ1LlaHSvmTemF09"],[24],[7],25]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001",4,[-60,-61],[0,"4c5jRJj7JMBb6dgs/FcTt4",1,0],[1,0.006295293569564819,0.8358689546585083,-0.05548858642578125],[3,0.457184380710454,0.5394278839978507,0.5394278839978507,-0.457184380710454],[1,-90,-99.4350681742064,0]],[81,"Bip001 L Hand",[[6,"Bip001 L Finger0",-62,[0,"2fD2IuPatHGYnfKZeX1/Yp",1,0],[1,0.20745033025741577,0.05669069290161133,-0.1294039487838745],[3,0.6380314323256805,0.08115298418428679,0.010544588010625862,0.7656493297757869],[1,79.22494387747372,6.408505358565528,6.8749750490189125]],[6,"Bip001 L Finger1",-63,[0,"94Rudt3BFCA7/DeyAfJOrx",1,0],[1,0.21447548270225525,-0.02633523941040039,0.0002695322036743164],[3,-0.0003961778949944484,-0.000039826037589937423,-0.1000954569992293,0.9949777590203098],[1,-0.046560440161082725,-0.00927077508381012,-11.489331902843915]]],[0,"81ELoKWZpCkZ3P7UQi+MUO",1,0],[1,0.512283205986023,1.1920928955078125e-7,4.440892098500626e-16],[3,-0.7068251826029134,4.2163626412799475e-8,4.2130063927347266e-8,0.707388267670842],[1,-89.95437407813083,0.000006830189170012744,0]],[142,"Particle_1",false,5,[[8,-64,[1,"271LhwI7BKQJbCITTpHIwM"],[5,0,0],[0,0,0]],[260,1,0,30.000000000000004,0.7,0.2,360,20,10,30,5,130,70,0,true,2,-65,[1,"3dd+TXJ2JNxItFTYf3AqZR"],[0,0,35],[4,4287203839],[4,132],[4,2435328255],[4,76],9,10]],[0,"24IgLZ1m5PSo4X50Tjul8T",1,0]],[48,"Odds",6,[-66,-67],[0,"8d4GsIhIlAWrE+ZvZl4/NS",1,0]],[108,"OddsNum",17,[[[2,-68,[1,"beJ1C1UwZCj6qesWfHhS+t"],[5,33.26,32]],-69],4,1],[0,"4bIwSQVu5AS4I22dSZzJlt",1,0],[1,1.5,10,62]],[78,"FloorNode",6,[-70],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",19,[[113,1,-71,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",6,[12],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",4,[0,"58UoIoN85BDIBnAlwaP9pY",1,0],[1,0,2.2,0]],[201,"monster_M_001",4,[-72],[0,"731K6w7vFPGauN4IQKbzid",1,0]],[95,1,0,23,[1,"73yt+5DdNMCpgF/6FGwrX7"],[2],[7],4],[54,"Bip001 Pelvis",14,[-73],[0,"acVQD8PGtI6JC8ziqK2h2k",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 Spine",25,[3],[0,"6eZzn6WW9IOb9YbkwQoVEr",1,0],[1,0.26835691928863525,0.002127472311258316,3.57162207365036e-7],[3,-0.0000021128378688168253,-6.665861334597422e-7,0.01597758419952739,0.99987235025189],[1,-0.00024098506844866903,-0.00007254404526517467,1.8309741915122573]],[3,"Dummy004",2,[-74],[0,"15yzYOWldHvoFRpBlRFvmZ",1,0],[1,-0.07082700729370117,0.7166298627853394,-0.0062940046191215515],[3,0.7067794319838114,-0.021517502497377723,0.7067791935652284,0.021517508085313265],[1,176.51240060492108,-89.99998067647574,-1.353023651568393e-7]],[3,"Bone010",27,[-75],[0,"21HBCZIqRFyIFQzw12Ft5a",1,0],[1,7.450580596923828e-9,-0.1324460506439209,0],[3,0.1370333846289246,0.13501599097059816,-0.6990256732643424,0.6887348123891384],[1,92.24959601739155,92.08301387009578,-67.80191841703953]],[5,"Bone011",28,[[6,"Bone012",-76,[0,"ffLwFHPjZLNo7tWvUrplHy",1,0],[1,0.18970704078674316,0,-2.384185791015625e-7],[3,3.2137361389572864e-8,-0.2585453106963138,0.0000018022847240557237,0.9659991316319583],[1,0.00005695394454365773,-29.96752704924242,0.00019855239489391694]]],[0,"dcKJdlqnpLc7KYy7Q5Y8Wu",1,0],[1,0.18845495581626892,-0.000004999339580535889,0],[3,-0.0015755049212440534,0.21203416935086186,0.007259133391411638,0.9772340220204876],[1,-0.3528414138074168,24.486244130574686,0.7746409084707662]],[5,"Bone007",2,[[6,"Bone008",-77,[0,"e8R928MlhPt7qbaVUTzQS/",1,0],[1,0.3215360641479492,1.4901161193847656e-8,0],[3,0.0014230069692016982,0.08671547323076333,0.016344038488014093,0.9960980243728189],[1,0.000019880729334029245,9.95069935941348,1.880058467766643]]],[0,"dfUy7YRZVKkYJEicWHK32Z",1,0],[1,1.0107722282409668,0.9223159551620483,-0.0110040083527565],[3,0.13658505792897296,0.6937899647811329,0.6978979765382015,0.11374718046359368],[1,-90.6989042373325,-177.99405248699262,20.382792451409227]],[3,"Snake03_00",2,[-78],[0,"achzwI1LdLCpugHQ8X3wnX",1,0],[1,0.4913027286529541,-1.5660289525985718,0.6260451078414917],[3,0.9828170998211011,-0.03333227290355506,0.07595940574367756,0.16489292453404428],[1,160.76443049536132,-9.231991829492207,-2.3193201287384366]],[5,"Snake03_01",31,[[6,"Snake03_02",-79,[0,"cful4M69lHHohmOn/CSntl",1,0],[1,0.5405089855194092,-0.000003814697265625,-7.450580596923828e-8],[3,-0.051361986232637574,0.041758649643081035,0.17972246067156636,0.9814876457095025],[1,-7.0987401001895885,6.15107678065323,20.39566522543664]]],[0,"27WwdzJUlBcrlJLMCeciBE",1,0],[1,0.5569455623626709,-1.1920928955078125e-7,-1.043081283569336e-7],[3,-0.030292754771895657,-0.05465829332539751,-0.24294331492611265,0.9680254984822435],[1,-5.52966693292776,-7.835018090640249,-27.84227213480408]],[3,"Snake04_00",2,[-80],[0,"c4JRneaqNHz78fZXcLxQ/p",1,0],[1,0.4842193126678467,-1.5936418771743774,-0.6460533142089844],[3,0.16146969748329956,0.009189968902003473,-0.11886858905600439,0.9796496005215675],[1,19.10632661475625,3.3219105062810836,-13.293028808224859]],[5,"Snake04_01",33,[[6,"Snake04_02",-81,[0,"117zoDOAhH/bxSN/59ZIkY",1,0],[1,0.5405092239379883,0.000003814697265625,2.384185791015625e-7],[3,0.030842506742806988,-0.15198564275513857,-0.07453748459272361,0.9850854113043788],[1,2.211105093684249,-17.367839010125014,-8.987954354030984]]],[0,"bdBkr4eWlDIKJ8l+6zcAtU",1,0],[1,0.55694580078125,1.1102230246251565e-16,-2.086162567138672e-7],[3,-0.010713920013417288,0.12212248910059875,0.25213751234990506,0.9598947777958905],[1,-5.3781695646130405,15.881774084972376,28.77911002085089]],[3,"Snake02_00",2,[-82],[0,"54wNNsZyFAvJf+8LRi19eA",1,0],[1,0.3049478530883789,-0.488728791475296,1.263437271118164],[3,0.3950479651523844,-0.15511064329037855,0.24349679206110947,0.8721164519850283],[1,53.329764261056894,-29.054103227648973,17.58755404078638]],[5,"Snake02_01",35,[[6,"Snake02_02",-83,[0,"b2mA4CTj5M0Lsmkji2F8v9",1,0],[1,0.4091451168060303,-5.551115123125783e-17,-5.960464477539063e-8],[3,0.005713914966876069,0.09197623250760911,-0.07274688755069099,0.9930838908073902],[1,1.4319226144250838,10.686144547296982,-8.246747102774592]]],[0,"94dE2dNVJKT5XoT06kg9vg",1,0],[1,0.3923511505126953,-0.0000010132789611816406,1.1102230246251565e-16],[3,-0.01201634317785598,-0.020594640089270276,-0.09690473410149118,0.9950080104225014],[1,-1.6294320880322712,-2.5296690336443266,-11.089785905171901]],[3,"Snake05_00",2,[-84],[0,"e9AsJsRVZLW7a1+Wo133nn",1,0],[1,0.3049478530883789,-0.4887251555919647,-1.2717746496200562],[3,0.9108685056684446,0.0238287853475628,-0.14103834023886544,0.387116185340862],[1,134.48032823768534,16.020521881459125,-3.7720226004019963]],[5,"Snake05_01",37,[[6,"Snake05_02",-85,[0,"d11sjELRdPCojha47CE0ME",1,0],[1,0.40914463996887207,1.1920928955078125e-7,1.1920928955078125e-7],[3,-0.0016205210420031178,0.0832160994711163,-0.018936535011280634,0.9963502709098504],[1,-0.004447302508380832,9.548547048594843,-2.1780248617648104]]],[0,"89ZuSzMt1MDb34hoGn/SXX",1,0],[1,0.3923511505126953,0.0000010132789611816406,1.1920928955078125e-7],[3,0.010942926649639115,-0.021184455640649247,0.14787355091373935,0.9887188094376034],[1,1.6718548082941498,-2.7043806757538467,16.974561028451312]],[3,"Snake01_00",2,[-86],[0,"ccgNzPCSdE5bWhrxNy1HiZ",1,0],[1,-0.3496628999710083,0.4691341817378998,1.0494390726089478],[3,0.2715985155725662,-0.10637422560102068,0.3883942630461715,0.8741102143891142],[1,45.345155568550524,-30.43327506102155,38.40503315560268]],[5,"Snake01_01",39,[[6,"Snake01_02",-87,[0,"2dMW0jGK1PE5t2S+nW8e/X",1,0],[1,0.5604145526885986,2.220446049250313e-16,-8.940696716308594e-8],[3,0.0019355336385676028,0.006964810341679176,-0.015274403012439262,0.9998572086748447],[1,0.2340644473712525,0.801781910194571,-1.7487944770036215]]],[0,"6fvYRVQbBHG5/4ZtRSeaw/",1,0],[1,0.5125818252563477,-0.0000014901161193847656,0],[3,0.010415564291665978,-0.00978977046952703,-0.26277327538764755,0.9647517204735568],[1,0.9940936728502086,-0.8919385835975735,-30.47922243274694]],[3,"Snake06_00",2,[-88],[0,"5344hC1axG3LUI+VOOBfKw",1,0],[1,-0.3496626615524292,0.4691372811794281,-1.0664880275726318],[3,0.8265611731831087,0.4832737564217769,-0.12238118352277,0.26127753301750634],[1,125.76822953637175,42.12559594347819,47.303814188936]],[5,"Snake06_01",41,[[6,"Snake06_02",-89,[0,"b46JRCqVNMbom2MrVENC+k",1,0],[1,0.5604140758514404,2.384185791015625e-7,-2.9802322387695312e-8],[3,-0.0019356219985397693,0.006964734907215307,0.015274401155641527,0.9998572090576171],[1,-0.23407444250673903,0.8017734169270696,1.748794211017712]]],[0,"b6p0z4tU9OS5+i61JJSD9Z",1,0],[1,0.5125820636749268,0.000001430511474609375,-8.940696716308594e-8],[3,-0.008046885748829512,-0.01188384804620038,0.3260937250630507,0.9452284931485422],[1,-0.5430876248981581,-1.2532365060036306,38.07245009244907]],[3,"Bip001 L Clavicle",7,[-90],[0,"d7CuUO/a5M86YNyQkRK4Ar",1,0],[1,-0.26825904846191406,-0.10199030488729477,0.21269501745700836],[3,0.7003988676524229,-0.05891770168939349,0.710222786069219,0.03941731557221863],[1,172.0126751637314,-90.90422007248347,-1.5209020835903806]],[3,"Bip001 L UpperArm",43,[-91],[0,"725v/J9XpIz7veES/+ooMP",1,0],[1,0.20820294320583344,-2.9802322387695312e-8,0],[3,-0.12663648943169514,0.4241265329945066,0.3595512188776481,0.8214638181673455],[1,-35.87588617089792,64.15250053649092,28.900946387684233]],[3,"Bip001 L Forearm",44,[15],[0,"456j7IuVtEMJ3rnIQB9JrX",1,0],[1,0.5641331672668457,4.470348358154297e-8,-1.1920928955078125e-7],[3,-1.9556176159540715e-17,7.602980401668286e-17,-0.5086692038462095,0.8609620439127751],[1,5.186042017111889e-15,1.3183338010000188e-14,-61.150453341614266]],[3,"Bip001 R Clavicle",7,[-92],[0,"0bYbPZbvpMoa+buvfZPPUf",1,0],[1,-0.26825904846191406,-0.10198908299207687,-0.2126956433057785],[3,-0.70039872980014,0.058915952960024054,0.7102229459786642,0.03941949754309426],[1,-172.0126427568339,90.90422235567199,-1.5205823844389412]],[3,"Bip001 R UpperArm",46,[-93],[0,"4deizE4U9F3JXosVPamJhf",1,0],[1,0.20820294320583344,2.9802322387695312e-8,0],[3,0.25814977681426926,-0.19948876207919058,0.24269448590371073,0.9135985513598347],[1,37.20300276861978,-31.39452785718178,19.904579427305286]],[3,"Bip001 R Forearm",47,[8],[0,"34JvuQr45OD6kVHsXscpBb",1,0],[1,0.5641331672668457,2.220446049250313e-16,-1.1920928955078125e-7],[3,4.9591312325744706e-17,-2.4943721497209758e-17,-0.4493461691625925,0.8933577224487976],[1,6.361108937661871e-15,-1.696334878085474e-24,-53.40348515652033]],[3,"Bip001 Xtra01",14,[-94],[0,"f6ckS7ycVFxb81qjgvi0A+",1,0],[1,-0.6342772245407104,0.000012071337550878525,-0.5227375030517578],[3,0.17749346616686404,0.6918781927163172,0.6899686983352283,0.11723408731792002],[1,-90.94873164928636,-174.80405722384972,24.04057088081078]],[3,"Bip001 Xtra0102",49,[-95],[0,"e9tjeXfZRN3KoVEYiJpDgy",1,0],[1,0.9724041223526001,-0.00040841102600097656,0.0000035762786865234375],[3,0.007453510897151411,-0.029092477219821646,0.35711556163964225,0.9335772858094411],[1,2.6670342263460642,-4.58802620066076,41.786459136679916]],[3,"Bip001 Xtra0103",50,[-96],[0,"4c8I9yrupFLLzZrEVBUhoh",1,0],[1,0.6884965896606445,-0.0004330873489379883,-1.1920928955078125e-7],[3,0.00020985308187388573,-0.0005480541140721387,0.24118392132364547,0.9704792484609457],[1,0.043551124628488515,-0.07553607185131735,27.91283330612798]],[3,"Bip001 Xtra0104",51,[-97],[0,"59UkyPbOhEiLhJzkTRZUSS",1,0],[1,0.6155774593353271,-0.00042247772216796875,5.960464477539063e-8],[3,0.025255371131700222,-0.14390055975736182,0.17178449202402896,0.9742406701788652],[1,5.992911833103879,-17.81418307197578,19.11409516670665]],[5,"Bip001 Xtra0105",52,[[6,"Bip001 Xtra0106",-98,[0,"91fp+OSrxKjr2rnu8yu1wS",1,0],[1,0.5110671520233154,-0.00032329559326171875,-1.1920928955078125e-7],[3,0.01189593044223489,-0.06777698573827687,0.17323634097905313,0.9824733773529623],[1,2.85467962571392,-8.391116519960944,19.80302808604116]]],[0,"5aWD8kjsdMO6HdIpc4F0V4",1,0],[1,0.5645923614501953,-0.0003821849822998047,2.384185791015625e-7],[3,0.022902058341459763,-0.1304897362484043,0.17211712824671307,0.9761268455593519],[1,5.448440880748097,-16.154136018008387,19.27116278934768]],[126,true,4,[1,"b4dex8nD1NGpb3lq3VOiIv"],[13,14,15,16,17,18,19,20,21,22,23]],[9,"Board",17,[[83,"Quad<ModelComponent>",0,-99,[1,"b1u69hEWBEmJZuZYzyUUrO"],[30],[7],31]],[0,"1fiaaUk0xGEaSetZsJb5cN",1,0],[1,0,10,60],[1,96,46,1]],[111,"X2",26,26,32,false,false,18,[1,"d6J+uMQyJFYKuudlWgOy7Q"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,45,0],[1,120,180,110]]],0,[0,4,1,0,0,1,0,61,5,0,20,56,0,-1,57,0,-1,22,0,-1,54,0,0,1,0,-3,57,0,0,1,0,-1,24,0,0,1,0,-1,6,0,-1,27,0,-2,30,0,-3,31,0,-4,33,0,-5,35,0,-6,37,0,-7,39,0,-8,41,0,-1,7,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,-1,54,0,-1,22,0,-2,23,0,-3,14,0,-4,5,0,0,5,0,-1,9,0,-2,10,0,-3,11,0,-4,16,0,0,6,0,-1,19,0,-2,21,0,-3,17,0,-2,43,0,-3,46,0,1,8,0,1,8,0,1,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,-1,13,0,0,13,0,-1,25,0,-2,49,0,1,15,0,1,15,0,0,16,0,0,16,0,-1,55,0,-2,18,0,0,18,0,-2,56,0,-1,20,0,0,20,0,-1,24,0,-1,26,0,-1,28,0,-1,29,0,1,29,0,1,30,0,-1,32,0,1,32,0,-1,34,0,1,34,0,-1,36,0,1,36,0,-1,38,0,1,38,0,-1,40,0,1,40,0,-1,42,0,1,42,0,-1,44,0,-1,45,0,-1,47,0,-1,48,0,-1,50,0,-1,51,0,-1,52,0,-1,53,0,1,53,0,0,55,0,9,1,2,1,7,3,1,26,4,1,13,8,1,48,12,1,21,15,1,45,99],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,24,54,56,56,57],[-1,6,-1,3,2,3,2,3,2,3,22,-1,7,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,6,-1,-2,-3,7,-1,6,-1,-2,-3,-4,7,62,63,64,6,13,7,3,15,16],[19,79,411,8,412,8,224,2,224,2,413,225,225,61,226,227,228,229,230,231,232,233,234,235,19,41,20,30,31,20,236,17,21,32,33,34,21,414,415,416,237,238,61,8,35,22]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["9cPPKwOlBHgrv43p02o29N"]}],[1],0,[],[],[]],[[{"name":"CircleResultMoney_0_New","rect":{"x":0,"y":0,"width":757,"height":689},"offset":{"x":-5.5,"y":39.5},"originalSize":{"width":768,"height":768},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-378.5,-344.5,0,378.5,-344.5,0,-378.5,344.5,0,378.5,344.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,768,757,768,0,79,757,79],"nuv":[0,0.10286458333333333,0.9856770833333334,0.10286458333333333,0,1,0.9856770833333334,1],"minPos":{"x":-378.5,"y":-344.5,"z":0},"maxPos":{"x":378.5,"y":344.5,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[417]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[{"name":"008","rect":{"x":236,"y":412,"width":11,"height":20},"offset":{"x":55,"y":-0.5},"originalSize":{"width":129,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[18,".bin",1901423411,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.3889271020889282,-0.8699414730072021,-9.127731459557253e-7],"maxPosition",8,[1,1.3889269828796387,0.8699415326118469,-8.022333872759191e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["9fmr3SnHlFrIXMLa7yX48Y@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_10",[-2],[0,"bc9FAuNSJV3KeLNxSOUDkX",-1,0]],[27,"Plane018",1,[[30,-3,[1,"28HmVcjK9aNoJTymq+Aw5h"],[0],[7],1]],[0,"88idV+fgpScb8nDt7fcJol",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[418,130]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[239,239,4]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a1lreGTc9AeZTH9iNhMYrb"]}],[1],0,[],[],[]],[[[33,"Sight_Aim"],[193,"Sight_Aim",33554432,[-5,-6,-7,-8,-9],[[2,-2,[1,"b7sPG+SKBLcZ/ZbNX4xeCc"],[5,0,0]],[21,true,-3,[1,"ffW4jl9ntEzIa1joZcGgXG"],[5,6],7],[4,-4,[1,"2aI/6GLxJC7It0tIrLxFhw"]]],[0,"97CfmgVDND27mBF7ys+wq6",-1,0],[3,0,0,-1,6.123233995736766e-17],[1,1.7000000476837158,1.7000000476837158,1],[1,0,0,-180]],[37,"AimPos",33554432,1,[[2,-10,[1,"6fMxkh7eVFz6r/GGXl4oPM"],[5,80,80]],[35,-11,[1,"fdyWVdM+NCFLY9vwWTZTLz"],0],[4,-12,[1,"a5zyiDtT1EZaaJgJQ/iaX2"]]],[0,"95QLYC0E5Ji5+KaSX1yoUn",1,0]],[120,"Side_1",33554432,1,[[2,-13,[1,"e0QyPRPLFIkbf8yEoSQMvO"],[5,25,31]],[35,-14,[1,"47nQlY/OpJPaUtaE/kz3fo"],1],[15,0,-15,[1,"cabK/xUdtI65XYR2ifpJY2"]]],[0,"dbS1haPlBE2JhEdVC1RZrC",1,0],[1,-100,0,0],[1,2,2,1]],[121,"Side_2",33554432,1,[[2,-16,[1,"77JWEzHyBIFYkerw0AQVN1"],[5,25,31]],[35,-17,[1,"30YzfT8xBAFJnNjIu9AAVR"],2],[15,0,-18,[1,"a2qMFmFQFFTbYEvP9XdCOq"]]],[0,"73vuGFkaFBr5rQ+4Mkpelo",1,0],[1,100,0,0],[3,0,0,-1,6.123233995736766e-17],[1,2,2,1],[1,0,0,-180]],[121,"Side_3",33554432,1,[[2,-19,[1,"c56boNo2lAK6bWcgfoC1xr"],[5,25,31]],[35,-20,[1,"375vpIfr1Eq5WwifKKGmfL"],3],[15,0,-21,[1,"cfnLZGlwNMs4/T7Zs8/35t"]]],[0,"0fehE73zBMw5ykuaq4l4YC",1,0],[1,0,100,0],[3,0,0,-0.7071067811865475,0.7071067811865476],[1,2,2,1],[1,0,0,-90]],[121,"Side_4",33554432,1,[[2,-22,[1,"2dfBbR07hPw5VEL6lVEq4n"],[5,25,31]],[35,-23,[1,"a5i5DHhNNN7aebV+aVF10Y"],4],[15,0,-24,[1,"2dsRYuXLBPxJ5udLXvxYXi"]]],[0,"66zip5/k1NUq5y4177yEex",1,0],[1,0,-100,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,2,2,1],[1,0,0,90]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,9,1,24],[0,0,0,0,0,0,0,0],[2,2,2,2,2,-1,-2,7],[419,62,62,62,62,240,420,240]],[[{"name":"card_02","rect":{"x":2,"y":932,"width":90,"height":90},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[65,"Skin-0",4110094527,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone001","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Ponytail1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002(mirrored)","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Ponytail2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/bombs","bomb"],[[[7,8.346369781975227e-7,-0.0000016837332168506691,1,0,-0.6371026635169983,-0.7707789540290833,-7.660365781703149e-7,0,0.7707788944244385,-0.6371027231216431,-0.0000017160316474473802,0,-2.572899580001831,2.1622567176818848,0.000005735211743740365,1],[7,1.385374730489275e-7,-0.0000014078638059800141,1,0,-0.13783885538578033,-0.9904547333717346,-0.000001375329361508193,0,0.9904546737670898,-0.13783885538578033,-3.312734122573602e-7,0,-2.648031234741211,0.643621563911438,0.0000012980952988073113,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-1.8458255529403687,0.27233126759529114,0.0000018087812350131571,1],[7,-0.03908305987715721,-0.1388847827911377,-0.9895371198654175,0,-0.09562739729881287,-0.9852285981178284,0.14205698668956757,0,-0.9946496486663818,0.10017888247966766,0.025224559009075165,0,1.846681833267212,0.028989451006054878,-0.4728808104991913,1],[7,-4.910257089818515e-8,-0.00000140173403906374,1,0,-0.0014097236562520266,-0.9999990463256836,-0.0000014018020237926976,0,0.9999989867210388,-0.0014097237726673484,4.71264698376217e-8,0,-2.222944736480713,0.27585381269454956,2.780545287350833e-7,1],[7,-0.9988431334495544,0.005933187436312437,0.047720834612846375,0,-0.047534212470054626,0.028385808691382408,-0.9984661936759949,0,-0.007278683129698038,-0.9995792508125305,-0.02807094343006611,0,-2.069289445877075,3.1647191047668457,0.355812132358551,1],[7,-0.998702883720398,-0.048868048936128616,0.014300957322120667,0,-0.047204967588186264,0.9938957095146179,0.09971440583467484,0,-0.019086511805653572,0.09890998899936676,-0.9949132204055786,0,-1.3487454652786255,-0.5811927318572998,3.1556601524353027,1],[7,-0.9998090267181396,0.013322465121746063,0.014300959184765816,0,0.014683441258966923,0.9949077367782593,0.09971441328525543,0,-0.012899694964289665,0.0999053567647934,-0.9949132204055786,0,-0.6032463908195496,-0.4962078332901001,3.1556599140167236,1],[7,-0.9982388019561768,-0.04219146445393562,0.04170425981283188,0,-0.03603625297546387,0.9896820783615112,0.13867518305778503,0,-0.047124870121479034,0.13692809641361237,-0.9894593954086304,0,-0.17962394654750824,-0.648630678653717,3.1485726833343506,1],[7,-0.8578035235404968,-0.46584412455558777,0.2171689122915268,0,-0.3364048898220062,0.8283156156539917,0.44802325963974,0,-0.388593465089798,0.3112592399120331,-0.867244303226471,0,-0.6871116161346436,-1.9896899461746216,3.154067277908325,1],[7,-0.9655341506004333,-0.14346233010292053,0.21716894209384918,0,-0.0319819338619709,0.8934495449066162,0.44802325963974,0,-0.25830399990081787,0.4256362318992615,-0.867244303226471,0,-1.462277889251709,-1.584331750869751,3.154067277908325,1],[7,-0.9976156949996948,-0.04986044019460678,0.04771609231829643,0,-0.04900187999010086,0.024891037493944168,-0.9984884858131409,0,0.04859738051891327,-0.9984458088874817,-0.027274951338768005,0,-2.5715959072113037,3.036567449569702,0.29888391494750977,1],[7,-0.997748851776123,-0.048727020621299744,0.04607456550002098,0,-0.047334980219602585,0.02503673918545246,-0.9985652565956116,0,0.04750355705618858,-0.9984981417655945,-0.027286875993013382,0,-2.5678184032440186,3.039376735687256,0.463238924741745,1],[7,-0.997690737247467,-0.048336029052734375,0.04771609231829643,0,-0.048963792622089386,0.024965884163975716,-0.9984884858131409,0,0.047071702778339386,-0.9985188841819763,-0.027274951338768005,0,-2.7034740447998047,3.0407021045684814,0.29888391494750977,1],[7,-0.9978221654891968,-0.04720241203904152,0.04607456550002098,0,-0.0472966730594635,0.02510903775691986,-0.9985652565956116,0,0.04597780480980873,-0.9985696077346802,-0.027286875993013382,0,-2.691051483154297,3.043492078781128,0.4632389545440674,1],[7,-0.011793210171163082,-0.14379635453224182,-0.9895371198654175,0,0.09460873156785965,-0.985326886177063,0.14205701649188995,0,-0.995444655418396,-0.09194353967905045,0.025224560871720314,0,1.0150457620620728,0.22736231982707977,-0.4728808104991913,1],[7,7.549791547489804e-8,-0.12757471203804016,-0.9918290376663208,0,-6.123234924670329e-17,-0.9918291568756104,0.12757469713687897,0,-1.0000001192092896,-9.631622610584145e-9,-7.48810080608564e-8,0,0.3963058888912201,0.19958387315273285,-0.46015480160713196,1],[7,0.039083149284124374,0.1388874650001526,-0.989536702632904,0,-0.09562729299068451,-0.9852281808853149,-0.14205966889858246,0,-0.9946496486663818,0.10017886012792587,-0.025224387645721436,0,1.8466819524765015,0.028989391401410103,0.4728812277317047,1],[7,0.998843252658844,-0.0059332652017474174,0.04771809279918671,0,-0.04753147438168526,0.028385791927576065,0.9984663128852844,0,-0.007278683129698038,-0.9995792508125305,0.02807094343006611,0,-2.0692899227142334,3.1647191047668457,-0.355812132358551,1],[7,0.9987030029296875,0.048865318298339844,0.014301231130957603,0,-0.047202225774526596,0.9938958287239075,-0.09971436858177185,0,-0.019086511805653572,0.09890998899936676,0.9949132204055786,0,-1.3487461805343628,-0.5811927914619446,-3.1556601524353027,1],[7,0.9998089671134949,-0.013325192965567112,0.014301232062280178,0,0.014686182141304016,0.9949076771736145,-0.09971436858177185,0,-0.01289969403296709,0.0999053493142128,0.9949132204055786,0,-0.6032469868659973,-0.4962078034877777,-3.1556599140167236,1],[7,0.9982388615608215,0.04218873009085655,0.041704535484313965,0,-0.0360335111618042,0.9896821975708008,-0.13867506384849548,0,-0.04712476208806038,0.13692809641361237,0.9894593954086304,0,-0.17962494492530823,-0.6486307382583618,-3.1485726833343506,1],[7,0.8578044176101685,0.4658418595790863,0.2171701341867447,0,-0.3364025056362152,0.8283169269561768,-0.44802266359329224,0,-0.3885934352874756,0.3112592399120331,0.867244303226471,0,-0.6871118545532227,-1.9896900653839111,-3.154067277908325,1],[7,0.9655342102050781,0.14345991611480713,0.21717014908790588,0,-0.031979307532310486,0.8934499621391296,-0.44802266359329224,0,-0.2583039700984955,0.42563626170158386,0.867244303226471,0,-1.4622780084609985,-1.5843318700790405,-3.154067277908325,1],[7,0.9977489709854126,0.04872694984078407,0.04607182368636131,0,-0.047332242131233215,0.025036873295903206,0.9985653758049011,0,0.04750355705618858,-0.9984981417655945,0.027286875993013382,0,-2.5678188800811768,3.039376735687256,-0.4632389545440674,1],[7,0.9976158142089844,0.04986037313938141,0.04771335795521736,0,-0.04899914562702179,0.02489117532968521,0.9984886050224304,0,0.04859738051891327,-0.9984458088874817,0.027274951338768005,0,-2.571596622467041,3.036567449569702,-0.29888394474983215,1],[7,0.9976908564567566,0.048335961997509,0.04771335422992706,0,-0.048961054533720016,0.02496601641178131,0.9984886050224304,0,0.047071702778339386,-0.9985188841819763,0.027274951338768005,0,-2.703474521636963,3.0407021045684814,-0.29888394474983215,1],[7,0.9978222846984863,0.04720234125852585,0.04607182741165161,0,-0.04729393497109413,0.025109168142080307,0.9985653758049011,0,0.04597780480980873,-0.9985696077346802,0.027286875993013382,0,-2.691051959991455,3.043492078781128,-0.4632389545440674,1],[7,0.01179277803748846,0.14379902184009552,-0.989536702632904,0,0.09460876137018204,-0.9853264093399048,-0.14205971360206604,0,-0.995444655418396,-0.09194356203079224,-0.025224387645721436,0,1.0150457620620728,0.227362260222435,0.4728812575340271,1],[7,7.549791547489804e-8,0.12757742404937744,-0.9918286800384521,0,-6.123234924670329e-17,-0.9918287992477417,-0.12757740914821625,0,-1.0000001192092896,9.631827779799096e-9,-7.488098674457433e-8,0,0.39630579948425293,0.19958379864692688,0.4601553976535797,1],[7,5.703888064090279e-7,-0.0000015269857840394252,1,0,-0.41606396436691284,-0.9093353748321533,-0.000001151223955275782,0,0.9093353152275085,-0.41606399416923523,-0.0000011539985962372157,0,-3.1561551094055176,1.3933401107788086,0.000003778578047786141,1],[7,-1.0157013718981034e-7,0.2556689977645874,-1.9076018986652343e-7,0,-0.4326847791671753,-6.741586844327685e-8,-0.610785961151123,0,-0.33377036452293396,9.591876626302565e-9,0.7917952537536621,0,1.1667860746383667,0.0007380592287518084,-2.981820821762085,1],[7,0.6966428160667419,-0.711810290813446,0.08952640742063522,0,0.47101956605911255,0.35967743396759033,-0.8054643273353577,0,0.5411370992660522,0.6032896041870117,0.5858432650566101,0,-2.8220622539520264,-1.9606670141220093,-2.6928889751434326,1],[7,-0.05325642600655556,0.3958279490470886,0.0016114574391394854,0,0.009861825965344906,0.001822151243686676,-0.3963702917098999,0,-0.9985319972038269,-0.021093375980854034,-0.004000628367066383,0,3.7142019271850586,-0.25968652963638306,-0.19569556415081024,1],[7,-0.696644127368927,0.7118087410926819,0.08952812105417252,0,0.47101762890815735,0.35967496037483215,0.8054665327072144,0,0.5411370992660522,0.6032928824424744,-0.5858399271965027,0,-2.8220620155334473,-1.9606821537017822,2.692878246307373,1],[7,0.05325637757778168,0.3958279490470886,-0.001612069201655686,0,0.009861763566732407,-0.0018227630062028766,-0.39637014269828796,0,-0.9985319972038269,0.021093351766467094,-0.004000634420663118,0,3.714223623275757,0.25984689593315125,-0.1956966370344162,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-0.7350789904594421,-3.759439468383789,7.85610776432577e-9,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-1.3247045278549194,1.4805198907852173,0.0022638398222625256,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,"Material #1",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[421,4]],[[[19],[47,"monster_SP_002",[-3,-4,-5],[[63,-2,[1,"4ap5P4hG1c26UdxGvSSDd+"],[3,4,5,6,7,8,9,10,11,12],13]],[0,"59tQDWm5NThJY4uxGZjPCQ",-1,0]],[81,"Bip001 Head",[[6,"Bip001 Ponytail2",-6,[0,"12sdvLLMJTxYG2EwNpJ7tk",1,0],[1,0.7986867427825928,-0.2681947648525238,-0.8114317059516907],[3,0.6679535411346154,-0.09525775771362249,-0.5855556045541894,0.4493202203955194],[1,139.78949385021687,66.97263481637215,-40.802940997620404]],[6,"Bip001 Ponytail1",-7,[0,"f3ZgxomllSg5nucuIfh6+1",1,0],[1,0.7986869812011719,-0.26819923520088196,0.8114302754402161],[3,0.6679534909838712,-0.09526104476789818,0.5855550764000657,-0.4493202863596315],[1,-139.78964106477392,-66.97252542981963,-40.80324257524031]],[12,"Bone001",-8,[0,"bd72GSvERT1YwELdncbCdn",1,0],[1,0.23102664947509766,-0.0127943754196167,-0.0028874806594103575],[3,0.43989485980999016,0.5536178410701154,0.5536182583026333,0.43989387633334065],[1,1.8299598693847656,3.9113073348999023,1.0000005960464478],[1,-90.00033652202865,-179.99963082271884,76.93997112083406]],[12,"Bone002(mirrored)",-9,[0,"cdgTl8WTJbs4WygQV48uzx",1,0],[1,0.3994925022125244,0.3463113307952881,0.8539996147155762],[3,0.12832687697897768,0.6939008779384127,0.6888784117937714,0.16577188544989618],[1,1.000000238418579,2.5227439403533936,2.5227441787719727],[1,-88.8738064742762,176.6584475315498,23.984256756865868]],[12,"Bone002",-10,[0,"16ksAsJIdQx4AXYBG/hMR1",1,0],[1,0.3994920253753662,0.34631407260894775,-0.8544054627418518],[3,0.1657724125688811,0.6888773620913348,0.6939019145676067,0.1283262256461492],[1,1.0000003576278687,2.52274489402771,2.5227463245391846],[1,-91.12639577623668,-176.65830711763275,23.98424047417892]]],[0,"374sBTN1lWIKYSGdE9bbBc",1,0],[1,0.11547517776489258,0,1.6940658945086007e-21],[3,-1.0225193786709588e-8,0.0000012562494183241022,-0.46136273859426497,0.8872116001468994],[1,0.00011383849141122828,0.00022145384200751981,-54.950155093051485]],[76,"Bip001 Pelvis",[-11,-12,-13],[0,"d17C9Gn7FeLL7ANXJ8qgrT",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[-14,-15,2],[0,"015lngHIpSM6Q4wKmjgRbU",1,0],[1,0.6768262386322021,0.15322548151016235,1.9995559341623448e-7],[3,5.050049470440369e-14,-7.564381234415511e-7,0.2727278511709916,0.9620912218678025],[1,0.000027771804358597268,-0.00009796947135100628,31.653309160279544]],[20,"Bip001 L Hand",[-16,-17,-18],[0,"12pQJpm+RY8qw0DY+IM9fh",1,0],[1,0.6830113530158997,1.3877787807814457e-17,2.384185791015625e-7],[3,-0.552500255182949,-0.02206761418838907,-0.16797228377256115,0.816113840288865],[1,-69.88164065354198,-13.2313836171131,-14.464747726386458]],[20,"Bip001 R Hand",[-19,-20,-21],[0,"4f2O2H3SFaS5xrb0KjeHi2",1,0],[1,0.6830112934112549,2.220446049250313e-16,0],[3,0.6183826932197208,0.046974413163956424,-0.09253887845373841,0.7789947401675772],[1,77.35608128118281,10.855547819383672,-4.938032514349887]],[62,"Bip001",1,[[[6,"Bip001 Footsteps",-22,[0,"850nqi29pS7rR+NxaoyhrD",1,0],[1,0.03314083069562912,4.3461082555040775e-7,-1.4983811378479004],[3,-0.007818265827490229,-0.007818481894327801,0.707063079733205,0.7070640334075226],[1,0,-1.267029176424895,90]],3],4,1],[0,"b0PCLUUHVUtqiPA26dKKZt",1,0],[1,0,1.5017086267471313,-6.952732611864576e-9],[3,-0.494441432515029,-0.49444059804998075,-0.5054975877648116,0.5054981242066283],[1,-90.00001620990938,-89.99992162726208,-1.2670464318490349]],[43,"Bip001 Spine1",[[4,[12,"bombs",-23,[0,"bfJzSLrt9UTrB1dCrg4t8a",1,0],[1,-1.48138427734375,-1.4991543292999268,0.041518598794937134],[3,0.6932198902203283,-0.13945241073075737,0.6932186981274497,0.13945266405049406],[1,0.7692750692367554,0.7692751288414001,0.7692750692367554],[1,157.25162799602003,-89.99990125555246,0.000001073236163722799]]],1,4],[0,"2a8FwheGxeq56QJu6A84SE",1,0],[1,0.4881800413131714,-0.0004372447729110718,-1.2126974979764782e-9],[3,-4.1198950258008025e-15,-3.1639780515280245e-7,0.11407476025703019,0.9934721682423725],[1,0.00000424647222132246,-0.00003698234760869216,13.100523051673761]],[60,"monster_SP_002",1,[[64,-24,[1,"dcYjbAmp1dj73C6thCXx7r"],[0],[7],1,1,2]],[0,"f7CXW36/VUQZ0kzegp2+PN",1,0],[1,0,0,0.27233123779296875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Spine",3,[8],[0,"c8cQ0XCW5TFKG0PTUGnk/4",1,0],[1,0.3775414228439331,-0.0003868862986564636,5.241087137619616e-7],[3,-0.0000021086065688398778,-6.994742242356259e-7,0.04657720283039849,0.9989146931402902],[1,-0.00023866848317810805,-0.0000691123395994971,5.339286015271913]],[3,"Bip001 L Clavicle",4,[-25],[0,"fflB3wGuhXnZ4KkajBgQsL",1,0],[1,-0.2363729476928711,-0.02701544761657715,0.3379834294319153],[3,0.654324899971696,-0.2260737605415564,0.7034297105423941,0.16104726758896856],[1,147.98899472859662,-95.28250951740053,-3.9726634853712968]],[3,"Bip001 L UpperArm",11,[-26],[0,"c4j7/ohCpXObsIGyVn+BoG",1,0],[1,0.30420196056365967,1.1102230246251565e-16,2.384185791015625e-7],[3,0.006887236169055859,0.4450461880407883,0.07775532482095278,0.8920989664551254],[1,-3.2979344195755598,53.26715983746942,8.329239717374646]],[3,"Bip001 L Forearm",12,[5],[0,"a4AKh2PINe6JvekKxrr8cm",1,0],[1,0.7790260314941406,0,2.384185791015625e-7],[3,9.616237513452544e-18,-5.992386769124505e-17,-0.37212910664211035,0.9281809780370125],[1,-2.119558606492523e-15,-8.247873047902274e-15,-43.69396972697518]],[5,"Bip001 L Finger0",5,[[6,"Bip001 L Finger01",-27,[0,"f7Oas1rCBQEKyltLLs4WCX",1,0],[1,0.14324843883514404,-5.960464477539063e-8,-1.1920928955078125e-7],[3,-1.3488532315842122e-8,-1.6191007941940224e-8,0.09067996012175883,0.9958800855686973],[1,-0.0000013939856737394116,-0.0000017360988556967038,10.405451788499462]]],[0,"56TVd5oPpd1ZDBAG1iE34t",1,0],[1,0.10676467418670654,0.06541752815246582,-0.16025078296661377],[3,0.6160864882031531,0.2728873812349566,0.021978775224875815,0.7385708155998636],[1,75.04307236079569,23.860536567982205,21.636095223568823]],[5,"Bip001 L Finger1",5,[[6,"Bip001 L Finger11",-28,[0,"ebQIobQNta5b4hFg3huwJ6",1,0],[1,0.13652074337005615,0,1.1102230246251565e-16],[3,1.8187247211608923e-8,-1.4985072695251778e-8,0.22049446340744977,0.9753882260959787],[1,0.0000026711691725385087,-0.0000023643312415909614,25.476153719796113]]],[0,"839kt8IBJawqEXy/jbRP1z",1,0],[1,0.328582763671875,-0.010582208633422852,-0.05439960956573486],[3,0.06736534832845753,-0.019247459244673065,0.1467918455369253,0.9866831301086857],[1,8.318589205001075,-3.456906908282819,16.68327132093423]],[5,"Bip001 L Finger2",5,[[6,"Bip001 L Finger21",-29,[0,"aaQyC/CHpdgba6WCRnlxl6",1,0],[1,0.12787997722625732,4.440892098500626e-16,-5.960464477539063e-8],[3,4.3803792085477774e-8,1.3354692183648446e-9,0.284363695274309,0.9587164798885737],[1,0.00000568883192019403,-0.0000015277340043504454,33.041634712504376]]],[0,"43pBTSvAhfQY5hP0wkNF7w",1,0],[1,0.3275125026702881,-0.010309934616088867,0.11389482021331787],[3,-0.034115370501866256,0.004978365750759077,0.2571161995863449,0.9657653013440932],[1,-4.522511181730773,1.7927101449206537,29.754727032161174]],[3,"Bip001 R Clavicle",4,[-30],[0,"beKxA477ZbIZwMA46Eqc6t",1,0],[1,-0.23637306690216064,-0.027013540267944336,-0.33798307180404663],[3,-0.6698866360457585,0.17435295551658805,0.6901329625880352,0.21111474533861851],[1,-148.3737526215052,90.76705871599373,3.3136036192481955]],[3,"Bip001 R UpperArm",17,[-31],[0,"5eymD39H9Q6qwlKoxGJfl6",1,0],[1,0.3042020797729492,5.960464477539063e-8,4.440892098500626e-16],[3,0.14084686039113256,-0.406413159064692,0.012120736504895084,0.902686874726556],[1,15.38318059973498,-47.758935102685754,-5.313291605399097]],[3,"Bip001 R Forearm",18,[6],[0,"79ox3UAlVSrJfuY8DtC94R",1,0],[1,0.7790259718894958,2.9802322387695312e-8,0],[3,-2.4708344673214953e-17,4.736067569697813e-17,-0.5007380815567494,0.8655988526325957],[1,5.35068532825555e-16,6.5793327220305815e-15,-60.09768621667314]],[5,"Bip001 R Finger0",6,[[6,"Bip001 R Finger01",-32,[0,"6adxbmvoNe+a9VMBZvsGLZ",1,0],[1,0.1432485580444336,5.960464477539063e-8,4.440892098500626e-16],[3,-1.3512371441764614e-9,1.4839770542902324e-8,0.09067998228970582,0.9958800835501925],[1,-3.135616259001312e-7,0.000001736098786735047,10.405454339267992]]],[0,"afOpcedFdT95d0aYW+c+6n",1,0],[1,0.10676467418670654,0.06541728973388672,0.16025081276893616],[3,-0.6160864618635129,-0.27288736956816045,0.021978716543216217,0.7385708436282749],[1,-75.04306863628443,-23.860540153862516,21.63608818443988]],[5,"Bip001 R Finger1",6,[[6,"Bip001 R Finger11",-33,[0,"acDD1g7GxemKjIOZ7zM4rq",1,0],[1,0.13652092218399048,2.384185791015625e-7,5.960464477539063e-8],[3,-2.180162533136675e-8,-4.9284349793111235e-9,0.22049446340744983,0.975388226095979],[1,-0.0000025613208930940607,2.8807729091226997e-14,25.476153719796176]]],[0,"64RH/gWc5U65k9h0YzEruK",1,0],[1,0.328582763671875,-0.010582208633422852,0.05439960956573486],[3,-0.06736535618728531,0.01924745936131642,0.14679180172302866,0.9866831360881779],[1,-8.318589868437373,3.456906628327083,16.683266235369477]],[5,"Bip001 R Finger2",6,[[6,"Bip001 R Finger21",-34,[0,"9fx+fxXzVRlKnm/OkCj6go",1,0],[1,0.12787997722625732,2.384185791015625e-7,1.1102230246251565e-16],[3,2.0974938527796693e-8,-2.4864300139765154e-8,0.28436367902464327,0.9587164847083669],[1,0.0000037154220718946126,-0.000004073957284453685,33.04163277024656]]],[0,"861bjcAaVa/rirnIff22bO",1,0],[1,0.32751238346099854,-0.010310173034667969,-0.11389470100402832],[3,0.034115341004975874,-0.0049783108472973995,0.25711617208596443,0.9657653099905187],[1,4.5225054284876665,-1.7927019702042712,29.75472408660068]],[3,"Bip001 L Thigh",3,[-35],[0,"a2QCDaDvRVEJe+Jhz+aPlF",1,0],[1,-5.960464477539062e-7,6.109476089477539e-7,0.3917329013347626],[3,0.35633790809727306,0.9102712354503314,0.13713781657514587,-0.16007121049579176],[1,-27.178177637153045,-150.7472390116894,37.21622581855343]],[5,"Bip001 L Calf",23,[[6,"Bip001 L Foot",-36,[0,"da/XijZ49SCJ9II/qm++D2",1,0],[1,0.6499094367027283,1.043081283569336e-7,5.960464477539063e-8],[3,0.07739398699927229,-0.0826721422556368,0.2867829230082866,0.9512786357014664],[1,13.299329494012166,-13.78785800947578,32.1964795523681]]],[0,"a0GGMRx4BY8pvNMY+j/RQl",1,0],[1,0.8068881034851074,1.1920928955078125e-7,1.1102230246251565e-16],[3,3.442959667299415e-17,4.354412125423695e-17,-0.6202284749880517,0.7844212126236743],[1,2.6837490328542704e-14,2.7581054785046265e-14,-76.66564169523824]],[3,"Bip001 R Thigh",3,[-37],[0,"62Z8nE9a5YUoQEFS94Mto7",1,0],[1,5.960464477539062e-7,-4.731118679046631e-7,-0.3917329013347626],[3,0.24622989098597692,0.9490084205377607,-0.14516769584061975,0.1329669079800827],[1,22.17673256873416,158.99295780265484,25.38784466162673]],[5,"Bip001 R Calf",25,[[6,"Bip001 R Foot",-38,[0,"b7mv37dildzJc8oTVqia29",1,0],[1,0.649909496307373,-7.450580596923828e-8,-1.1102230246251565e-16],[3,-0.04462143854226515,0.08363024286728585,0.4145832131846375,0.9050611410539506],[1,-12.960606054858824,16.346956617926427,47.98613736418858]]],[0,"6dxZuy+8Rc3qzIa4I5XsSF",1,0],[1,0.8068881034851074,-1.1102230246251565e-16,1.1102230246251565e-16],[3,-1.0715455424778844e-17,8.818841161642614e-18,-0.6354645359152559,0.7721300561395137],[1,-1.590276892933272e-15,2.4577743382024453e-22,-78.90889349596776]],[5,"bomb",1,[[10,"spark01",-39,[0,"03aKjMyetWL55RxASKdMha",1,0],[1,0.48831772804260254,-0.4315357208251953,1.3351060152053833]]],[0,"48hILSc5xfrrWPxKTEyLep",1,0],[1,1.324704647064209,-0.0022638398222625256,1.7528510093688965],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,-1,9,0,-2,7,0,-3,27,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,-1,10,0,-2,23,0,-3,25,0,-1,11,0,-2,17,0,-1,14,0,-2,15,0,-3,16,0,-1,20,0,-2,21,0,-3,22,0,1,7,0,1,8,0,0,9,0,-1,12,0,-1,13,0,1,14,0,1,15,0,1,16,0,-1,18,0,-1,19,0,1,20,0,1,21,0,1,22,0,-1,24,0,1,24,0,-1,26,0,1,26,0,1,27,0,9,1,2,1,4,3,1,7,4,1,8,5,1,13,6,1,19,8,1,10,39],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,7],[422,241,242,63,243,244,245,246,247,248,249,250,251,63]],[[{"base":"2,2,0,0,0,0","mipmaps":["76OuKgg0lH+K+eYz7cWz/M"]}],[1],0,[],[],[]],[[[18,".bin",1327505616,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":231624,"length":45564,"count":11391,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":231624,"count":3217,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]]},"minPosition",8,[1,-2.749316930770874,-2.097343921661377,-0.002042233943939209],"maxPosition",8,[1,2.749316930770874,5.906177520751953,5.135339260101318]]],-1],0,0,[],[],[]],[[[33,"NormalBullet"],[47,"NormalBullet",[-6],[[265,-3,[1,"033XKwl7dKWraZG3DYiRVA"],-2,3],[127,true,-4,[1,"ff+Iu5hZ1JoIqPIXashoqL"],[1,30,30,50],4],[66,4,4,-5,[1,"41FGrstRBO0obUXYJS68zF"]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[194,"Bullet",[[74,1,0,-7,[1,"876vSu1pZBuq0TwxJEXApN"],[0,1],[7],2]],[0,"6fY2bUqDRBLa/GI3LjAOcI",1,0],[1,-3.142227456010005e-7,-0.003170421114191413,0.00008141460421029478],[3,-0.7071067215818994,0,0,0.7071068407911907],[1,-89.9999903406537,0,0]],[78,"Root",1,[2],[0,"f8hhOwNjhIxqVHtAlDVp+e",1,0],[1,50,50,50]]],0,[0,4,1,0,29,2,0,0,1,0,0,1,0,0,1,0,-1,3,0,0,2,0,9,1,2,1,3,7],[0,0,0,0,0],[-1,-2,6,30,16],[252,252,253,423,22]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["a4p7jiTvJEhI0JwTlStgGL"]}],[1],0,[],[],[]],[[{"name":"S_coin0007","rect":{"x":156,"y":2,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[31,"Female_Hurt_02",".mp3",0.391837],-1],0,0,[],[],[]],[[[19],[32,"island_wood_M",[-2],[0,"a5FVUWV8FaVay/Robi/96d",-1,0]],[44,"island_wood_M",1,[[30,-3,[1,"12BXN7weRf2YfezdOL9A61"],[0],[7],1]],[0,"a6/yEum4hdjIWie7iQDSiZ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[424,79]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[425,4]],[[[18,".bin",1058067198,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24160,"length":10704,"count":2676,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24160,"count":755,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-4.474607467651367,-3.226346969604492,-2.270460605621338],"maxPosition",8,[1,4.554582118988037,3.518524169921875,0.4191017150878906]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[[156,"monster_M_001_heart",".plist"],-1],0,0,[],[],[]],[[[33,"MissText"],[45,"MissText",33554432,[-4],[[2,-2,[1,"49aFXk3rVCFbgVNeswkaBY"],[5,0,0]],[4,-3,[1,"7fkfpEfGdPBoTjaygCmaz+"]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[17,"Text",33554432,1,[[8,-5,[1,"d0Y4WQweRDOZT8IGLCqI9l"],[5,131.2,68.4],[0,0.5,0.3]],[254,"子彈未命中！\n已退幣！",18,18,20,false,-2.6,-6,[1,"eaNWCg/axN5pncZpvJthNo"],[4,4290177535]],[155,10,-7,[1,"99ym2Zz3BFSq5UR/XM/uBR"],[4,3023188653],[0,0,0]],[255,1.6,-8,[1,"2cvJYLaQ1LgLAhGvLuUf5G"],[4,4279769244]]],[0,"9ewM+nzaZBgLGyLB9uF36h",1,0],[1,0,-40,0]]],0,[0,4,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,0,2,0,9,1,8],[],[],[]],[[{"name":"Glay_Rock03","rect":{"x":131,"y":820,"width":24,"height":29},"offset":{"x":0,"y":-0.5},"originalSize":{"width":32,"height":32},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[65,"Skin-0",3039907908,["Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Root/Bip001/Bip001 Pelvis/Bip001 Spine","Root/Bip001/Bip001 Pelvis","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 Xtra02Opp","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 Xtra02","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Root/Bip001/Bip001 Xtra05","Root/Bip001/Bip001 Xtra05/Bip001 Xtra0502","Root/Bip001/Bip001 Xtra05Opp","Root/Bip001/Bip001 Xtra05Opp/Bip001 Xtra05Opp02","Root/Bip001/Bip001 Xtra04/Bip001 Xtra0402","Root/Bip001/Bip001 Xtra04Opp/Bip001 Xtra04Opp02","Root/Bip001/Bip001 Xtra04","Root/Bip001/Bip001 Xtra04Opp","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01/Bip001 Xtra0102","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104/Bip001 Xtra0105","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104/Bip001 Xtra0105/Bip001 Xtra0106","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 Xtra02Opp_01","Root/Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 Xtra03"],[[[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-2.115736484527588,0.16857695579528809,2.3037023311189841e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.756276249885559,0.16824302077293396,2.2944404065583512e-7,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-1.4168157577514648,0.16655828058719635,0.000001496662321187614,1],[7,0.9951538443565369,-0.0000013752051017945632,0.09833045303821564,0,0.0000013685614703717874,1,1.350137353028913e-7,0,-0.09833046048879623,2.118270697737401e-10,0.9951537847518921,0,-0.07568252831697464,-0.2039365917444229,-2.4565982818603516,1],[7,-0.9929561018943787,-0.014295883476734161,0.1176171749830246,0,-0.11073657870292664,-0.24107012152671814,-0.964169442653656,0,0.04213763773441315,-0.9704024195671082,0.23778899013996124,0,-0.9170023798942566,2.46608304977417,-0.2315811663866043,1],[7,-0.9535189270973206,-0.04727915674448013,0.29760104417800903,0,-0.03019139915704727,0.9976344108581543,0.06175800412893295,0,-0.29981693625450134,0.049902431666851044,-0.9526907205581665,0,0.13809797167778015,-0.35283732414245605,2.465045690536499,1],[7,-0.9951538443565369,-0.000001366608785247081,0.09833045303821564,0,-0.0000013599651538243052,1,1.3459005288041226e-7,0,-0.09833046048879623,2.1182719467383038e-10,-0.9951537847518921,0,-0.07568208873271942,-0.20393657684326172,2.4565982818603516,1],[7,2.417371263163659e-7,-0.0000014132473324934836,1,0,-0.08715439587831497,-0.9961948394775391,-0.0000013868012729290058,0,0.9961947798728943,-0.08715440332889557,-3.639880219452607e-7,0,-2.856034755706787,0.4710826575756073,-0.00005919882096350193,1],[7,-0.9495661854743958,-0.0987820029258728,0.29760101437568665,0,-0.08410529047250748,0.9945412874221802,0.061757996678352356,0,-0.3020770847797394,0.03361348435282707,-0.9526907205581665,0,-0.48614269495010376,-0.3796866238117218,2.465045690536499,1],[7,-0.9472352862358093,0.2770794630050659,0.16115927696228027,0,-0.15254497528076172,0.05251966416835785,-0.9869000911712646,0,-0.28191378712654114,-0.959410548210144,-0.007481400389224291,0,-1.0401796102523804,2.444601058959961,0.43296748399734497,1],[7,0.9929563999176025,0.014295891858637333,0.11761460453271866,0,-0.11073385179042816,-0.24107544124126434,0.9641684293746948,0,0.04213763773441315,-0.9704011082649231,-0.23779438436031342,0,-0.9170026779174805,2.4660818576812744,0.23159481585025787,1],[7,0.9535189867019653,0.04727642238140106,0.29760122299194336,0,-0.030188782140612602,0.9976345896720886,-0.06175718456506729,0,-0.29981690645217896,0.049902431666851044,0.9526907205581665,0,0.13809752464294434,-0.35283735394477844,-2.465045690536499,1],[7,0.9495664238929749,0.09877927601337433,0.2976011633872986,0,-0.08410268276929855,0.994541585445404,-0.06175718083977699,0,-0.3020770847797394,0.03361348807811737,0.9526907205581665,0,-0.4861430823802948,-0.3796866536140442,-2.465045690536499,1],[7,0.9472357630729675,-0.27707961201667786,0.1611565798521042,0,-0.152542382478714,0.05251890420913696,0.9869005680084229,0,-0.28191378712654114,-0.959410548210144,0.007481400854885578,0,-1.0401800870895386,2.444601058959961,-0.4329676032066345,1],[7,0.1065194308757782,0.06348724663257599,-0.9922817349433899,0,0.007199485320597887,-0.9979825019836426,-0.06307914853096008,0,-0.9942846298217773,-0.000424762605689466,-0.10676161199808121,0,1.3744471073150635,0.14711309969425201,0.46984824538230896,1],[7,0.3317973017692566,0.48671865463256836,0.8080938458442688,0,0.2560056746006012,0.7780166864395142,-0.5737170577049255,0,-0.9079492092132568,0.39723435044288635,0.133541077375412,0,1.0265328884124756,-1.2246910333633423,-0.21820469200611115,1],[7,0.27715253829956055,0.5044643878936768,0.8177421689033508,0,0.22557228803634644,0.7931334972381592,-0.5657352805137634,0,-0.9339719414710999,0.34125491976737976,0.10602579265832901,0,0.9099634289741516,-1.1713212728500366,-0.1929551213979721,1],[7,-0.3317979872226715,-0.4867252707481384,0.808089554309845,0,0.25600478053092957,0.7780121564865112,0.5737236142158508,0,-0.9079492092132568,0.39723512530326843,-0.1335388720035553,0,1.0265330076217651,-1.2246919870376587,0.2181975394487381,1],[7,-0.2771531641483307,-0.5044711232185364,0.8177377581596375,0,0.22557154297828674,0.7931289672851562,0.5657418966293335,0,-0.9339719414710999,0.3412555456161499,-0.1060238853096962,0,0.9099635481834412,-1.171322226524353,0.19294819235801697,1],[7,0.1362048238515854,-0.39103636145591736,0.9102411270141602,0,-0.23770453035831451,0.8790634870529175,0.41321176290512085,0,-0.9617404341697693,-0.272649884223938,0.02678157575428486,0,1.0442978143692017,0.8296504020690918,-0.3093923032283783,1],[7,-0.13620448112487793,0.3910287916660309,0.9102444052696228,0,-0.23770496249198914,0.8790668249130249,-0.4132043719291687,0,-0.9617404937744141,-0.272649884223938,-0.02678336389362812,0,1.044297695159912,0.8296486139297485,0.3093968629837036,1],[7,0.24411316215991974,-0.3344692587852478,0.9102413058280945,0,-0.48325294256210327,0.7718309164047241,0.41321149468421936,0,-0.840758740901947,-0.5407471656799316,0.026780836284160614,0,1.0301913022994995,1.0973461866378784,-0.3093915581703186,1],[7,-0.24411213397979736,0.3344619572162628,0.9102442264556885,0,-0.4832536578178406,0.771834135055542,-0.41320469975471497,0,-0.840758740901947,-0.5407471656799316,-0.026784103363752365,0,1.0301913022994995,1.0973443984985352,0.3093976080417633,1],[7,-0.10651962459087372,-0.06348451226949692,-0.9922819137573242,0,0.007199192885309458,-0.9979827404022217,0.0630764290690422,0,-0.9942845702171326,-0.00042475148802623153,0.10676178336143494,0,1.3744471073150635,0.1471131145954132,-0.46984806656837463,1],[7,3.5698425904229225e-7,-0.0000014499886447083554,1,0,-0.26040005683898926,-0.9655008316040039,-0.0000013070065278952825,0,0.9655007719993591,-0.26040008664131165,-7.222457725220011e-7,0,-2.5384862422943115,0.9643443822860718,-0.00005818239151267335,1],[7,8.174350085710103e-8,-0.000001394356218042958,1,0,0.029396185651421547,-0.9995678663253784,-0.0000013961566764919553,0,0.9995678067207336,0.029396187514066696,-4.071942782957194e-8,0,-4.1469855308532715,-0.15852811932563782,-0.000060742615460185334,1],[7,-6.952977287255635e-7,-0.0000015796333627804415,1,0,0.5777202844619751,-0.8162348866462708,-8.876641004462726e-7,0,0.8162348866462708,0.5777203440666199,0.0000014801123597862897,0,-3.6049089431762695,-2.5856173038482666,-0.00006747439329046756,1],[7,-0.0000013137179166733404,-0.000002345650500501506,1,0,0.9744996428489685,-0.22438934445381165,7.538785666838521e-7,0,0.22438935935497284,0.9744995832443237,0.0000025806198209465947,0,-1.295231819152832,-4.620700836181641,-0.00007311889930861071,1],[7,-0.0000013183349665268906,-0.0000031871095416136086,1,0,0.9239407777786255,0.3825358748435974,0.000002437246848785435,0,-0.3825359046459198,0.9239407181739807,0.000002440389607727411,0,1.2648797035217285,-4.77164363861084,-0.00007353755790973082,1],[7,-8.107481335173361e-7,-0.000003892386757797794,1,0,0.512842059135437,0.8584828972816467,0.0000037573338431684533,0,-0.858482837677002,0.5128421187400818,0.0000013001665593037615,0,3.576382875442505,-3.2859997749328613,-0.00006941697211004794,1],[7,-4.6656904828523693e-7,-0.0000040741037992120255,1,0,0.2530771791934967,0.9674460887908936,0.000004059554157720413,0,-0.9674460291862488,0.2530771791934967,5.796824211756757e-7,0,3.7940118312835693,-2.319444417953491,-0.00006673613825114444,1],[7,0.8793467879295349,-0.4481614828109741,0.1609358936548233,0,-0.140293687582016,0.07914014160633087,0.9869420528411865,0,-0.4550458788871765,-0.8904425501823425,0.006717402953654528,0,-0.912339448928833,2.6604409217834473,-0.4310208261013031,1],[7,0.23950310051441193,-0.9574642777442932,0.1609359085559845,0,-0.032450128346681595,0.15777349472045898,0.9869420528411865,0,-0.9703530073165894,-0.24159808456897736,0.00671740248799324,0,1.2700923681259155,2.592625856399536,-0.4310208559036255,1],[7,0.5585618019104004,0.3518810272216797,0.7511247396469116,0,-0.5407488346099854,0.8411454558372498,0.008065950125455856,0,-0.6289669275283813,-0.41067519783973694,0.6601108908653259,0,0.12318141013383865,0.2065250426530838,-2.6670663356781006,1],[7,0.5375734567642212,0.3831792175769806,0.7511247396469116,0,-0.5878634452819824,0.8089199662208557,0.008065886795520782,0,-0.604509174823761,-0.44589483737945557,0.6601108908653259,0,-0.06321343034505844,0.20324912667274475,-2.6670663356781006,1],[7,-0.8793464303016663,0.4481612741947174,0.1609385907649994,0,-0.1402961015701294,0.07914136350154877,-0.9869416356086731,0,-0.4550459086894989,-0.8904425501823425,-0.00671740248799324,0,-0.9123390316963196,2.6604409217834473,0.43102070689201355,1],[7,-0.23950304090976715,0.957463800907135,0.160938560962677,0,-0.03245077654719353,0.15777605772018433,-0.9869416356086731,0,-0.9703530073165894,-0.24159811437129974,-0.006717402953654528,0,1.270092487335205,2.592625141143799,0.4310206174850464,1],[7,-0.558560311794281,-0.3518833518028259,0.7511247396469116,0,-0.5407503843307495,0.8411444425582886,-0.008063883520662785,0,-0.6289669275283813,-0.41067519783973694,-0.6601108908653259,0,0.12318167090415955,0.20652522146701813,2.6670658588409424,1],[7,-0.5375718474388123,-0.3831814229488373,0.7511247396469116,0,-0.5878649353981018,0.8089188933372498,-0.00806382391601801,0,-0.604509174823761,-0.44589483737945557,-0.6601108908653259,0,-0.06321313977241516,0.20324935019016266,2.6670658588409424,1],[7,0.09575462341308594,0.07879128307104111,-0.9922817349433899,0,0.1572730839252472,-0.98553866147995,-0.06307907402515411,0,-0.9829018712043762,-0.150019109249115,-0.1067616268992424,0,0.6454609036445618,0.24704091250896454,0.46984827518463135,1],[7,4.371138828673793e-8,0.0889846682548523,-0.9960330128669739,0,-6.123234262925839e-17,-0.9960330128669739,-0.0889846682548523,0,-1,3.889643274135324e-9,-4.3537987437503034e-8,0,0.2681613862514496,0.20499953627586365,0.4491536617279053,1],[7,0.0889846682548523,4.3537987437503034e-8,-0.9960330128669739,0,-0.9960330128669739,-3.9821749453494704e-8,-0.0889846682548523,0,-4.353799099021671e-8,1,3.9821749453494704e-8,0,-0.12112651020288467,-0.004579146392643452,0.4491536617279053,1],[7,-0.0957552120089531,-0.0787886306643486,-0.9922819137573242,0,0.1572728157043457,-0.9855388402938843,0.06307638436555862,0,-0.9829018712043762,-0.1500190943479538,0.10676179826259613,0,0.6454609036445618,0.24704088270664215,-0.46984806656837463,1],[7,4.371138828673793e-8,-0.08898194134235382,-0.9960333108901978,0,-6.123234262925839e-17,-0.9960333108901978,0.08898194134235382,0,-1,-3.889524258227084e-9,-4.353799809564407e-8,0,0.26816144585609436,0.20499955117702484,-0.4491533935070038,1],[7,-0.08898194134235382,-4.353799809564407e-8,-0.9960333108901978,0,-0.9960333108901978,-3.9821863140332425e-8,0.08898194134235382,0,-4.353799809564407e-8,1,-3.982187024575978e-8,0,-0.12112647294998169,-0.004579146392643452,-0.4491533935070038,1],[7,-0.9929559230804443,-0.014295305125415325,0.11761713773012161,0,-0.11073670536279678,-0.2410697191953659,-0.9641693234443665,0,0.0421370305120945,-0.9704023599624634,0.2377886325120926,0,-0.9170007109642029,2.466083288192749,-0.23158037662506104,1],[7,0.003956352826207876,0.9999524354934692,0.008908336982131004,0,-0.9999825954437256,0.003917049150913954,0.004425101913511753,0,-0.004389997571706772,0.008925688453018665,-0.9999504685401917,0,0.05646475404500961,1.9408338069915771,1.7596219778060913,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["22SPOrKyRL4p0X3Y7OYHfk"]}],[1],0,[],[],[]],[[[23,"Material #1994020",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[426,4]],[[[18,".bin",3736287665,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":271824,"length":41112,"count":10278,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":271824,"count":4854,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]]},"minPosition",8,[1,-2.4003896713256836,-4.0228095054626465,0.0039154887199401855],"maxPosition",8,[1,2.4003894329071045,2.1594583988189697,5.093757152557373]]],-1],0,0,[],[],[]],[[[19],[47,"monster_S_004",[-3,-4],[[63,-2,[1,"d5ppk8gflXS6bg2Y8R+7EF"],[3,4,5,6,7,8,9,10,11,12],13]],[0,"08iX41iSJWlpHi3lIkH4oy",-1,0]],[20,"Bip001",[-5,-6,-7,-8,-9],[0,"edZx6VfXtXE6nbio1413MN",1,0],[1,0.049051493406295776,0.05553199723362923,1.2095818519592285],[3,-0.0006097224509857245,-0.01722360207281461,-0.7956013042810014,0.6055753796155682],[1,-173.9593477789705,-175.31800666721483,-74.48749841136443]],[20,"Bip001 Spine",[-10,-11,-12],[0,"e0jYj9EodVLriSjkyj8Wlt",1,0],[1,0.3394815921783447,-0.0002846047282218933,-0.008734744042158127],[3,-0.05230478292673197,0.012908843581232251,0.001072712960647792,0.9985471549843236],[1,-5.997514007212323,1.4836911820313965,0.04537370293343577]],[20,"Bip001 Neck",[-13,-14,-15],[0,"35w0yZ0YxXi4UrNZOJL8al",1,0],[1,0.586073637008667,-0.10362783074378967,0.00006033480167388916],[3,-6.914333686519426e-9,-3.672835548189103e-7,0.1309430625036947,0.9913898901955873],[1,0.000004893380983398575,-0.000043099440357317534,15.048183354636045]],[62,"Bip001 R Clavicle",4,[[-16,[6,"Bip001 Xtra02Opp",-17,[0,"524rX2bXRdcJdeEW0LCNXC",1,0],[1,0.523729681968689,0.06573440134525299,-0.10153985023498535],[3,-6.247959467427922e-18,1.251260647657785e-17,-0.05600278839455234,0.9984306123572309],[1,-6.385461655710315e-16,1.400276294153821e-15,-6.4208060947516925]],[6,"Bip001 Xtra02Opp_01",-18,[0,"43yRD96K5e47HpXjJV2+iN",1,0],[1,0.5237298011779785,0.06573434174060822,-0.10153985023498535],[3,0.7826464146067054,-0.00034783119784025367,-0.08943960781257812,0.6160073256634689],[1,104.03777033217236,8.072979526521477,-6.357707858170503]]],1,4,4],[0,"b0+vJ83rRStJG1bzdnZfM/",1,0],[1,-0.23842334747314453,0.1327838897705078,-0.3169342279434204],[3,-0.6656259486865426,0.08818455290240645,0.7346376984783908,0.0973295075448137],[1,-164.9760672635903,95.44955116681702,1.4673905845709705]],[43,"Bip001 R Hand",[[-19,-20,[12,"Bip001 Xtra03",-21,[0,"62QV9evnhakKA9Erj5sli4",1,0],[1,0.34129172563552856,0.09468472003936768,0.7260064482688904],[3,-0.6064391123804355,-0.3111928099009198,0.6915718898977402,-0.23899573038961877],[1,-1,-1.0000001192092896,-1],[1,133.85547722992646,98.64956261617886,2.6866395782588905]]],1,1,4],[0,"2fXbBny51QaLxl1lP7Vnub",1,0],[1,0.5262290835380554,-1.7881393432617188e-7,0],[3,0.6556428710861406,-0.046531923398984716,-0.057381973020445225,0.7514482782407546],[1,82.23254165609752,0.3076819588559249,-8.4679304827175]],[62,"Bip001 L Clavicle",4,[[-22,[6,"Bip001 Xtra02",-23,[0,"e7at6Zun1ZFpWOe62A9lYF",1,0],[1,0.5237297415733337,0.06573442369699478,0.10153985023498535],[3,-0.7826482135490148,0.00034786624365362197,-0.08943981766338095,0.6160050095851116],[1,-104.03810930047298,-8.073014879107786,-6.3577021132315075]]],1,4],[0,"dawUz3nDVXQ6iHygv9HcYv",1,0],[1,-0.23842334747314453,0.13278210163116455,0.31681370735168457],[3,0.6197065288056965,-0.10546422299257804,0.7732129312940685,0.0835636206958543],[1,164.53422347045768,-102.58936666479761,-0.08530146507025196]],[20,"Bip001 L Hand",[-24,-25],[0,"d1VeKqQ+FSgqwWbtOaMpK4",1,0],[1,0.5262293815612793,-1.1920928955078125e-7,-2.220446049250313e-16],[3,0.9850150589012182,0.1428331022820484,0.03943748124079439,0.08825374611707922],[1,170.2232841761289,-3.1419505364188214,16.758990706849428]],[44,"monster_M_004",1,[[64,-26,[1,"1cvv/paRVROZpRQdkRhZqx"],[0],[7],1,1,2]],[0,"6bZsxAvMtSg7pTmeoCKglr",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Root",1,[2],[0,"caC8+GVctTbpiJNKgte7IW",1,0],[1,0,0.20308148860931396,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[54,"Bip001 Pelvis",2,[3],[0,"67APlGQVFYoLOe8XYpJK7a",1,0],[3,0.5064108894136171,0.5064115450647001,0.4935051727052416,-0.49350582835632456],[1,-89.99992484914351,-90.00000096995645,1.4789272543102485]],[93,"Bip001 Spine1",3,[4],[0,"e8k7ZlE0lbsr2krAJP45VN",1,0],[1,0.3594597578048706,-0.0003339238464832306,-1.4901161193847656e-8]],[3,"Bip001 Head",4,[-27],[0,"32TCOHA3ZWRb0gof3r4OLB",1,0],[1,0.1907801628112793,-5.960464477539063e-8,0],[3,0.18145938112017782,-0.045823953779044864,-0.1473043105372766,0.971222991058529],[1,20.83436810748271,-2.137729299035032,-17.62351322677988]],[3,"Bip001 Xtra01",13,[-28],[0,"80OpwoQlxZKpXco3XRUPmi",1,0],[1,1.2812135219573975,0.14581960439682007,2.0489096641540527e-7],[3,1.5007969979696621e-10,1.6231744959146397e-7,-0.05829964249453079,0.9982991293620281],[1,0.0000011090934666957856,0.000018696669975427017,-6.684437141641412]],[3,"Bip001 Xtra0102",14,[-29],[0,"a7w8cuODJV257KcXmXT9B3",1,0],[1,0.28650903701782227,-0.000299990177154541,1.4901161193847656e-8],[3,4.3913546822372867e-10,7.308940277145338e-7,-0.26434376248475705,0.9644285226157862],[1,0.000025793187720778953,0.00009391318514889061,-30.65592542612234]],[3,"Bip001 Xtra0103",15,[-30],[0,"adgzvMyGFY267gHq5dL0lK",1,0],[1,0.43793344497680664,-0.0002758502960205078,1.4901161193847656e-8],[3,-0.0006751937800301669,-0.0019304664730094277,-0.32925483058631144,0.9442388860601619],[1,-0.18628225315610472,-0.2992342107712918,-38.44680857349964]],[3,"Bip001 Xtra0104",16,[-31],[0,"7bF6wqWFtSlbgOsl/zlnpU",1,0],[1,0.4425288438796997,-0.00023984909057617188,-1.4901161193847656e-8],[3,0.006050552404082018,0.02066890578374812,-0.2801265493799275,0.9597214718249263],[1,1.5760125804219332,2.927034850169513,-32.50932140628952]],[5,"Bip001 Xtra0105",17,[[6,"Bip001 Xtra0106",-32,[0,"baQ+QA6a5fk4aNE1Bpqvaz",1,0],[1,0.5797834396362305,-0.0004956722259521484,3.725290298461914e-8],[3,-0.004442710878886053,-0.037903267751958875,-0.11553903626974836,0.9925695621525114],[1,-1.0347023684259684,-4.493869316659745,-13.239633539416202]]],[0,"3ccUewWdlfB6K2XMVOb43e",1,0],[1,0.35755884647369385,-0.0003838539123535156,-2.7755575615628914e-17],[3,-0.0005837076427244131,-0.0019184378799390511,-0.29021128849194044,0.956960493914632],[1,-0.1536976958426927,-0.2763341782636565,-33.74097361827072]],[3,"Bip001 L UpperArm",7,[-33],[0,"35sR2GBdVcupurcvAatLRp",1,0],[1,0.3031982481479645,7.450580596923828e-9,4.440892098500626e-16],[3,-0.11709683332907903,0.3358677609718843,-0.2198214967548895,0.9083830075075575],[1,-4.248863065429559,39.501225758549886,-28.556316553805246]],[3,"Bip001 L Forearm",19,[8],[0,"faMgLnFkZW94sPt+RLqI9Y",1,0],[1,0.6440646648406982,5.960464477539063e-8,0],[3,0,0,-0.6265666020551498,0.7793678805218134],[1,0,0,-77.59452895775578]],[5,"Bip001 L Finger0",8,[[6,"Bip001 L Finger01",-34,[0,"dcs+rNxqhahZCublC2zCAk",1,0],[1,0.17469453811645508,0,1.1102230246251565e-16],[3,-7.447544841414305e-9,2.1265099513030475e-10,-0.028541535285973724,0.9995926073973934],[1,-8.537735953459018e-7,-1.3740672240025546e-16,-3.2710632398076904]]],[0,"79YWCOfFpdYoLP/1cvh2eu",1,0],[1,0.1943836808204651,0.07942855358123779,-0.2030106782913208],[3,0.5857833160884595,0.321579106005282,0.09317972722685788,0.7380801606920347],[1,69.78437425214196,25.22829862950765,30.950648507689998]],[5,"Bip001 L Finger1",8,[[6,"Bip001 L Finger11",-35,[0,"ac7PkBTDtefoz9kEnbI04s",1,0],[1,0.20877480506896973,-2.384185791015625e-7,-2.220446049250313e-16],[3,0.020292182162518223,0.016294837512606505,0.7683625463915336,0.6394854985973015],[1,179.71210394935926,-176.73477967321065,79.5377391528963]]],[0,"41tcRXoARQS6juNfxpnGcf",1,0],[1,0.3499831557273865,0,0],[3,0.012243022763404674,-0.01503336010551885,0.3307497399035325,0.9435193246729493],[1,2.4232769322494367,-2.674203996292146,38.591924139148354]],[3,"Bip001 R UpperArm",5,[-36],[0,"b9ny2X/MxWj6rHyml/OoJo",1,0],[1,0.30319827795028687,7.450580596923828e-9,4.440892098500626e-16],[3,-0.22480667955835124,-0.3693849118153435,-0.32637524355520214,0.8405331309016929],[1,-42.06727940743506,-56.19301797440853,-22.493462824452774]],[3,"Bip001 R Forearm",23,[6],[0,"64ga6eaz9QJ7bmPv4M31oa",1,0],[1,0.6440649032592773,0,0],[3,-7.681971943618675e-18,-5.670156478764916e-17,-0.37058568911385614,0.9287982811267517],[1,-4.446925040726797e-15,-8.769920933761502e-15,-43.50348555307545]],[5,"Bip001 R Finger0",6,[[6,"Bip001 R Finger01",-37,[0,"91o0h+bh5Ud5v+dUEanfVC",1,0],[1,0.17469453811645508,-1.1920928955078125e-7,0],[3,-6.61758111209012e-9,-4.344477197709558e-9,0.5488055913230775,0.8359500122211418],[1,-9.07134261385296e-7,-7.238492719851799e-14,66.57022014843818]]],[0,"admUS9u2RZLoZShy4Jzbt5",1,0],[1,0.19438382983207703,0.07942867279052734,0.2030106782913208],[3,-0.5496568058254714,-0.4898542739069574,0.1659392557787926,0.6560368507457551],[1,-58.622336598833826,-44.70846586916581,49.132786088227725]],[5,"Bip001 R Finger1",6,[[6,"Bip001 R Finger11",-38,[0,"1eeDi4Kh5XmKkrb9Nq7SWC",1,0],[1,0.20877456665039062,5.551115123125783e-17,-5.960464477539063e-8],[3,-0.1217453686000132,-0.08890052758605471,0.718944241330506,0.6785233520499283],[1,-149.47558352938464,132.33180053151534,85.77884516608697]]],[0,"69ZBlfOt1eiIq1p/wB6ZuY",1,0],[1,0.349983274936676,-2.220446049250313e-16,-5.960464477539063e-8],[3,-0.008430699897524385,0.016926836382404917,0.6163973866551278,0.7872081473371892],[1,-8.097302789284381,8.790926183844325,75.97277870633796]],[3,"Bip001 L Thigh",3,[-39],[0,"6bYGvl+iddL7Wz2qRHNRb9",1,0],[1,-0.34763312339782715,-0.03186597302556038,0.3086744546890259],[3,0.05036785391866791,0.9733874678599331,0.2206304940380313,-0.03608464777976191],[1,-25.761200235185306,-174.6760070928332,4.711131104814813]],[3,"Bip001 L Calf",27,[-40],[0,"69KZNObFlfsbsuRPUZfoK4",1,0],[1,0.6991642713546753,0,2.9802322387695312e-8],[3,-1.3392943065350738e-17,5.659508011597215e-18,-0.09677736265308232,0.9953060544766689],[1,-1.4927122011626859e-15,5.0644833724681e-16,-11.107253256566123]],[5,"Bip001 L Foot",28,[[6,"Bip001 L Toe0",-41,[0,"56nZUpo0BdOI7/6KgP79Vu",1,0],[1,0.2635822594165802,0.3261260688304901,-5.551115123125783e-17],[3,-5.058222514143481e-7,-9.272909141587343e-7,0.7071066619768513,0.7071069003954346],[1,0,-0.00008197199086484706,90]]],[0,"a4MAcamJFd8rWO9DScqzOn",1,0],[1,0.46137458086013794,-1.3877787807814457e-17,-5.551115123125783e-17],[3,0.02913054190116201,-0.03231012365520338,0.0262124364037956,0.9987093549254994],[1,3.437296823246578,-3.7927893734907387,2.893221729074607]],[3,"Bip001 R Thigh",3,[-42],[0,"c4wb57w5teQbijl1FmMXqT",1,0],[1,-0.3315541744232178,0.03297925740480423,-0.3086744546890259],[3,0.017751539252102537,0.9469073482047939,-0.31795555578963375,0.04422240735702918],[1,37.13736920529008,174.54644230354032,0.31493389412678974]],[3,"Bip001 R Calf",30,[-43],[0,"6bKVeoMHhfkL6SMUywMKDz",1,0],[1,0.6991643905639648,-2.9802322387695312e-8,2.9802322387695312e-8],[3,-5.162541590429496e-19,-6.919662586162073e-18,-0.0744000577748371,0.9972284750262104],[1,-1.1930966006655587e-16,-8.04039986187025e-16,-8.533503675841946]],[5,"Bip001 R Foot",31,[[6,"Bip001 R Toe0",-44,[0,"c9p8+L4jxVn6Bz/1OYTakQ",1,0],[1,0.2635822892189026,0.3261260390281677,5.551115123125783e-17],[3,-8.589286584652784e-8,-5.073613438499789e-7,0.7071066619771523,0.7071069003957355],[1,0,-0.000013919532394706278,90]]],[0,"27o4GolQldWbpqryn/ZRZu",1,0],[1,0.4613746106624603,2.2351741790771484e-8,-2.9802322387695312e-8],[3,-0.12327623744678994,0.013630143891538505,0.047002392350424346,0.9911649527559958],[1,-14.279500313994676,2.2216081756851818,5.15288961371441]],[5,"Bip001 Xtra04",2,[[6,"Bip001 Xtra0402",-45,[0,"bfUYLabnZTerpS9N0ZRsQP",1,0],[1,0.2725435495376587,-0.0003185272216796875,0.00003719329833984375],[3,-0.053710930118073597,-0.022654691740025754,0.13093744235086097,0.9896753443016709],[1,-5.9696664668433295,-1.8272704411131728,15.16530222221633]]],[0,"bedNPR4qFRYpaq2z9UlW17",1,0],[1,0.38782620429992676,0.397160142660141,0.05101621150970459],[3,-0.6779612843832034,0.1642499701766241,0.4414702916097118,0.5643531038281722],[1,-108.75392228994242,54.64374925794561,15.99658237157408]],[5,"Bip001 Xtra04Opp",2,[[6,"Bip001 Xtra04Opp02",-46,[0,"921VDJCcFUbLaInxkDdZkU",1,0],[1,0.2726077437400818,-0.0002963542938232422,1.4901161193847656e-8],[3,3.158788778589181e-9,-6.518551443122514e-7,0.23116770331765743,0.9729139185675238],[1,0.00001972821533069427,-0.00008146416857845074,26.731658128733184]]],[0,"8dQ0L0wi1fyYCGEJnxs+ZD",1,0],[1,0.3878052532672882,-0.397149920463562,0.051041364669799805],[3,-0.5974311224087288,0.3955606216538382,0.1102413831576633,0.6888067116497638],[1,-73.95128983398483,45.594390060484415,-18.709524409896193]],[5,"Bip001 Xtra05",2,[[6,"Bip001 Xtra0502",-47,[0,"2fnMtJyotQrqApgmZJnore",1,0],[1,0.19545382261276245,-0.00037360191345214844,6.556510925292969e-7],[3,-0.00044621358016633527,0.015108672774632556,-0.030316374940434376,0.9994260584509997],[1,0.0013871267858549317,1.732230748621048,-3.474909210884529]]],[0,"43LqD+96VbOK8NMzYRK52s",1,0],[1,-0.3982851803302765,0.43180960416793823,0.030852437019348145],[3,-0.17587928337009476,0.6342680404869915,0.4750859700405953,0.5840067221947028],[1,-58.93917676158898,105.74632347102192,19.377917853425114]],[5,"Bip001 Xtra05Opp",2,[[6,"Bip001 Xtra05Opp02",-48,[0,"ba5A7/8iFQ+pEk/P/ZKN/L",1,0],[1,0.19545406103134155,-0.00037360191345214844,-6.258487701416016e-7],[3,0.00044626876075576355,-0.015108520959823466,-0.030316469916814026,0.9994260578403901],[1,-0.0013804319523473079,-1.7322131440241877,-3.474920193973364]]],[0,"5baNZ244ZTfbuI3zcjWR9w",1,0],[1,-0.3982851207256317,-0.4318094849586487,0.030852556228637695],[3,-0.5840072627014868,0.4750841554057692,0.634269356204001,0.17587764546657333],[1,-121.06114955628496,105.74631656146875,-19.377918399071724]]],0,[0,4,1,0,0,1,0,-1,9,0,-2,10,0,-1,11,0,-2,33,0,-3,34,0,-4,35,0,-5,36,0,-1,12,0,-2,27,0,-3,30,0,-1,13,0,-2,7,0,-3,5,0,-1,23,0,1,5,0,1,5,0,-1,25,0,-2,26,0,1,6,0,-1,19,0,1,7,0,-1,21,0,-2,22,0,0,9,0,-1,14,0,-1,15,0,-1,16,0,-1,17,0,-1,18,0,1,18,0,-1,20,0,1,21,0,1,22,0,-1,24,0,1,25,0,1,26,0,-1,28,0,-1,29,0,1,29,0,-1,31,0,-1,32,0,1,32,0,1,33,0,1,34,0,1,35,0,1,36,0,9,1,2,1,10,3,1,11,4,1,12,6,1,24,8,1,20,48],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,7],[427,254,255,64,256,257,258,259,260,261,262,263,264,64]],[[[19],[123,"Queen@Cannon_Attack",[[-3,[6,"gun",-5,[0,"c6tBlArWdUS4FrBS8mVSpA",-4,0],[1,-1.2461202144622803,0.8488642573356628,-0.29730814695358276],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]]],1,4],[[40,-2,[1,"27iExdDFZWCIHhEAOzx3ay"],[0],1]],[0,"60yJ0z/mJZrrOeH/8P22KU",-1,0]],[20,"Bip001 Spine",[-6,-7,-8,-9,-10,-11],[0,"ffWPA5dg5RZLegCudKSRBe",1,0],[1,0.09832262992858887,-0.00042510777711868286,0.00011793244630098343],[3,-0.13561834610839704,-0.13315269562988086,0.0024363007784324957,0.9817698754208322],[1,-15.418397647059559,-15.12989315514978,2.3440323024072107]],[43,"Bip001 R Hand",[[-12,-13,-14,[12,"Axe01",-15,[0,"a7PNjW59lURoZSADoBGOIJ",1,0],[1,0.1583864688873291,0.10607898235321045,-2.682209014892578e-7],[3,0.1390525597369882,0.1390527683532521,0.6932996153337633,0.6932996153337633],[1,0.010000001639127731,0.009999996051192284,0.010000000707805157],[1,0,22.68225880720928,90]],[12,"hammer",-16,[0,"4bZZzAIWdduqghXV3OqYMc",1,0],[1,0.16534423828125,0.09457826614379883,-0.03485420346260071],[3,0.10373322438205983,0.05298658716708892,0.005534061575019243,0.9931773325555561],[1,0.010000000707805157,0.009999995119869709,0.009999997913837433],[1,11.859600729088413,5.9768826535349975,1.2597806190483907]]],1,1,1,4,4],[0,"c2lCGl0+RXSYyQg6lYpTru",1,0],[1,0.351168155670166,-8.940696716308594e-8,-2.384185791015625e-7],[3,0.5476322314801272,-0.05375094477379199,-0.031024339474780355,0.8344143247453119],[1,66.37596507560272,-3.2140022567733766,-6.352544794869042]],[43,"Bip001 L Hand",[[-17,-18,-19,[12,"Axe02",-20,[0,"fdStpyBmteKYqkCrlj8sEk",1,0],[1,0.05137801170349121,0.03893780708312988,0.164404034614563],[3,0.7071069003958289,-0.7071066619772457,-2.0579515333225945e-8,-1.2347704403772019e-8],[1,0.009999998845160007,0.010000002570450306,0.009999999776482582],[1,0,-180.00000200103085,-90]]],1,1,1,4],[0,"52jwJlFv1WDKs6+xjuE25I",1,0],[1,0.35116803646087646,-5.960464477539063e-8,0],[3,-0.749912501466987,-0.162221268054224,-0.15254828355936423,0.6229321965651622],[1,-99.87637101407857,-25.56365767500184,3.0523888528447456]],[93,"Bip001 Neck",2,[-21,-22,-23],[0,"caLh+R695ZKpqJeHBF37L6",1,0],[1,0.5543079376220703,-0.11576654016971588,5.960464477539063e-8]],[5,"Bip001 Head",5,[[10,"Bip001 HeadNub",-24,[0,"567Qasn2hX7rO7LX0J2pjj",1,0],[1,0.6926820278167725,1.4901161193847656e-8,-2.9802322387695312e-8]],[6,"Bone002",-25,[0,"31TroDgiNRQLM+PmSeU+IB",1,0],[1,0.8220129013061523,0.12468266487121582,0.1734778881072998],[3,0.20846727680880192,0.6665173233843568,0.02529570297165083,0.715301460602203],[1,16.17743143799568,83.33263785668862,18.30541650280896]],[6,"Bone001",-26,[0,"136bLPz7taU7LnysICwZw+",1,0],[1,0.9148128032684326,-0.1821257621049881,0.23440569639205933],[3,-0.694639727363996,-0.1321915806576944,-0.13219095480893778,0.6946413366893701],[1,-89.9998624174352,-21.54929901036495,0.000025439458099341306]]],[0,"3aYY0Sh7RaYKyuKKpMleKK",1,0],[1,0.21116507053375244,-1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.16085119686755367,-0.010247585453703377,-0.029884288349998105,0.9864729133475784],[1,18.50297084191076,-0.608761577968074,-3.56935757836684]],[3,"Bip001",1,[-27],[0,"2frm0sTbRcRoW0Cs8jVVfe",1,0],[1,8.570366105686844e-8,0.9804768562316895,-0.09285487234592438],[3,0.45580028794172206,0.540597907424958,0.540597907424958,-0.45580028794172206],[1,-90.00000000000003,-99.7287746072152,0]],[54,"Bip001 Pelvis",7,[2],[0,"29v3FsdSBTC5xMPnkaL2Qr",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 L Thigh",2,[-28],[0,"cfrzpo/cRZ75w7TGbisFKb",1,0],[1,-0.021422505378723145,-0.07779741287231445,0.28698810935020447],[3,0.18964349678353773,0.8651525129513024,0.41205458648569826,-0.21391000728778214],[1,-53.459007041471814,-147.81916651965784,8.734493815448962]],[3,"Bip001 L Calf",9,[-29],[0,"14p28Bd9RcKqONmQ+vbdcG",1,0],[1,0.4994024336338043,0,5.551115123125783e-17],[3,3.260064116522373e-17,1.724488310731683e-17,-0.23019008829433846,0.9731456844948987],[1,4.575173667290619e-15,3.1128717099529473e-15,-26.616526588010657]],[3,"Bip001 L Foot",10,[-30],[0,"0dJ2IpcZFenIRJAQNsAdvN",1,0],[1,0.4148825407028198,-1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.007560372386771968,-0.0157134086603856,0.05912424650689584,0.9980983183197119],[1,0.9780230483259027,-1.8617070033086598,6.764344870723971]],[5,"Bip001 L Toe0",11,[[12,"Bip001 L Toe0Nub",-31,[0,"12Rnd/KU9SS432PcBvTLAZ",1,0],[1,0.11261013150215149,0,-2.9802322387695312e-8],[3,1.490120737912548e-8,1.4210854715202004e-14,1,7.166659369358015e-15],[1,-1.0000001192092896,-1,-1.0000001192092896],[1,-179.99999999999838,-179.9999982924474,8.212386944099866e-13]]],[0,"cfkFoUlvRX5qXAIl4i+7Z0",1,0],[1,0.0845489650964737,0.18106074631214142,0],[3,3.5361374809073887e-7,-2.570759540838513e-8,0.7071070494073469,0.7071065129655574],[1,0,0.000057305582601490754,90]],[3,"Bip001 R Thigh",2,[-32],[0,"72/HHXS55Y2akHmNGPQPMT",1,0],[1,-0.16827428340911865,0.07251804322004318,-0.2354380488395691],[3,0.022517749526754463,0.9975676309319514,-0.00020998455396754003,-0.06596763281755187],[1,-0.1463633801711436,-172.4299596413167,2.5765233023954406]],[3,"Bip001 R Calf",13,[-33],[0,"3cN4q/OcNWk7txsuFjZlNC",1,0],[1,0.49940240383148193,-1.4901161193847656e-8,2.9802322387695312e-8],[3,2.7167074969689008e-17,-5.685261632110013e-18,-0.2048331224418341,0.9787969104726111],[1,3.1805550759726784e-15,3.413842492474807e-23,-23.63946074431077]],[3,"Bip001 R Foot",14,[-34],[0,"53jRPFmtRa3btDcLiQG6NF",1,0],[1,0.4148826599121094,-2.2351741790771484e-8,-2.9802322387695312e-8],[3,-0.010317446743510286,0.0658266102381611,0.1669518960471215,0.9837110714450251],[1,-2.5642562994734206,8.08798853232161,19.093247541530634]],[5,"Bip001 R Toe0",15,[[10,"Bip001 R Toe0Nub",-35,[0,"b1AvXL6WpeeJgEU/r2ocaH",1,0],[1,0.11261013895273209,9.313225746154785e-10,5.551115123125783e-17]]],[0,"43pKcsJrJZX4UMdXRONIN7",1,0],[1,0.0845489576458931,0.18106073141098022,0],[3,8.794520462506088e-8,3.6515058269165786e-9,0.7071067215818964,0.707106840791188],[1,0,0.000014252129275944533,90]],[3,"Bip001 L Clavicle",5,[-36],[0,"bcCkGTBA1Z4rQwB5l9rlVb",1,0],[1,-0.08568155765533447,0.03203679621219635,0.09742309153079987],[3,0.5752172397408709,-0.16957334959811965,0.7907380361775683,-0.12289574587026961],[1,172.08749430458533,-109.53894422823727,-22.91964099565828]],[3,"Bip001 L UpperArm",17,[-37],[0,"c3OKUhYptbxJyZbzD2d6rN",1,0],[1,0.1703396737575531,2.9802322387695312e-8,-1.1920928955078125e-7],[3,0.17673879368853038,0.05050976061004707,0.004317361741042919,0.9829514348513033],[1,20.312216573657853,5.612794116795189,1.5094360785360834]],[3,"Bip001 L Forearm",18,[4],[0,"75i2mHWS1XsJ2TATExrbyx",1,0],[1,0.5310860276222229,-5.960464477539063e-8,-2.220446049250313e-16],[3,4.463257274963221e-18,-4.8366758828456755e-17,0.09188901563688467,0.9957692548001693],[1,1.0360718516759734e-15,-5.66157861833796e-15,10.544580235058604]],[3,"Bip001 L Finger0",4,[-38],[0,"5dl0KAAqFR4rZkl7lW8Zir",1,0],[1,0.12257128953933716,0.05296057462692261,-0.07330769300460815],[3,0.8781912833925095,0.31962203655812166,-0.3074811963890946,0.17910091397585606],[1,145.05769571714373,47.17739174097712,26.823156342771036]],[5,"Bip001 L Finger01",20,[[10,"Bip001 L Finger0Nub",-39,[0,"afEKifgBpeIrtmCe66v7J9",1,0],[1,0.11764958500862122,5.960464477539063e-8,0]]],[0,"71VWiBoM5epYJjNxJM4/FP",1,0],[1,0.09504836797714233,-2.220446049250313e-16,5.960464477539063e-8],[3,-0.6286411391781405,-0.13250150010696335,-0.14145748556621338,0.7531556614535264],[1,-80.22475383682544,-22.200508136671928,-2.6644820258429607]],[3,"Bip001 L Finger1",4,[-40],[0,"f6pfHvy4FWBqrSDStijXwN",1,0],[1,0.20349162817001343,0.00548553466796875,-0.0687604546546936],[3,-0.07252244067477977,-0.09263169226335952,-0.04575982419053208,0.9920009595141787],[1,-8.790394040410783,-11.01061875119927,-4.436364722205895]],[5,"Bip001 L Finger11",22,[[10,"Bip001 L Finger1Nub",-41,[0,"8e6gzlk2Jec7CQBlq0Tz+6",1,0],[1,0.12315750122070312,-5.960464477539063e-8,-1.4901161193847656e-8]]],[0,"95M3C35sJYcq8EvOHYjKiQ",1,0],[1,0.12139749526977539,-1.1102230246251565e-16,-4.470348358154297e-8],[3,5.876695871908764e-10,5.556947861964094e-9,-0.10516756162602908,0.9944545157932742],[1,1.3696682391966198e-7,6.548150523560373e-7,-12.073641169725207]],[3,"Bip001 L Finger2",4,[-42],[0,"4el3YyHbhQdoOVsDK1MZ3m",1,0],[1,0.1929364800453186,0.003051578998565674,0.04918551445007324],[3,-0.06814927710948249,-0.11456255043139628,-0.0690278048832885,0.9886689335774151],[1,-8.724433992199186,-13.749654657095478,-6.942695332141594]],[5,"Bip001 L Finger21",24,[[10,"Bip001 L Finger2Nub",-43,[0,"97DHEKK3JSSYdpfyfeSgxE",1,0],[1,0.11981201171875,5.960464477539063e-8,0]]],[0,"cc67KrX61Qt7Gg0GcRYOOj",1,0],[1,0.09083724021911621,5.960464477539063e-8,1.4901161193847656e-8],[3,-2.802820035892735e-17,1.3318591849831421e-17,0.020046639649856104,0.9997990459281048],[1,-3.2443524992916738e-15,1.5915563992948517e-15,2.297329578685544]],[3,"Bip001 R Clavicle",5,[-44],[0,"554pnPT9le3pTPNVVbO4CW",1,0],[1,-0.08568155765533447,0.03203733265399933,-0.09742364287376404],[3,-0.5756131337981343,-0.019760969776956922,0.8173564569355158,0.014403005880208118],[1,179.09816909933315,109.711594371192,2.653406453450433]],[3,"Bip001 R UpperArm",26,[-45],[0,"bd2S+DtyJbSaOKS25Tv+qd",1,0],[1,0.1703397035598755,-2.9802322387695312e-8,-1.1920928955078125e-7],[3,0.17605987515109314,-0.1176797024204257,-0.07791701102554732,0.9742090881288608],[1,19.32573287598081,-11.872316317951201,-11.142644004398933]],[3,"Bip001 R Forearm",27,[3],[0,"30zuYfkxVbg5peHJBNwLsT",1,0],[1,0.5310859680175781,5.551115123125783e-17,1.1920928955078125e-7],[3,8.035727798733853e-18,3.37510462281121e-17,-0.23161409354887902,0.9728077465098286],[1,2.006894486025268e-15,4.453511054795792e-15,-26.784237644659775]],[3,"Bip001 R Finger0",3,[-46],[0,"99HSLwL0JVIKSrP315E9cG",1,0],[1,0.12257140874862671,0.05296063423156738,0.07330772280693054],[3,0.7799380488107175,0.213876755868209,0.39293930269376437,-0.4376666285143973],[1,-121.69769044585324,-53.14851463270264,-0.5919676259077984]],[5,"Bip001 R Finger01",29,[[12,"Bip001 R Finger0Nub",-47,[0,"4dartGjN1WgKINoRxBkCSb",1,0],[1,0.1176496148109436,-2.220446049250313e-16,2.220446049250313e-16],[3,-2.7939675018018306e-9,-1.4901159417490817e-8,1,6.28642649047606e-9],[1,-1.0000001192092896,-1.0000001192092896,-1],[1,179.99999829245291,179.99999967983493,7.203714170178636e-7]]],[0,"57wOMLU0NVZIcB4zljqjJL",1,0],[1,0.09504848718643188,-1.1920928955078125e-7,-5.960464477539063e-8],[3,4.490401649154392e-17,-8.126598845772337e-18,-0.026386829550508133,0.9996518069939514],[1,5.126395783147141e-15,-7.962475474060252e-16,-3.0240589294881595]],[3,"Bip001 R Finger1",3,[-48],[0,"dfbuR4EQdf3oltFxJMgO/W",1,0],[1,0.2034916877746582,0.00548553466796875,0.06876042485237122],[3,-0.050006826682469654,0.0802470837508256,0.04660554715100734,0.994428300989766],[1,-6.160944806063865,9.488698299400118,4.8568157468873245]],[5,"Bip001 R Finger11",31,[[12,"Bip001 R Finger1Nub",-49,[0,"f13lf73/JfyJSQlWOo1EAi",1,0],[1,0.12315738201141357,0,2.9802322387695312e-8],[3,2.7939677238464355e-9,-2.7939677238464355e-9,1,-5.342608367864031e-17],[1,-1,-1,-1],[1,179.99999967983487,-179.99999967983487,-7.016709225559337e-15]]],[0,"c78+wvIY5efLnSjbYuXB0X",1,0],[1,0.12139743566513062,1.1920928955078125e-7,-5.960464477539063e-8],[3,-6.906106838991292e-9,1.2879964727680427e-8,0.09967271298384447,0.9950202763192517],[1,-9.534964641828537e-7,0.0000015788349796888688,11.44064830757636]],[3,"Bip001 R Finger2",3,[-50],[0,"ea4i9Auq9WP6tJ3wpQQPUh",1,0],[1,0.19293653964996338,0.0030516386032104492,-0.04918551445007324],[3,0.07520548934336335,0.11005923056885084,-0.006837517895336912,0.9910521421641996],[1,8.660010446579497,12.660775045953054,0.17197027849817556]],[5,"Bip001 R Finger21",33,[[12,"Bip001 R Finger2Nub",-51,[0,"0cQC4QwNVSwJnCIrnIgbeQ",1,0],[1,0.11981213092803955,-1.1920928955078125e-7,2.7755575615628914e-17],[3,3.7252898543727042e-9,7.4505797087454084e-9,1,-7.4505797087454084e-9],[1,-1.0000001192092896,-1.0000001192092896,-1.0000001192092896],[1,-179.99999914622646,-179.99999957311323,-8.537735412932902e-7]]],[0,"bbdSbFOJtY3K40+OdAmigN",1,0],[1,0.09083729982376099,1.1920928955078125e-7,-5.551115123125783e-17],[3,1.485004019415536e-8,1.2332199610872012e-9,0.08276000555184736,0.9965695065980387],[1,0.0000017075469861262817,-8.898805769094326e-17,9.494457437394718]],[5,"Bone003",2,[[6,"Bone004",-52,[0,"38Wf1v9VlbvJWN4069JUl4",1,0],[1,0.4347415268421173,2.384185791015625e-7,-5.21540641784668e-8],[3,-0.0039821802124764315,-0.1535733620382761,0.015331735636697801,0.9880102745393805],[1,-0.18113221431344992,-17.66751014313275,1.8062012821012718]]],[0,"5d9lI3MnRX4LW/i3Rfuedg",1,0],[1,0.4550154209136963,-0.230758935213089,-4.172325134277344e-7],[3,-0.5366546664160385,0.8253948923073609,-0.07721879552703483,-0.15736040920182198],[1,35.723858687182485,-137.54145500473334,-59.496897736627275]],[5,"Bone005",2,[[6,"Bone006",-53,[0,"9bJhgDRXBSMbn0Iz09WyaA",1,0],[1,0.5124344229698181,1.1920928955078125e-7,0],[3,0.046965936988503,0.11759374767110876,0.3092999387651052,0.9424963974208909],[1,1.124531805778766,13.853653336961182,36.44664472053183]]],[0,"789mSZIHFSr6lYUTopEQ63",1,0],[1,0.4767824411392212,-0.1922014206647873,-0.20133483409881592],[3,-0.558182051421807,0.8254871826966695,0.016758899856629837,0.08199297500185015],[1,-17.576743374700143,157.02475307675687,-66.75070017704616]],[5,"Bone005(mirrored)",2,[[6,"Bone006(mirrored)",-54,[0,"59dyNCzn1Rp6F5iMMNIyge",1,0],[1,0.5124345421791077,-2.384185791015625e-7,-2.9802322387695312e-8],[3,0.08001847362446567,-0.09189048176656599,-0.40140145000120336,0.9077610143514925],[1,6.137731992965894,-8.823931327602427,-48.026912930886546]]],[0,"90ZbBQ4RZaVK6HGClPpPLE",1,0],[1,0.4767824411392212,-0.19220195710659027,0.20612064003944397],[3,-0.17026349884777478,-0.04789525265574285,-0.682148038644835,0.7095001332671905],[1,-87.87883429822689,-77.82859609239698,-72.1119750852986]]],0,[0,4,1,0,0,1,0,-1,7,0,4,1,0,1,1,0,-1,9,0,-2,13,0,-3,5,0,-4,35,0,-5,36,0,-6,37,0,-1,29,0,-2,31,0,-3,33,0,1,3,0,1,3,0,-1,20,0,-2,22,0,-3,24,0,1,4,0,-1,17,0,-2,26,0,-3,6,0,1,6,0,1,6,0,1,6,0,-1,8,0,-1,10,0,-1,11,0,-1,12,0,1,12,0,-1,14,0,-1,15,0,-1,16,0,1,16,0,-1,18,0,-1,19,0,-1,21,0,1,21,0,-1,23,0,1,23,0,-1,25,0,1,25,0,-1,27,0,-1,28,0,-1,30,0,1,30,0,-1,32,0,1,32,0,-1,34,0,1,34,0,1,35,0,1,36,0,1,37,0,9,1,2,1,8,3,1,28,4,1,19,54],[0,0],[-1,7],[74,74]],[[[26,"Pertrifation_magic","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[428,10]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["abv7HgVkVDEa7wAX9hIl3l"]}],[1],0,[],[],[]],[[{"name":"WaterSplash02_00000","rect":{"x":13,"y":10,"width":108,"height":112},"offset":{"x":3,"y":-2},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-54,-56,0,54,-56,0,-54,56,0,54,56,0],"indexes":[0,1,2,2,1,3],"uv":[13,118,121,118,13,6,121,6],"nuv":[0.1015625,0.046875,0.9453125,0.046875,0.1015625,0.921875,0.9453125,0.921875],"minPos":{"x":-54,"y":-56,"z":0},"maxPos":{"x":54,"y":56,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[265]],[[[65,"Skin-0",3141089056,["Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot/Bip001 L Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot/Bip001 R Toe0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head/Bone001","Bip001/Bip001 Pelvis/Bip001 Spine/Bone003/Bone004","Bip001/Bip001 Pelvis/Bip001 Spine/Bone003"],[[[7,0.0000013868000223737909,0.0000027577070795814507,1,0,6.123234262925839e-17,-1,0.0000027577070795814507,0,1,-3.8243271396898315e-12,-0.0000013868001360606286,0,-0.5522782802581787,-0.057715050876140594,8.459387572656851e-7,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-0.8761102557182312,-0.056620027869939804,-1.570413985518826e-7,1],[7,0.9554352164268494,-0.001448465627618134,0.2951975464820862,0,0.031123952940106392,0.9949088096618652,-0.09585384279489517,0,-0.2935558259487152,0.10076986253261566,0.9506157040596008,0,-0.005265147890895605,-0.1337372064590454,-1.1916993856430054,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,-0.000796317879576236,-0.9999997019767761,-0.0000014026923054188956,0,0.9999996423721313,-0.0007963179377838969,-2.208607741138735e-9,0,-1.3752039670944214,-0.05645188316702843,-1.565750267218391e-7,1],[7,-0.011717026121914387,0.2828921973705292,-0.9590802192687988,0,-0.014539053663611412,-0.9590927958488464,-0.28271833062171936,0,-0.999825656414032,0.01063149981200695,0.015350701287388802,0,0.554641842842102,-0.14087456464767456,0.24523748457431793,1],[7,-0.015127207152545452,0.2827302813529968,-0.9590802192687988,0,-0.002973520429804921,-0.9591984748840332,-0.2827182114124298,0,-0.9998810887336731,-0.001424892689101398,0.015350699424743652,0,0.2559286952018738,-0.13779863715171814,0.24523749947547913,1],[7,0.9513541460037231,0.08822586387395859,0.29519757628440857,0,-0.06238596513867378,0.9934384822845459,-0.09585385024547577,0,-0.30171746015548706,0.07277477532625198,0.9506157040596008,0,-0.384944349527359,-0.17061741650104523,-1.1916992664337158,1],[7,0.9513541460037231,-0.2951272130012512,0.08846089243888855,0,-0.06238596513867378,0.09664486348628998,0.9933618903160095,0,-0.30171746015548706,-0.9505574107170105,0.07353170216083527,0,-0.6308814287185669,1.1915631294250488,-0.17156629264354706,1],[7,4.371138828673793e-8,0.27027440071105957,-0.9627833962440491,0,-6.123234262925839e-17,-0.9627833962440491,-0.27027440071105957,0,-1,1.1814069722504428e-8,-4.208460069321518e-8,0,0.09878771007061005,-0.1347293108701706,0.24855318665504456,1],[7,0.27027440071105957,4.208460069321518e-8,-0.9627833962440491,0,-0.9627833962440491,-3.189732211694718e-8,-0.27027440071105957,0,-4.208460069321518e-8,1,3.189732566966086e-8,0,-0.3157900273799896,-0.014238778501749039,0.24855317175388336,1],[7,0.34896987676620483,0.8812838792800903,0.3186826705932617,0,-0.5961965918540955,0.47114819288253784,-0.6500529646873474,0,-0.7230280041694641,0.03685140237212181,0.6898349523544312,0,0.10143895447254181,-0.8691299557685852,-0.9682353138923645,1],[7,0.2696436047554016,0.9086988568305969,0.31868264079093933,0,-0.6355370283126831,0.41656169295310974,-0.6500529646873474,0,-0.7234534621238708,-0.027251996099948883,0.6898349523544312,0,0.27297288179397583,-0.8567494750022888,-0.9682352542877197,1],[7,0.965877115726471,-0.19255763292312622,0.17321425676345825,0,-0.15819047391414642,0.09095248579978943,0.9832108020782471,0,-0.20507904887199402,-0.97706139087677,0.057388145476579666,0,-1.0444424152374268,1.0935152769088745,-0.19269974529743195,1],[7,0.9705620408058167,-0.1673509031534195,0.17321424186229706,0,-0.1605043262243271,0.08680401742458344,0.9832108020782471,0,-0.17957693338394165,-0.9820684790611267,0.057388145476579666,0,-0.9740220904350281,1.0659582614898682,-0.19269974529743195,1],[7,0.7112641930580139,-0.6831206679344177,-0.16567865014076233,0,0.11478520929813385,-0.11966049671173096,0.9861570596694946,0,-0.6934894919395447,-0.7204355597496033,-0.006698087323457003,0,-0.20779913663864136,1.4471664428710938,0.12015807628631592,1],[7,0.4339015483856201,-0.8855957984924316,-0.1656786948442459,0,0.06679478287696838,-0.15176545083522797,0.9861570596694946,0,-0.8984808325767517,-0.43896153569221497,-0.006698085460811853,0,0.22166697680950165,1.459652066230774,0.1201581358909607,1],[7,0.0000013430886838250444,-0.000001402693328600435,1,0,6.123234262925839e-17,-1,-0.000001402693328600435,0,1,1.8840029362976463e-12,-0.0000013430887975118821,0,-1.5863234996795654,-0.057715121656656265,0.000001970494622582919,1],[7,0.011716892011463642,-0.2828895151615143,-0.9590809345245361,0,-0.014539021998643875,-0.9590935111045837,0.28271564841270447,0,-0.999825656414032,0.01063155010342598,-0.015350532718002796,0,0.5546417832374573,-0.14087456464767456,-0.2452375441789627,1],[7,-0.9554352760314941,0.0014457381330430508,0.2951972782611847,0,0.031121332198381424,0.9949088096618652,0.09585465490818024,0,-0.2935557961463928,0.10076986253261566,-0.9506157040596008,0,-0.005265166517347097,-0.1337372064590454,1.1916993856430054,1],[7,0.01512704137712717,-0.2827276289463043,-0.9590809345245361,0,-0.0029734789859503508,-0.9591991901397705,0.2827155590057373,0,-0.9998810887336731,-0.0014248433290049434,-0.015350531786680222,0,0.2559286653995514,-0.13779865205287933,-0.2452375441789627,1],[7,-0.951353907585144,-0.08822858333587646,0.2951972782611847,0,-0.06238856539130211,0.9934382438659668,0.09585465490818024,0,-0.3017174303531647,0.07277477532625198,-0.9506157040596008,0,-0.3849443793296814,-0.17061741650104523,1.1916992664337158,1],[7,-0.951353907585144,0.29512694478034973,0.08846361190080643,0,-0.06238856539130211,0.09664567559957504,-0.9933615922927856,0,-0.3017174303531647,-0.9505574107170105,-0.07353170216083527,0,-0.6308814287185669,1.1915630102157593,0.17156627774238586,1],[7,4.371138828673793e-8,-0.27027180790901184,-0.9627841711044312,0,-6.123233601181349e-17,-0.9627841711044312,0.27027180790901184,0,-1,-1.1813955147488286e-8,-4.208463266763829e-8,0,0.09878773987293243,-0.1347293257713318,-0.24855323135852814,1],[7,-0.27027180790901184,-4.208463622035197e-8,-0.9627841711044312,0,-0.9627841711044312,-3.189743225107122e-8,0.27027180790901184,0,-4.208463266763829e-8,1,-3.189744646192594e-8,0,-0.315790057182312,-0.014238778501749039,-0.24855321645736694,1],[7,-0.9705615043640137,0.1673506498336792,0.17321696877479553,0,-0.1605069786310196,0.08680447936058044,-0.9832103848457336,0,-0.17957690358161926,-0.9820684790611267,-0.05738815292716026,0,-0.9740220904350281,1.0659582614898682,0.19269976019859314,1],[7,-0.2696419358253479,-0.9086998701095581,0.3186809718608856,0,-0.6355377435684204,0.41655927896499634,0.6500539183616638,0,-0.7234535217285156,-0.027251990512013435,-0.6898349523544312,0,0.27297288179397583,-0.8567492961883545,0.9682353138923645,1],[7,-0.7112644910812378,0.6831209063529968,-0.16567593812942505,0,0.11478324979543686,-0.11965861171483994,-0.9861575365066528,0,-0.6934894323348999,-0.7204355597496033,0.006698088254779577,0,-0.20779918134212494,1.4471663236618042,-0.12015808373689651,1],[7,-0.9658766388893127,0.19255736470222473,0.17321696877479553,0,-0.15819311141967773,0.09095301479101181,-0.9832103848457336,0,-0.20507901906967163,-0.97706139087677,-0.05738815292716026,0,-1.0444424152374268,1.0935152769088745,0.19269977509975433,1],[7,-0.3489683270454407,-0.8812850713729858,0.3186810314655304,0,-0.5961974859237671,0.4711458683013916,0.6500539183616638,0,-0.7230281233787537,0.036851391196250916,-0.6898349523544312,0,0.10143901407718658,-0.8691297173500061,0.9682353734970093,1],[7,-0.43390172719955444,0.8855962157249451,-0.16567598283290863,0,0.06679358333349228,-0.15176300704479218,-0.9861575365066528,0,-0.8984808921813965,-0.4389615058898926,0.006698085926473141,0,0.22166697680950165,1.4596521854400635,-0.12015815079212189,1],[7,-0.9429752826690674,0.33195260167121887,0.024592427536845207,0,-0.31408068537712097,-0.9118028879165649,0.2645154595375061,0,0.11023005843162537,0.24170751869678497,0.9640677571296692,0,-0.15917319059371948,-0.8060095310211182,-2.2778191566467285,1],[7,0.36730167269706726,-0.9301019310951233,6.633095495089947e-7,0,2.904905613831943e-7,-5.984418294247007e-7,-1,0,0.9301018714904785,0.36730167269706726,5.037713890487794e-8,0,-2.4124093055725098,-0.7006499767303467,0.12441126257181168,1],[7,2.0299259162470662e-8,1.012054973159593e-8,-1,0,0.10862591117620468,-0.9940826892852783,-7.855637917941749e-9,0,-0.9940826296806335,-0.10862591117620468,-2.1278497186472123e-8,0,0.8812993764877319,0.43471962213516235,1.7445309197228198e-8,1],[7,-1.0862054722338144e-7,-7.851365779742991e-9,-1,0,0.2706465721130371,-0.9626787304878235,-2.183944225464529e-8,0,-0.9626786708831787,-0.2706466019153595,1.0669165106946821e-7,0,1.232539176940918,0.5737497210502625,-1.4837132766842842e-7,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[19],[123,"Prince",[[[55,"Particle View 001",-4,[0,"b0CEe3Eppc9Yua1Rj6ExUC",-3,0]],[55,"Particle View 001",-6,[0,"fdMQ2ekSdeJ7vYkLyJSv7q",-5,0]],[10,"Particle View 001",-8,[0,"19y8p8lxBe2ZQIdtpXdDaH",-7,0],[1,-974.6693115234375,0,-770.4366455078125]],[10,"Particle View 001",-10,[0,"abT74wKlBb5JtN4mJSIxvn",-9,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-12,[0,"a2ljvJYmhSS5Jpa7Sdwffd",-11,0],[1,-2.51513671875,0,-0.122467041015625]],[10,"Particle View 001",-14,[0,"7dYd421y1Xg7UNZJN8R1aH",-13,0],[1,3.418828248977661,0,0]],[55,"Particle View 001",-16,[0,"9e4udijExZ14uF67W5vr66",-15,0]],-17,[10,"Particle View 001",-19,[0,"9a93s7tIJYSLnxPOxsc1x6",-18,0],[1,-974.6693115234375,0,-770.4366455078125]],-20,[6,"gun",-22,[0,"eay6E98r1foaFfvPcjXy5K",-21,0],[1,-0.7119389176368713,0.4632251262664795,-0.29730814695358276],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Text001",-24,[0,"0869o5alZbE5rCBkT0VuAM",-23,0],[1,21.825597763061523,0,0.5448083877563477],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[10,"Particle View 001",-26,[0,"e2pI4fWFJcopoA+358Bj72",-25,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-28,[0,"2fHRxtJ/9W6qAXu+zDjbDe",-27,0],[1,-2.51513671875,0,-0.122467041015625]]],4,4,4,4,4,4,4,1,4,1,4,4,4,4],[[63,-2,[1,"c7MOPdob1cuJ1TBWzSbOa9"],[3,4,5,6,7,8,9,10,11,12,13],14]],[0,"a614j/5LNYvY6zeiCZMp8F",-1,0]],[20,"Bip001 Spine",[-29,-30,-31,-32,-33,-34],[0,"220h54EKxV6JBc9mDdqFaH",1,0],[1,0.3237866163253784,-0.0003973767161369324,4.4957829459235654e-7],[3,-0.0000020804759106073234,-6.936759723456755e-7,0.0003981589901667566,0.9999999207323014],[1,-0.00023837338537102524,-0.00007939450691674307,0.045625660794268615]],[43,"Bip001 R Hand",[[-35,-36,-37,[6,"Axe01",-38,[0,"b5O8+K3mdXxKbIfYxWHtec",1,0],[1,0.1583864688873291,0.1060791015625,-1.9371509552001953e-7],[3,0.13905238807743547,0.1390527308041356,0.6932995767092189,0.6932996959185059],[1,0,22.682228963667566,90]],[6,"hammer",-39,[0,"daipVdA2BSmrrinw6Pfu65",1,0],[1,0.16534435749053955,0.09457826614379883,-0.03485417366027832],[3,0.10373330390643391,0.05298664560991183,0.005534085125819602,0.9931773210003768],[1,11.85960967275083,5.976888948910402,1.2597844705268495]]],1,1,1,4,4],[0,"11slUVBJZSwq41qHIlirg/",1,0],[1,0.24593713879585266,-2.7755575615628914e-17,0],[3,0.7068252124052276,-1.317403548799038e-8,7.897290108104439e-9,0.7073882378922517],[1,89.95437890588065,-0.0000017075473284870544,-4.2688682311147117e-7]],[43,"Bip001 L Hand",[[-40,-41,-42,[12,"Axe02",-43,[0,"0aIIkP/y5eBI26g5dDvoXu",1,0],[1,0.16202563047409058,0.0640871524810791,0.029027864336967468],[3,0.702334023353204,-0.7023336061207043,0.08201934873558014,-0.08201982557272272],[1,0.9999989867210388,1.0000003576278687,1.0000005960464478],[1,0,-193.3218651176808,-90]]],1,1,1,4],[0,"edEJA7PLhU+Z5oMc0xxb4A",1,0],[1,0.24593716859817505,0,0],[3,-0.7068251826029146,3.291411299835161e-9,-3.2940332024776647e-9,0.7073882676708432],[1,-89.95437407813083,1.3492158407906023e-14,-5.336085244038903e-7]],[93,"Bip001 Neck",2,[-44,-45,-46],[0,"0ctejtA/hd/pjg5TGV5pkK",1,0],[1,0.4990936517715454,-0.00016814470291137695,-4.663718300434994e-10]],[5,"Bip001 Head",5,[[10,"Bip001 HeadNub",-47,[0,"360xIFIY5RuogNgDWExN/2",1,0],[1,1.6043833494186401,0,-1.4210854715202004e-14]],[6,"Bone002",-48,[0,"ddy9u2mrheY7U8WMdrVoNj",1,0],[1,0.8220130205154419,0.12468267977237701,0.17347833514213562],[3,0.20846703825543425,0.6665172633487683,0.02529589294510248,0.7153015793490085],[1,16.177397003883588,83.3326294516199,18.305412565194377]],[6,"Bone001",-49,[0,"dfqEdb3AVYHI11wfdqEGAO",1,0],[1,0.9148131608963013,-0.1821257472038269,0.23440596461296082],[3,-0.6946397259956822,-0.13219161019962275,-0.13219093964738485,0.6946413353210533],[1,-89.99986174026664,-21.549300196500933,0.000028997851209473184]]],[0,"48pTu97dhWEYTo32/U5wG6",1,0],[1,0.21116507053375244,3.725290298461914e-9,-1.4210854715202004e-14],[3,-7.265599787883253e-14,1.1042733174299356e-9,-0.0003988305609355657,0.9999999204670887],[1,4.21424291253915e-11,1.265404279071084e-7,-0.04570261697650697]],[44,"Cylinder001",1,[[64,-50,[1,"d7lrqB42RYcqzuVEehjBcE"],[0],[7],1,1,2]],[0,"ceI5IMDE5UkKZg9T32LuLJ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001",1,[-51],[0,"8f9YfA9/pYDJrkwJWScA//",1,0],[1,7.912203869864243e-8,0.5522782802581787,0.057715047150850296],[3,-0.5000003576277408,-0.49999964237200345,-0.49999964237200345,0.5000003576277408],[1,-90,-89.99991803772996,0]],[54,"Bip001 Pelvis",8,[2],[0,"41NlIVoI5ZTY5n6GZYkTKH",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 L Thigh",2,[-52],[0,"7a4AuX6UJd7K3P1SK04sAB",1,0],[1,-0.32378625869750977,0.0006544552743434906,0.2815534174442291],[3,0.0067522096097397035,0.9896940401106775,0.14287261393694592,0.006894260048398093],[1,-16.423834266799044,179.32857077410893,0.8786792655652679]],[3,"Bip001 L Calf",10,[-53],[0,"a7EeNu/P1cMqxwNeTXkUgp",1,0],[1,0.3003932237625122,0,-5.551115123125783e-17],[3,-5.5507200894450923e-17,8.225571940334171e-19,-0.006028971199317299,0.9999818255879842],[1,-6.3604351915175354e-15,5.591224683990405e-17,-0.6908733944645934]],[3,"Bip001 L Foot",11,[-54],[0,"d6MudrDSxdqZQlGl3vyRzg",1,0],[1,0.15316790342330933,0,1.4901161193847656e-8],[3,0.006486019435820418,0.007680043401172094,0.0006626464157404622,0.9999492534048725],[1,0.7426437359645626,0.8795664182370344,0.0816379992149309]],[5,"Bip001 L Toe0",12,[[12,"Bip001 L Toe0Nub",-55,[0,"1emql3AWZYTpwAn+FwiNP4",1,0],[1,0.11261016130447388,1.734723475976807e-18,-2.9802322387695312e-8],[3,6.383781862199058e-16,1.7763566276420137e-15,1,-1.8375892746737375e-15],[1,-1.0000001192092896,-1,-1.0000001192092896],[1,-179.9999999999998,-179.99999999999991,-2.1057221983462253e-13]]],[0,"8elQgJXplSC4IA5UFOrGTm",1,0],[1,0.0845489576458931,0.18106071650981903,5.551115123125783e-17],[3,-1.5454310096341944e-8,-1.5454311872698817e-8,0.7071067811865474,0.7071067811865474],[1,0,-0.0000025044781562438674,90]],[3,"Bip001 R Thigh",2,[-56],[0,"a9iM8nMiNSkbEYlpHTawUg",1,0],[1,-0.32378625869750977,0.0006560198962688446,-0.28155335783958435],[3,0.006752204294724842,0.9896944377414584,-0.14286986299690072,-0.006894192340510998],[1,16.423515801872856,-179.32857592482205,0.8786756882301817]],[3,"Bip001 R Calf",14,[-57],[0,"1f7303tupU54RybZZjzy6j",1,0],[1,0.300393283367157,0,1.4901161193847656e-8],[3,2.7747227847598663e-17,-1.4683564368241916e-18,-0.0060289721306060265,0.9999818255823695],[1,3.1787569540857703e-15,-1.4909932600905426e-16,-0.6908735011843601]],[3,"Bip001 R Foot",15,[-58],[0,"f9Q+JoDbtV3YhTSZ7644x+",1,0],[1,0.15316787362098694,1.4901161193847656e-8,-1.4901161193847656e-8],[3,-0.006486005936491554,-0.007679959587882922,0.0006626220272263979,0.9999492541523142],[1,-0.7426422173349407,-0.8795568330364708,0.08163513051889956]],[5,"Bip001 R Toe0",16,[[10,"Bip001 R Toe0Nub",-59,[0,"54g+sLcrpSCKXYVm1Kzyuf",1,0],[1,0.11261013150215149,0,-1.4901161193847656e-8]]],[0,"05RFSwnpNRGb/iyPcR1Jbk",1,0],[1,0.0845489576458931,0.18106074631214142,-1.4901161193847656e-8],[3,1.5454313649055686e-8,1.5454313649055686e-8,0.7071067811865474,0.7071067811865474],[1,0,0.0000025044787319857743,90]],[3,"Bip001 L Clavicle",5,[-60],[0,"44PkrHoptaOYUPcV5Q4LRr",1,0],[1,-0.1726454496383667,-0.0764007419347763,0.19638802111148834],[3,0.5747648668301922,-0.00022998799285429598,0.8183185133712754,0.0003250184926035069],[1,179.95702671101412,-109.83365319270118,0.015330016733901067]],[3,"Bip001 L UpperArm",18,[-61],[0,"21xfLWK0Jf4annyNAGTVOc",1,0],[1,0.1703396588563919,3.725290298461914e-9,0],[3,0.04761244032794312,-0.023254711418740883,0.016694316811221552,0.9984555942599829],[1,5.503163674934226,-2.754156228627808,1.783483969585783]],[3,"Bip001 L Forearm",19,[4],[0,"96FncKzilbdaKdw8ynYJla",1,0],[1,0.39399269223213196,1.4901161193847656e-8,1.1920928955078125e-7],[3,1.3242478494261101e-18,2.81581320666948e-17,-0.04697704437667769,0.998895969208822],[1,3.0450416647716705e-16,3.24457106488848e-15,-5.3851546916654325]],[3,"Bip001 L Finger0",4,[-62],[0,"89i+apR8dTNIOQXoU+tlm9",1,0],[1,0.08541321754455566,0.08246219158172607,-0.11836838722229004],[3,0.7555286945569811,0.46107209102650015,-0.17374029896469453,0.43174440018734805],[1,103.96106848390333,52.09232100007037,33.13978937441279]],[5,"Bip001 L Finger01",21,[[10,"Bip001 L Finger0Nub",-63,[0,"dbNChMDSVaUrl1XNQMVj+3",1,0],[1,0.11764964461326599,1.1102230246251565e-16,1.1102230246251565e-16]]],[0,"044tv18atZlKKTW5bGncBL",1,0],[1,0.0950484573841095,1.1102230246251565e-16,-1.1102230246251565e-16],[3,7.443274080136233e-9,3.298619469931328e-10,0.04427333598023608,0.9990194551264661],[1,8.537735447389399e-7,-8.235990796111044e-15,5.075009459891896]],[3,"Bip001 L Finger1",4,[-64],[0,"ff2M3W0SRWHZuxOhmVHE1a",1,0],[1,0.20723778009414673,0.004992246627807617,-0.06328437477350235],[3,0.00247254146144114,0.043365693418203316,-0.06593958856458139,0.9968777627337333],[1,0.6154602813626742,5.022331948344304,-7.5420027724565095]],[5,"Bip001 L Finger11",23,[[10,"Bip001 L Finger1Nub",-65,[0,"104XmQp2JV86d4YhGWVd3X",1,0],[1,0.06155121326446533,-2.220446049250313e-16,-1.4901161193847656e-8]]],[0,"fdz5EHgOZVHaXfic4o7csw",1,0],[1,0.09853023290634155,0,1.4901161193847656e-8],[3,1.8200600791051417e-9,3.2835969074560004e-9,0.013015954587005508,0.9999152888751072],[1,2.0371733428276553e-7,3.7365256579643337e-7,1.4915606458366306]],[3,"Bip001 L Finger2",4,[-66],[0,"95zZJlTWtSx5S0F4lrlbGU",1,0],[1,0.19293659925460815,0.0030721426010131836,0.07485195994377136],[3,-0.09927266348409564,-0.08895974091789048,0.22959897517200828,0.9641137969039542],[1,-9.76539206359839,-8.156580106222581,27.411735502759292]],[5,"Bip001 L Finger21",25,[[10,"Bip001 L Finger2Nub",-67,[0,"647cozALlSKbT9r6+/9klg",1,0],[1,0.0909886360168457,0,-7.450580596923828e-9]]],[0,"67FYlA0BdZMZETNyAUmxk3",1,0],[1,0.0844845175743103,1.1920928955078125e-7,-1.4901161193847656e-8],[3,-3.371993980608366e-9,3.4957011904022283e-10,0.17410814572443079,0.9847265374673317],[1,-4.124824297807027e-7,1.1360954708354086e-7,20.053523775755238]],[3,"Bip001 R Clavicle",5,[-68],[0,"5eJehhi9dQ67PjqXyX/Qv+",1,0],[1,-0.1726454496383667,-0.07639965415000916,-0.19638846814632416],[3,-0.5747648668301961,0.00022771833056080574,0.8183185133712809,0.00032661268407351376],[1,-179.9571345441001,109.83365309528767,0.01562899512229108]],[3,"Bip001 R UpperArm",27,[-69],[0,"d8vqP6Bh1Yd6AVODS9PxfY",1,0],[1,0.1703396588563919,-3.725290298461914e-9,0],[3,-0.047612440293465036,0.02325474120422388,0.01669431866177769,0.9984555935369609],[1,-5.503163729376755,2.754159650305091,1.783484017539226]],[3,"Bip001 R Forearm",28,[3],[0,"40ZOWByVlXkpjHVQ+xKVu+",1,0],[1,0.3939926326274872,-2.7755575615628914e-17,-1.1920928955078125e-7],[3,2.9337181285632665e-18,6.238109961411321e-17,-0.04697704065960843,0.9988959693836319],[1,6.745938355165255e-16,7.187973623537525e-15,-5.385154265249895]],[3,"Bip001 R Finger0",3,[-70],[0,"91cHZWkj5UVbAoUD4EBc2c",1,0],[1,0.08541321754455566,0.08246207237243652,0.11836837977170944],[3,0.7555287480063603,0.4610720574678397,0.17374031245039961,-0.43174433706529686],[1,-103.96108063250976,-52.09231613681013,33.13978998120794]],[5,"Bip001 R Finger01",30,[[12,"Bip001 R Finger0Nub",-71,[0,"5e12jrCe1Rw6TOxNmUKF7k",1,0],[1,0.11764964461326599,-5.960464477539063e-8,-5.960464477539063e-8],[3,1.4901162970204496e-8,5.587935447692871e-9,1,8.381903171539307e-9],[1,-0.9999999403953552,-1,-1],[1,-179.9999993596698,-179.99999829245252,9.604953615747082e-7]]],[0,"ffUvqzqsFSr7qIX/VZqMwn",1,0],[1,0.09504842758178711,-5.960464477539063e-8,0],[3,-7.443274969542291e-9,-3.2986203031426513e-10,0.04427333226224779,0.9990194552912355],[1,-8.537736462515941e-7,0,5.075009033423652]],[3,"Bip001 R Finger1",3,[-72],[0,"85wqHmhn1UP5JUoUDPnbmY",1,0],[1,0.20723772048950195,0.004992246627807617,0.06328436732292175],[3,-0.0024725419263006906,-0.04336570085472234,-0.06593958854320041,0.9968777624104947],[1,-0.6154603914037755,-5.022332810376871,-7.542002763073425]],[5,"Bip001 R Finger11",32,[[12,"Bip001 R Finger1Nub",-73,[0,"edlPRJ9dNW4KpgBvx1BdZ5",1,0],[1,0.06155133247375488,1.1920928955078125e-7,5.551115123125783e-17],[3,3.7252898543727042e-9,-3.725290298461914e-9,1,7.4505797087454084e-9],[1,-1.0000001192092896,-1,-1],[1,179.99999957311317,-179.99999957311323,8.537735428835669e-7]]],[0,"17QRpXMR5eZoPRN7vp0Y9q",1,0],[1,0.09853017330169678,0,-1.4901161193847656e-8],[3,-4.242715846397363e-11,3.2593527458521102e-9,0.013015947137687247,0.9999152889720753],[1,-9.726060093006845e-9,3.736525589397869e-7,1.4915597921353185]],[3,"Bip001 R Finger2",3,[-74],[0,"3aip+RZzFc+a9W3Ugc9zwI",1,0],[1,0.19293653964996338,0.003072023391723633,-0.07485195994377136],[3,0.09927266543032365,0.08895974343593713,0.2295989475403171,0.9641138030515639],[1,9.765392349751242,8.156580555544465,27.41173230073903]],[5,"Bip001 R Finger21",34,[[12,"Bip001 R Finger2Nub",-75,[0,"66ZD9kvZdQCIEKeybEGzD+",1,0],[1,0.09098845720291138,1.1920928955078125e-7,-7.450580596923828e-9],[3,3.725290298461914e-9,-6.6356733441352844e-9,1,-3.651252978786644e-17],[1,-1,-1,-1],[1,179.99999923960786,-179.99999957311317,-7.016709225559337e-15]]],[0,"12HhUV8jtbLYTkallh3V7A",1,0],[1,0.08448457717895508,0,1.3877787807814457e-17],[3,6.971945221662676e-9,3.3606770595093935e-9,0.1741081023760728,0.9847265451316944],[1,7.661216285619908e-7,2.556214635818408e-7,20.05351873135387]],[5,"Bone003",2,[[6,"Bone004",-76,[0,"f6nvtuFh1f4IF6WkAVlTOV",1,0],[1,0.4347414970397949,1.1920928955078125e-7,-5.236537958808185e-8],[3,-5.311356840658315e-9,6.414646421020435e-8,0.0825180509593185,0.9965895701169419],[1,-0.0000012298706511152948,0.0000074776318078976415,9.466636322503087]]],[0,"61j1e21TFUxZCCMPVXHEmr",1,0],[1,0.4655381441116333,-0.2764425575733185,-4.76837158203125e-7],[3,-0.13620943185909315,0.9906800647394245,7.155529333409738e-7,-2.8183060176004676e-8],[1,-0.00008390563591917031,179.9999917236669,-15.657122563080707]],[5,"Bone005",2,[[6,"Bone006",-77,[0,"5bBBVxSklRvojlhUjijHvI",1,0],[1,0.5124344825744629,0,1.1102230246251565e-16],[3,-0.03386184644084512,-0.08447560099836171,-0.1843631902202039,0.9786355104345086],[1,-5.9821358411891135,-10.966020630044607,-20.80127285038358]]],[0,"9bbfHhq4ZTPbBlawNasw2q",1,0],[1,0.4767826795578003,-0.1922013908624649,-0.2013348639011383],[3,-0.2709854208639068,0.9311308735200691,0.11143164931455753,0.21712942128602028],[1,-21.43510492640459,148.51511578426403,-27.1457511544151]],[5,"Bone005(mirrored)",2,[[6,"Bone006(mirrored)",-78,[0,"b15fJsJ1ZRjKwWSR4v3v91",1,0],[1,0.5124345421791077,-1.1920928955078125e-7,0],[3,0.03386180017774576,-0.08447556730524294,0.18436313702527818,0.978635524964927],[1,5.982128785794693,-10.966014976326116,20.801267416268388]]],[0,"6dpv1wHZpZFrq8yzCIcD3/",1,0],[1,0.4767829179763794,-0.19220198690891266,0.20612061023712158],[3,0.21712901138876808,0.11143029707334981,0.9311310241856973,-0.27098578764646625],[1,-158.56505258599887,-148.51518846081075,-27.14584408431705]]],0,[0,4,1,0,0,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,-8,7,0,4,1,0,1,1,0,-10,8,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,-1,10,0,-2,14,0,-3,5,0,-4,36,0,-5,37,0,-6,38,0,-1,30,0,-2,32,0,-3,34,0,1,3,0,1,3,0,-1,21,0,-2,23,0,-3,25,0,1,4,0,-1,18,0,-2,27,0,-3,6,0,1,6,0,1,6,0,1,6,0,0,7,0,-1,9,0,-1,11,0,-1,12,0,-1,13,0,1,13,0,-1,15,0,-1,16,0,-1,17,0,1,17,0,-1,19,0,-1,20,0,-1,22,0,1,22,0,-1,24,0,1,24,0,-1,26,0,1,26,0,-1,28,0,-1,29,0,-1,31,0,1,31,0,-1,33,0,1,33,0,-1,35,0,1,35,0,1,36,0,1,37,0,1,38,0,9,1,2,1,9,3,1,29,4,1,20,78],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,7],[429,430,431,266,432,181,180,184,182,183,433,434,435,436,266]],[[{"base":"2,2,0,0,0,0","mipmaps":["91e5bqTsBFGZ7CLdzBsBF4"]}],[1],0,[],[],[]],[[[23,"Material #1993693",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[437,4]],[[[18,".bin",3984925195,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":84448,"length":25968,"count":6492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":84448,"count":1508,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]]},"minPosition",8,[1,-1.3154093027114868,-0.5464330911636353,0.014661970548331738],"maxPosition",8,[1,1.3154093027114868,0.9787709712982178,3.061833381652832]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["ab99yYPkBJhJksYU84RzCO@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_06",[-2],[0,"65QBm1K7dcNrf7FFX/++V/",-1,0]],[27,"Plane022",1,[[30,-3,[1,"c9Z+nIXpJQ64OH6vhUBJzI"],[0],[7],1]],[0,"3fTSqLqqxYV5Xzhwd/t3Q1",1,0],[1,0.24888810515403748,0.24888810515403748,0.24888810515403748]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[438,127]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[18,".bin",861885458,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.0546114444732666,-0.7973817586898804,-0.0000016059315157690435],"maxPosition",8,[1,1.0546116828918457,0.7973816990852356,-0.000001478092030993139]]],-1],0,0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[267,267,4]],[[[156,"monster_SP_001_bomb_fire",".plist"],-1],0,0,[],[],[]],[[{"name":"roll_light0018","rect":{"x":2,"y":830,"width":20,"height":97},"offset":{"x":-40,"y":-1.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Monster_Hurt_05",".mp3",0.653061],-1],0,0,[],[],[]],[[[31,"Giant_Attack",".mp3",2.037551],-1],0,0,[],[],[]],[[[19],[32,"s1_13",[-2],[0,"5eUvU7DGZYSbzl6XCRZoha",-1,0]],[27,"Plane012",1,[[30,-3,[1,"7dwNey0aBWJ7oOwdQCB6tD"],[0],[7],1]],[0,"f8L5CGzUBcSpXkOYZ0er21",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[439,132]],[[[18,".bin",2264304341,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.103311538696289,-1.0982872247695923,-8.79272135989595e-7],"maxPosition",8,[1,1.103311538696289,1.0982872247695923,-8.26220912131248e-7]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["afI7KemC1Guos0LzoHq9Ls@ba695"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[268,268,4]],[[[31,"Shoot_Normal",".mp3",0.731429],-1],0,0,[],[],[]],[[[18,".bin",3236689243,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":2368,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":2368,"count":74,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.283050537109375,-2.210353136062622,-0.6603227853775024],"maxPosition",8,[1,3.262421131134033,2.207489252090454,0.040383338928222656]]],-1],0,0,[],[],[]],[[[19],[32,"Boss_floor_l",[-2],[0,"24y6Yeq8tfHoOnoH05ujJx",-1,0]],[44,"Boss_floor_l",1,[[30,-3,[1,"e00u+xDnpS66KiAN82hmLi"],[0],[7],1]],[0,"30H7jTLsxTo7LYJxnGD6u2",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[440,441]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[442,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b0/JnvPPRL9a5UhgGLzFbp"]}],[1],0,[],[],[]],[[{"name":"a_effect_01","rect":{"x":659,"y":96,"width":30,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":30},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[19],[123,"Queen@Cannon_Idle",[[[55,"Particle View 001",-4,[0,"75rktxkOtS7bCYO6vd9TxG",-3,0]],[55,"Particle View 001",-6,[0,"d7DA/jNutUKLs08U8YGcZm",-5,0]],[10,"Particle View 001",-8,[0,"e95IVBnPBZcp8UMRIyGPfY",-7,0],[1,-974.6693115234375,0,-770.4366455078125]],[10,"Particle View 001",-10,[0,"34ThA6yWNdL7eapNmpY1Na",-9,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-12,[0,"e0hW2cVdtWsKhqvwc0H6zu",-11,0],[1,-2.51513671875,0,-0.122467041015625]],[10,"Particle View 001",-14,[0,"aceUlQoxZSeryBJJl05R39",-13,0],[1,3.418828248977661,0,0]],[55,"Particle View 001",-16,[0,"4eU6cJcideooj7bBvsevcN",-15,0]],[10,"Particle View 001",-18,[0,"2dxCeYyL1a85hVQNb04Mnv",-17,0],[1,-974.6693115234375,0,-770.4366455078125]],-19,[6,"gun",-21,[0,"9bB3GzZ8FX7oE3X7sjFb0X",-20,0],[1,-1.2461202144622803,0.988793134689331,-0.29730814695358276],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[6,"Text001",-23,[0,"baKxNm7/NTP7PrVNHGQSvN",-22,0],[1,21.825597763061523,0,0.5448083877563477],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[10,"Particle View 001",-25,[0,"31aPBBYwdTXI6nvx0O5DLC",-24,0],[1,-977.1843872070312,0,-770.55908203125]],[10,"Particle View 001",-27,[0,"834HIcsfZVn5JSCXCeKsjt",-26,0],[1,-2.51513671875,0,-0.122467041015625]],-28],4,4,4,4,4,4,4,4,1,4,4,4,4,1],[[63,-2,[1,"1f3mJ9Y55V0ImQYgT+uToU"],[3],4]],[0,"f7hNzl70RXUaH28uxlHwx8",-1,0]],[20,"Bip001 Spine",[-29,-30,-31,-32,-33,-34],[0,"6eciXQPcRf1o/ZAjU9lwPz",1,0],[1,0.09832262992858887,-0.00042510777711868286,0.00011793244630098343],[3,-0.13561834610839704,-0.13315269562988086,0.0024363007784324957,0.9817698754208322],[1,-15.418397647059559,-15.12989315514978,2.3440323024072107]],[43,"Bip001 R Hand",[[-35,-36,-37,[12,"Axe01",-38,[0,"83JN9xA5xRIKIhufgZ7x71",1,0],[1,0.15838634967803955,0.10607898235321045,-2.384185791015625e-7],[3,0.13905256002511174,0.1390527537402143,0.693299616770313,0.693299616770313],[1,0.010000001639127731,0.009999996051192284,0.010000000707805157],[1,0,22.68225880720928,90]],[12,"hammer",-39,[0,"e0Un4pshZRVbckLk2k1xMC",1,0],[1,0.16534423828125,0.09457814693450928,-0.03485417366027832],[3,0.1037332021629504,0.052986609586578186,0.005534035505063469,0.9931773338254194],[1,0.010000000707805157,0.009999995119869709,0.009999997913837433],[1,11.859598294143893,5.976885546716282,1.2597777837424924]]],1,1,1,4,4],[0,"8f9GoQ1cBZXaGl1cQFu5LT",1,0],[1,0.351168155670166,-5.960464477539063e-8,1.1920928955078125e-7],[3,0.612802256977328,-0.17791174059020548,-0.042681387853688066,0.7687646619964651],[1,75.17830140288902,-13.3389593357438,-16.479562722311194]],[43,"Bip001 L Hand",[[-40,-41,-42,[12,"Axe02",-43,[0,"70sTViBwNdcLwoRPCWZnuk",1,0],[1,0.05137789249420166,0.03893786668777466,0.164404034614563],[3,0.977912102047815,-0.2090165559672814,1.124350471785386e-9,1.2144791516913189e-8],[1,0.009999998845160007,0.010000002570450306,0.009999999776482582],[1,179.99999847924147,-4.5679441634078775e-7,-24.129452292639858]]],1,1,1,4],[0,"9fmDy/AhFetqvz4SsOQ9lP",1,0],[1,0.351168155670166,0,-2.220446049250313e-16],[3,-0.7499124960287289,-0.16222131158130187,-0.15254828245310592,0.6229321920477471],[1,-99.87637006000219,-25.56366091686405,3.0523926555228487]],[93,"Bip001 Neck",2,[-44,-45,-46],[0,"aemaXmZS9Wi7qtncj2nvQ/",1,0],[1,0.5543079376220703,-0.11576654016971588,5.960464477539063e-8]],[5,"Bip001 Head",5,[[10,"Bip001 HeadNub",-47,[0,"fdSinhZtlazp2vSmfSSC7B",1,0],[1,0.6926820278167725,1.4901161193847656e-8,-2.9802322387695312e-8]],[6,"Bone002",-48,[0,"2dKSU7rIFcKaK8pgl/7mSj",1,0],[1,0.8220129013061523,0.12468266487121582,0.1734778881072998],[3,0.20846727680880192,0.6665173233843568,0.02529570297165083,0.715301460602203],[1,16.17743143799568,83.33263785668862,18.30541650280896]],[6,"Bone001",-49,[0,"a5bolNAH5f1KAE2hsFFw0/",1,0],[1,0.9148128032684326,-0.1821257621049881,0.23440569639205933],[3,-0.694639727363996,-0.1321915806576944,-0.13219095480893778,0.6946413366893701],[1,-89.9998624174352,-21.54929901036495,0.000025439458099341306]]],[0,"f11nBqoRJSmKA06OmChJod",1,0],[1,0.21116507053375244,-1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.16085119686755367,-0.010247585453703377,-0.029884288349998105,0.9864729133475784],[1,18.50297084191076,-0.608761577968074,-3.56935757836684]],[3,"Bip001",1,[-50],[0,"22itZmcdhRxIW+vrZtx/tr",1,0],[1,8.570366105686844e-8,0.9804768562316895,-0.09285487234592438],[3,0.45580028794172206,0.540597907424958,0.540597907424958,-0.45580028794172206],[1,-90.00000000000003,-99.7287746072152,0]],[54,"Bip001 Pelvis",7,[2],[0,"02GU4RfENZ36Hq00z2yzL4",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 L Thigh",2,[-51],[0,"102PGBhuVS4qaZygDBtrL6",1,0],[1,-0.021422505378723145,-0.07779741287231445,0.28698810935020447],[3,0.18964384126483788,0.8651524613511308,0.412054411484135,-0.21391024768547198],[1,-53.459002092910325,-147.81912210469616,8.734520088991712]],[3,"Bip001 L Calf",9,[-52],[0,"dbA8duOVZaUY25ePWIr9kL",1,0],[1,0.49940237402915955,-5.960464477539063e-8,-2.9802322387695312e-8],[3,5.08259182903796e-17,-2.6283199484837026e-17,-0.23018961001964997,0.9731457976269545],[1,5.564185646588463e-15,-1.7787828764396486e-15,-26.61647026937319]],[3,"Bip001 L Foot",10,[-53],[0,"4c9+e4oulQvK63TtYdbmrK",1,0],[1,0.4148826003074646,1.4901161193847656e-8,-2.9802322387695312e-8],[3,0.007560265791630779,-0.015713587560148172,0.059123114341569784,0.998098383375959],[1,0.9780097306367616,-1.8617255203016585,6.76421495422629]],[5,"Bip001 L Toe0",11,[[12,"Bip001 L Toe0Nub",-54,[0,"8bZTGLSYVckaTQOywfN8XZ",1,0],[1,0.11261016130447388,-1.734723475976807e-18,5.551115123125783e-17],[3,1.0205723798614036e-13,-1.4210854715202004e-14,1,-6.123234262925839e-17],[1,-1.0000001192092896,-1,-1.0000001192092896],[1,179.99999999999838,-179.99999999998832,-7.016709604877195e-15]]],[0,"69nS5ShqVQSICm04xOVgsi",1,0],[1,0.0845489650964737,0.18106068670749664,2.9802322387695312e-8],[3,2.8472948575454756e-7,1.7936293113516928e-7,0.7071070792096736,0.7071064831632157],[1,0,0.000046142407756426714,90]],[3,"Bip001 R Thigh",2,[-55],[0,"02WP8jvzxR9rRcnzNXLdKT",1,0],[1,-0.16827428340911865,0.07251804322004318,-0.2354380488395691],[3,0.022519320445838417,0.9975676027462722,-0.00020987840435860808,-0.06596752313653047],[1,-0.1463871518331418,-172.4299712092421,2.576702181656095]],[3,"Bip001 R Calf",13,[-56],[0,"9dvXus7NNWB69k+O0whT1t",1,0],[1,0.4994024634361267,-1.3877787807814457e-17,5.551115123125783e-17],[3,8.527968900637594e-18,4.075058883749535e-17,-0.2048349786371264,0.9787965220242294],[1,2.0882608398423004e-15,5.207846836336099e-15,-23.639678056352047]],[3,"Bip001 R Foot",14,[-57],[0,"f5FF2xOrVUnb926a8xY6A1",1,0],[1,0.4148825407028198,-1.4901161193847656e-8,0],[3,-0.010317276192047736,0.06582679574068374,0.16695225174239745,0.9837110004531995],[1,-2.5642430999182757,8.088009344332383,19.093289663536094]],[5,"Bip001 R Toe0",15,[[10,"Bip001 R Toe0Nub",-58,[0,"45Ls7CXihT5JVWqAUJd98i",1,0],[1,0.11261016130447388,9.313225746154785e-10,2.9802322387695312e-8]]],[0,"f29B9GDmdXaYWc3qJAXcRr",1,0],[1,0.0845489576458931,0.1810607612133026,-2.9802322387695312e-8],[3,1.5116544008790577e-7,-5.956879180841961e-8,0.7071067215818898,0.7071068407911814],[1,0,0.000024497406122061066,90]],[3,"Bip001 L Clavicle",5,[-59],[0,"0esVY2WXBdXLRjjaQNrbdE",1,0],[1,-0.08568155765533447,0.03203679621219635,0.09742309153079987],[3,0.5752172397408709,-0.16957334959811965,0.7907380361775683,-0.12289574587026961],[1,172.08749430458533,-109.53894422823727,-22.91964099565828]],[3,"Bip001 L UpperArm",17,[-60],[0,"91rUF/GQVcH6PS5pAF1bQB",1,0],[1,0.1703396737575531,2.9802322387695312e-8,-1.1920928955078125e-7],[3,0.1763767142970046,0.09378930872856892,0.012103856472216467,0.9797695223268122],[1,20.114777173280054,10.358369279630233,3.2562950329962614]],[3,"Bip001 L Forearm",18,[4],[0,"9bHIUSZIZVP5gXjJjNwHky",1,0],[1,0.5310860872268677,0,-1.1920928955078125e-7],[3,2.0687733481406908e-20,3.4693846522485848e-18,-0.005962834134394834,0.9999822221465168],[1,4.741532095345928e-18,3.975975375628089e-16,-0.6832945088494221]],[3,"Bip001 L Finger0",4,[-61],[0,"58RmaTUpNVRpgFh5BWBUzC",1,0],[1,0.12257134914398193,0.05296057462692261,-0.07330775260925293],[3,0.8781912923932006,0.3196219504270003,-0.3074812591451522,0.1791009158114835],[1,145.05770005510502,47.17739394679636,26.823145483727156]],[5,"Bip001 L Finger01",20,[[10,"Bip001 L Finger0Nub",-62,[0,"11jPvzZc5Zu5iyc1GRmD/8",1,0],[1,0.1176496297121048,2.9802322387695312e-8,0]]],[0,"1b88yUcSJekI8seqEZFoGY",1,0],[1,0.0950484573841095,-1.1920928955078125e-7,2.7755575615628914e-17],[3,-0.628641108558933,-0.13250153835669842,-0.1414574637750866,0.7531556843742362],[1,-80.22474866841188,-22.200509776108774,-2.664478222095746]],[3,"Bip001 L Finger1",4,[-63],[0,"e8S9ny/TNXWKsAVW2e/K3D",1,0],[1,0.20349150896072388,0.005485415458679199,-0.0687604546546936],[3,-0.07252247012074971,-0.09263171415993805,-0.04575983886684383,0.992000954639791],[1,-8.790397684990882,-11.010621541508472,-4.436365873891449]],[5,"Bip001 L Finger11",22,[[10,"Bip001 L Finger1Nub",-64,[0,"a8UXnxrDZWT6vVPvmypmHS",1,0],[1,0.12315726280212402,5.960464477539063e-8,2.7755575615628914e-17]]],[0,"74H9fYjIRVqbKRZUAfRmxb",1,0],[1,0.12139761447906494,0,-7.450580596923828e-9],[3,1.121796268493872e-8,-1.9129645305184788e-10,-0.10516757636238037,0.9944545142348458],[1,0.000001304915121097995,1.1595683885233938e-7,-12.073642867803345]],[3,"Bip001 L Finger2",4,[-65],[0,"35MfQ/Hp5bS6HSbx7naAB4",1,0],[1,0.1929364800453186,0.0030515193939208984,0.04918539524078369],[3,-0.06814929942677685,-0.11456252802174566,-0.06902782720013878,0.9886689330776677],[1,-8.724436728342061,-13.749652453282463,-6.942697756334577]],[5,"Bip001 L Finger21",24,[[10,"Bip001 L Finger2Nub",-66,[0,"e6PfBo5rJfPp7Wna+JqgNM",1,0],[1,0.11981213092803955,-2.220446049250313e-16,1.4901161193847656e-8]]],[0,"05xAbcqYhdA7Q+R1E4l8cI",1,0],[1,0.09083735942840576,0,-1.4901161193847656e-8],[3,-7.299723737106817e-9,-7.598442556401945e-9,0.020046663854511402,0.9997990454427852],[1,-8.195223298715811e-7,-8.544603977515415e-7,2.2973323528922256]],[3,"Bip001 R Clavicle",5,[-67],[0,"b3X1t8Y6pU8oydzwLK0Mw3",1,0],[1,-0.08568155765533447,0.03203733265399933,-0.09742364287376404],[3,0.7419154129220117,-0.00029453981873919885,-0.670493371677308,-0.0002680519566891448],[1,-179.95458061376746,84.21031975653288,-0.004445759562129794]],[3,"Bip001 R UpperArm",26,[-68],[0,"9e2ulQqDVYaYbfXCRxYZw3",1,0],[1,0.17033976316452026,-2.7755575615628914e-17,-2.384185791015625e-7],[3,0.33027151486609335,0.05135608504848214,-0.08661564507619904,0.9384993388514361],[1,39.35217298090638,8.91076066941571,-7.391850669757464]],[3,"Bip001 R Forearm",27,[3],[0,"a3XQet1yRVprTmOiqcse9y",1,0],[1,0.5310859680175781,5.960464477539063e-8,-1.1920928955078125e-7],[3,2.023164439043025e-19,1.3400663739957159e-18,-0.14928318233190227,0.9887944839413598],[1,4.798675491473711e-17,1.625453146112951e-16,-17.170776443445536]],[3,"Bip001 R Finger0",3,[-69],[0,"daMHWp8XxaOL3J/Ds98zKz",1,0],[1,0.12257134914398193,0.05296063423156738,0.07330769300460815],[3,0.7799380862624655,0.2138767199910593,0.3929392617306288,-0.43766661608317525],[1,-121.6976939764018,-53.14850782709409,-0.5919673003340226]],[5,"Bip001 R Finger01",29,[[12,"Bip001 R Finger0Nub",-70,[0,"7crO1ulTpXBJ0EEAno3YqK",1,0],[1,0.1176496148109436,-4.440892098500626e-16,1.1102230246251565e-16],[3,6.938894731087841e-18,2.081668336608291e-17,1,1.4901162970204496e-8],[1,-0.9999999403953552,-0.9999999403953552,-0.9999999403953552],[1,-180,-180,0.0000017075474960586878]]],[0,"98UkHKuQdUHq6XZg9zgXhH",1,0],[1,0.09504848718643188,4.440892098500626e-16,5.960464477539063e-8],[3,-1.4895973589470229e-8,3.931948720429685e-10,-0.026386861193428975,0.9996518061587036],[1,-0.000001707547394387378,-2.68934039623271e-15,-3.024062556762785]],[3,"Bip001 R Finger1",3,[-71],[0,"3f0gNCLVdfW7etg8lQV3gA",1,0],[1,0.20349156856536865,0.005485415458679199,0.06876033544540405],[3,-0.050006837784108846,0.0802471059834462,0.046605528455372455,0.9944282995136002],[1,-6.160945999044759,9.488700781032874,4.856813370558287]],[5,"Bip001 R Finger11",31,[[12,"Bip001 R Finger1Nub",-72,[0,"34evQNJJxRDpSskHKT9eNj",1,0],[1,0.12315738201141357,-1.1920928955078125e-7,-2.9802322387695312e-8],[3,2.9103826015841605e-9,2.3283062144940914e-9,1,-6.80085995898479e-17],[1,-1.0000001192092896,-1.0000001192092896,-1.0000001192092896],[1,-179.99999973319575,-179.99999966649472,-7.016709038945616e-15]]],[0,"01Ll8Hjz1R/LKKmWzCKcdc",1,0],[1,0.12139749526977539,1.1920928955078125e-7,2.9802322387695312e-8],[3,-9.811414872469271e-9,-1.6383877722784955e-10,0.09967269085415921,0.9950202785360162],[1,-0.0000011394758672531113,9.527452554082104e-8,11.440645759010083]],[3,"Bip001 R Finger2",3,[-73],[0,"64kgzY7ztVmIeJQ7ETgzxF",1,0],[1,0.19293653964996338,0.0030516386032104492,-0.04918545484542847],[3,0.07520547445978387,0.11005923804516107,-0.006837527675822342,0.9910521423958882],[1,8.66000886896155,12.660775992771356,0.17196904429900525]],[5,"Bip001 R Finger21",33,[[12,"Bip001 R Finger2Nub",-74,[0,"9cQZnP8iFaj538y3UR6KS0",1,0],[1,0.11981201171875,-2.384185791015625e-7,-1.1102230246251565e-16],[3,7.4505797087454084e-9,7.450580596923828e-9,1,1.4901159417490817e-8],[1,-1.0000001192092896,-1,-1],[1,-179.99999914622637,-179.9999991462265,0.0000017075470953087969]]],[0,"6duZ4pSqZXJZKmVOB1/668",1,0],[1,0.09083724021911621,1.1920928955078125e-7,-1.1920928955078125e-7],[3,7.425020522853513e-9,6.166102565785219e-10,0.08276003515004678,0.996569504140059],[1,8.53773543948039e-7,2.112784398315672e-15,9.494460840773806]],[5,"Bone003",2,[[6,"Bone004",-75,[0,"64Gr42soJR654V9hKAoQxk",1,0],[1,0.43474143743515015,2.220446049250313e-16,-5.21540641784668e-8],[3,-0.003042208923754976,-0.01332994719910931,-0.22248039858942797,0.9748412843719856],[1,-0.7543290695881619,-1.7389090487527268,-25.701651048245317]]],[0,"64GdqpH8BReJkCYseLkFJ9",1,0],[1,0.4550154209136963,-0.230758935213089,-4.172325134277344e-7],[3,-0.25061320727031206,0.961246112464032,-0.028984249886084956,-0.11117034169693966],[1,7.27721732295621,-164.96327342056045,-28.382633569121147]],[5,"Bone005",2,[[6,"Bone006",-76,[0,"9dhZgY799Yq5V/S8uCBojl",1,0],[1,0.5124344825744629,0,0],[3,-0.09853565501024582,0.19447375455292312,-0.1525274038415705,0.9639533570454235],[1,-7.962095110542922,21.4480994015419,-19.41352668487176]]],[0,"5bb51rEidd+a9JrZGPw20q",1,0],[1,0.4767824411392212,-0.1922014206647873,-0.20133483409881592],[3,-0.14430443585851757,0.9736476895943419,0.13424065377294878,0.11474255188798316],[1,-17.70985595353473,164.288522451603,-14.489177672464916]],[5,"Bone005(mirrored)",2,[[6,"Bone006(mirrored)",-77,[0,"40hapkgdxVsYQmqMIvXhG1",1,0],[1,0.5124344825744629,-1.1920928955078125e-7,-4.470348358154297e-8],[3,0.0023879373292956703,-0.17823875978636075,-0.18754712751274874,0.9659458148503198],[1,-3.8304605041277346,-21.629929403880105,-21.29512594682061]]],[0,"11cycKCiJYTrpYYlSspm+E",1,0],[1,0.4767824411392212,-0.19220195710659027,0.20612064003944397],[3,-0.11269551391943791,0.0014923430117038709,-0.758532992624369,0.6418139864127986],[1,-141.04804680006447,-131.72458737132982,-76.90873965312838]],[28,"Queen",1,[[64,-78,[1,"d9+d7gOKNcU4Itc36pzG5/"],[0],[7],1,1,2]],[0,"53Qn89NCFUkpuAq+vVcH9O",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.8311343193054199,0.8311343193054199,0.8311343193054199],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,-9,7,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,4,1,0,1,1,0,-14,38,0,-1,9,0,-2,13,0,-3,5,0,-4,35,0,-5,36,0,-6,37,0,-1,29,0,-2,31,0,-3,33,0,1,3,0,1,3,0,-1,20,0,-2,22,0,-3,24,0,1,4,0,-1,17,0,-2,26,0,-3,6,0,1,6,0,1,6,0,1,6,0,-1,8,0,-1,10,0,-1,11,0,-1,12,0,1,12,0,-1,14,0,-1,15,0,-1,16,0,1,16,0,-1,18,0,-1,19,0,-1,21,0,1,21,0,-1,23,0,1,23,0,-1,25,0,1,25,0,-1,27,0,-1,28,0,-1,30,0,1,30,0,-1,32,0,1,32,0,-1,34,0,1,34,0,1,35,0,1,36,0,1,37,0,0,38,0,9,1,2,1,8,3,1,28,4,1,19,78],[0,0,0,0,0],[-1,6,13,-1,7],[443,178,179,57,57]],[[{"base":"2,2,0,0,0,0","mipmaps":["65Yrylyi9Pj5G7VkB3P9iQ"]}],[1],0,[],[],[]],[[[65,"Skin-0",3373753807,["Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 L Thigh","Bip001","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 Head/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005(mirrored)","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005(mirrored)/Bone006(mirrored)","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005","Bip001/Bip001 Pelvis/Bip001 Spine/Bone005/Bone006","Bip001/Bip001 Pelvis/Bip001 Spine/Bone003/Bone004","Bip001/Bip001 Pelvis/Bip001 Spine/Bone003","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21"],[[[7,3.633003586855921e-8,0.2246343344449997,-0.8002023100852966,0,-5.089229711349238e-17,-0.8002023100852966,-0.2246343344449997,0,-0.8311343193054199,9.819078883310794e-9,-3.497795475482235e-8,0,0.09520213305950165,-0.13656407594680786,0.24150416254997253,1],[7,3.633003586855921e-8,-0.2246321588754654,-0.8002029657363892,0,-5.089229711349238e-17,-0.8002029657363892,0.2246321588754654,0,-0.8311343193054199,-9.818983848219887e-9,-3.497798317653178e-8,0,0.09520216286182404,-0.13656412065029144,-0.2415042668581009,1],[7,-0.01257274392992258,0.23498685657978058,-0.7971245050430298,0,-0.0024713915772736073,-0.7972227931022644,-0.2349768429994583,0,-0.8310354948043823,-0.0011842814274132252,0.012758494354784489,0,0.5139521956443787,-0.13954700529575348,0.23822109401226044,1],[7,-0.009738422930240631,0.23512138426303864,-0.7971245050430298,0,-0.012083906680345535,-0.7971349358558655,-0.2349768728017807,0,-0.830989420413971,0.008836205117404461,0.012758495286107063,0,1.0116345882415771,-0.14573395252227783,0.23822109401226044,1],[7,0.000001139407800110348,0.8311343789100647,-5.089230042221483e-17,0,-0.8311343789100647,0.000001139407800110348,5.0892230939043374e-17,0,5.089230373093728e-17,5.0892230939043374e-17,0.8311343193054199,0,-0.05771506950259209,-5.6182407901297915e-14,-1.0093507766723633,1],[7,0.012572606094181538,-0.2349846512079239,-0.7971251010894775,0,-0.0024713571183383465,-0.7972233891487122,0.23497463762760162,0,-0.8310354948043823,-0.001184240449219942,-0.012758354656398296,0,0.5139521360397339,-0.13954703509807587,-0.23822122812271118,1],[7,0.009738312102854252,-0.23511914908885956,-0.7971251010894775,0,-0.012083880603313446,-0.797135591506958,0.23497462272644043,0,-0.830989420413971,0.008836247026920319,-0.012758355587720871,0,1.0116345882415771,-0.14573398232460022,-0.23822122812271118,1],[7,9.072810280841281e-10,-0.000001165826802207448,0.8311343789100647,0,-0.0006618471234105527,-0.8311340808868408,-0.0000011658257790259086,0,0.831134021282196,-0.0006618471816182137,-1.8356496322979865e-9,0,-1.1077327728271484,-0.0563916340470314,-1.5640792128124303e-7,1],[7,0.613937258720398,-0.23246373236179352,0.5097312331199646,0,0.07299608737230301,0.7829528450965881,0.26914796233177185,0,-0.5554609894752502,-0.15404438972473145,0.5987634658813477,0,0.8222797513008118,0.32895317673683167,-1.260482907295227,1],[7,0.7818328142166138,-0.0000011517342954903143,0.28199607133865356,0,0.000001084146447283274,0.8311343789100647,3.88745405643931e-7,0,-0.28199607133865356,2.1550350393084727e-9,0.781832754611969,0,0.4432067573070526,-0.02608255296945572,-1.5159270763397217,1],[7,9.072810280841281e-10,-0.000001165826802207448,0.8311343789100647,0,-0.0006618471234105527,-0.8311340808868408,-0.0000011658257790259086,0,0.831134021282196,-0.0006618471816182137,-1.8356496322979865e-9,0,-1.6620408296585083,0.05937489867210388,-1.5594156366205425e-7,1],[7,-0.6139374375343323,0.2324615865945816,0.5097319483757019,0,0.0729944035410881,0.7829535603523254,-0.26914656162261963,0,-0.5554609894752502,-0.15404438972473145,-0.5987634658813477,0,0.8222798109054565,0.32895317673683167,1.2604830265045166,1],[7,-0.7818328142166138,-0.0000011270814184172195,0.28199607133865356,0,-0.0000010594934565233416,0.8311343789100647,3.8443528183051967e-7,0,-0.28199607133865356,2.1550350393084727e-9,-0.781832754611969,0,0.443206787109375,-0.02608255110681057,1.5159270763397217,1],[7,0.0000011162870805492275,-0.0000011658265748337726,0.8311343789100647,0,5.089230042221483e-17,-0.8311343789100647,-0.0000011658265748337726,0,0.8311343193054199,1.5658594212930588e-12,-0.0000011162871942360653,0,-1.873252511024475,0.05788321793079376,0.000002355865717618144,1],[7,-0.7837391495704651,0.27589720487594604,0.02043961174786091,0,-0.2610432505607605,-0.7578306198120117,0.21984785795211792,0,0.09161598980426788,0.2008914053440094,0.8012697696685791,0,-0.1544940173625946,-0.7699595093727112,-2.5850155353546143,1],[7,0.386264830827713,0.07466545701026917,0.7321262955665588,0,0.3797124922275543,0.6880621314048767,-0.2705053687095642,0,-0.6303984522819519,0.4601953327655792,0.2856611907482147,0,1.0473560094833374,-1.0092846155166626,-0.6836422085762024,1],[7,0.5112016201019287,-0.046455997973680496,0.6536810994148254,0,0.5447270274162292,0.491016685962677,-0.39110007882118225,0,-0.3643206059932709,0.668975830078125,0.3324545919895172,0,0.010928218252956867,-1.1584604978561401,-0.6557535529136658,1],[7,-0.3862649202346802,0.07466553151607513,-0.7321262359619141,0,0.37971246242523193,-0.6880621314048767,-0.27050548791885376,0,-0.6303983926773071,-0.4601954221725464,0.2856612205505371,0,1.049580454826355,1.0088547468185425,-0.6794257164001465,1],[7,-0.5112017393112183,-0.04645600542426109,-0.6536810398101807,0,0.5447270274162292,-0.49101659655570984,-0.3911002278327942,0,-0.36432045698165894,-0.6689758896827698,0.3324545919895172,0,0.013872062787413597,1.1587282419204712,-0.6519888639450073,1],[7,1.0232169245227851e-7,4.141577107930061e-7,-0.8311339020729065,0,0.6806834936141968,-0.4769211411476135,-1.5385235485609883e-7,0,-0.4769212305545807,-0.6806833744049072,-3.9790174355402996e-7,0,0.36333465576171875,1.1907044649124146,7.528313972215983e-7,1],[7,1.2384855097025138e-7,3.869611191475997e-7,-0.8311339020729065,0,0.40637555718421936,-0.7250121831893921,-2.7699798010871746e-7,0,-0.7250120639801025,-0.40637561678886414,-2.9723634042966296e-7,0,1.2786848545074463,0.9151771664619446,6.142495863059594e-7,1],[7,0.6538439989089966,-0.05870511382818222,0.5097312927246094,0,-0.14035733044147491,0.7737206220626831,0.26914796233177185,0,-0.4935302734375,-0.29781627655029297,0.5987634062767029,0,0.19194746017456055,0.39517122507095337,-1.260482907295227,1],[7,0.7848858833312988,-0.1902487576007843,0.19632595777511597,0,-0.20136834681034088,0.0013678987743332982,0.8063704967498779,0,-0.1849033534526825,-0.8090659976005554,-0.044801950454711914,0,-0.6589382290840149,1.1417585611343384,-0.18032370507717133,1],[7,0.7591266632080078,-0.33825546503067017,-0.009711596183478832,0,-0.042062513530254364,-0.11798836290836334,0.8216410875320435,0,-0.33577051758766174,-0.7499641180038452,-0.12488475441932678,0,-0.6553815007209778,1.2756378650665283,0.1350618600845337,1],[7,0.8129960894584656,-0.08539173007011414,0.15010003745555878,0,-0.1534453183412552,-0.02579711563885212,0.8164395093917847,0,-0.07922308892011642,-0.8263335227966309,-0.040999289602041245,0,-1.0092308521270752,1.0128997564315796,-0.05324682220816612,1],[7,0.17007650434970856,0.7996466159820557,0.14974485337734222,0,-0.6355851888656616,0.22609619796276093,-0.48548558354377747,0,-0.507828414440155,-0.015167114324867725,0.657772421836853,0,0.26387882232666016,-0.9343551993370056,-0.9300747513771057,1],[7,0.8104978799819946,-0.10652484744787216,0.15010005235671997,0,-0.1540648341178894,-0.021794235333800316,0.8164395093917847,0,-0.10070547461509705,-0.8239913582801819,-0.040999289602041245,0,-1.1038798093795776,1.0419864654541016,-0.05324685201048851,1],[7,0.24014636874198914,0.7814668416976929,0.14974483847618103,0,-0.6130931377410889,0.2814335823059082,-0.4854855537414551,0,-0.5071792602539062,0.029814748093485832,0.6577724814414978,0,0.08551554381847382,-0.9456270337104797,-0.9300747513771057,1],[7,0.5971157550811768,-0.5780508518218994,-0.009711581282317638,0,-0.0799703374505043,-0.09641189873218536,0.8216410875320435,0,-0.57257479429245,-0.5893608927726746,-0.12488475441932678,0,-0.26356399059295654,1.4541763067245483,0.1350618451833725,1],[7,-0.6538436412811279,0.0587029866874218,0.5097320675849915,0,-0.14035911858081818,0.7737208008766174,-0.26914653182029724,0,-0.4935303032398224,-0.2978162467479706,-0.5987634062767029,0,0.19194753468036652,0.3951711654663086,1.260482907295227,1],[7,-0.7848854064941406,0.1902487576007843,0.19632814824581146,0,-0.201370507478714,0.0013684227596968412,-0.806369960308075,0,-0.1849033683538437,-0.8090659976005554,0.044801946729421616,0,-0.6589382886886597,1.1417585611343384,0.18032371997833252,1],[7,-0.7591265439987183,0.33825579285621643,-0.009709368459880352,0,-0.042064566165208817,-0.11798743158578873,-0.8216410279273987,0,-0.33577054738998413,-0.7499641180038452,0.1248847171664238,0,-0.655381441116333,1.2756378650665283,-0.1350618451833725,1],[7,-0.8129957318305969,0.0853918045759201,0.15010225772857666,0,-0.15344755351543427,-0.025796879082918167,-0.8164390921592712,0,-0.07922310382127762,-0.8263335227966309,0.04099928215146065,0,-1.0092309713363647,1.0128997564315796,0.053246837109327316,1],[7,-0.17007476091384888,-0.7996472120285034,0.14974351227283478,0,-0.6355856657028198,0.22609399259090424,0.4854860007762909,0,-0.5078283548355103,-0.0151671152561903,-0.6577724814414978,0,0.26387882232666016,-0.9343552589416504,0.9300747513771057,1],[7,-0.8104975819587708,0.10652491450309753,0.15010225772857666,0,-0.1540670543909073,-0.021793941035866737,-0.8164390325546265,0,-0.10070548951625824,-0.8239913582801819,0.04099928215146065,0,-1.1038799285888672,1.0419864654541016,0.053246837109327316,1],[7,-0.24014467000961304,-0.781467616558075,0.14974349737167358,0,-0.6130937933921814,0.2814314365386963,0.4854859709739685,0,-0.5071792006492615,0.029814748093485832,-0.6577724814414978,0,0.08551554381847382,-0.945626974105835,0.9300746917724609,1],[7,-0.5971155762672424,0.5780510902404785,-0.009709326550364494,0,-0.07997196167707443,-0.09641030430793762,-0.8216410279273987,0,-0.5725747346878052,-0.5893609523773193,0.1248847097158432,0,-0.26356399059295654,1.4541763067245483,-0.13506178557872772,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[18,".bin",2176320531,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":108024,"length":32760,"count":8190,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":108024,"count":1929,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]]},"minPosition",8,[1,-1.621816635131836,-0.9238167405128479,0.015241265296936035],"maxPosition",8,[1,1.621816635131836,1.2445253133773804,3.4296600818634033]]],-1],0,0,[],[],[]],[[[23,"Material #1993696",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[444,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["b3mJlTcT5FO6HX/Hod13Kz@ba695"]}],[1],0,[],[],[]],[[[19],[32,"s1_12",[-2],[0,"2fnu3+Hqldtq1Efup0ml7w",-1,0]],[27,"Plane017",1,[[30,-3,[1,"aa/CMyve1bVpFJdARfgNKX"],[0],[7],1]],[0,"9cnvLdTrFRHYGeZd+RHzOf",1,0],[1,0.06396088749170303,0.06396088749170303,0.06396088749170303]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[445,133]],[[[18,".bin",3252020484,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-3.10798978805542,-2.107180595397949,-2.295211665170882e-8],"maxPosition",8,[1,3.10798978805542,2.107180118560791,1.6453536488825193e-7]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[269,269,4]],[[[31,"Male_Hurt_02",".mp3",0.679184],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b5snqx50BDmLQHhI/CssiX"]}],[1],0,[],[],[]],[[{"name":"roll_light0005","rect":{"x":156,"y":471,"width":62,"height":55},"offset":{"x":19,"y":-22.5},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[26,"water_splash_1","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4294941744],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[270,10]],[[{"name":"Big_Smoke_00000","rect":{"x":625,"y":2,"width":90,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"S_coin0006","rect":{"x":310,"y":2,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[33,"ClockTimerUI"],[45,"ClockTimerUI",33554432,[-6],[[2,-2,[1,"2fS+YltUFBsYf3InPqiwTs"],[5,0,0]],[4,-3,[1,"52HG11YgRI2YzpocNFbxd/"]],[266,-5,[1,"6eJWm9e6VNEYfBzMaMJL7k"],-4]],[0,"5fcZjCDoBJCahvJ5v22B+5",-1,0]],[46,"Layout",33554432,1,[-9,-10],[[2,-7,[1,"1cAPOlosRPkKs8rZ+k4k+P"],[5,118,100]],[267,1,1,10,-8,[1,"4dCZ7KLuhJcKRCkUnjyleg"]]],[0,"01yX+HXD5Bj7bxAPdYQCAC",1,0]],[17,"Icon",33554432,2,[[2,-11,[1,"91wOCj/QNJI5LjGK+qQxXZ"],[5,44,50]],[35,-12,[1,"d2yDDZDXRHb4zMJbLutd91"],0]],[0,"626BNBNx5BdrJDimXMtn/P",1,0],[1,-37,0,0]],[109,"Time",33554432,2,[[[8,-13,[1,"66zup0OvFFFr+zt7SdwHzM"],[5,64,17],[0,0.5,-0.87]],-14],4,1],[0,"fdD9fvrrBIr4eyCHczdGrI",1,0],[1,27,0,0]],[220,"30",16,16,17,false,false,-2,4,[1,"2aog5SbMZDMKuPGgM/4dpZ"]]],0,[0,4,1,0,0,1,0,0,1,0,65,5,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,3,0,-2,4,0,0,3,0,0,3,0,0,4,0,-2,5,0,9,1,14],[0,5],[2,15],[446,447]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["beRZ0Yw+VBMIN624US7zdD"]}],[1],0,[],[],[]],[[{"name":"archer09_white","rect":{"x":285,"y":932,"width":19,"height":17},"offset":{"x":0,"y":0},"originalSize":{"width":19,"height":17},"rotated":true,"capInsets":[6,6,6,6],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["betySqTfdPPaPBO5Ghqsns"]}],[1],0,[],[],[]],[[{"name":"GunFire","rect":{"x":525,"y":262,"width":110,"height":80},"offset":{"x":1,"y":-3},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"Cursor","rect":{"x":104,"y":822,"width":30,"height":32},"offset":{"x":-1,"y":0},"originalSize":{"width":32,"height":32},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Monster_Hurt_04",".mp3",0.522449],-1],0,0,[],[],[]],[[[19],[32,"s1_15",[-2],[0,"efdL4g/9FeWY1EzX4Twvr5",-1,0]],[27,"Plane013",1,[[30,-3,[1,"85zvoU2apedIPFocqZ5zMt"],[0],[7],1]],[0,"9fjjopqMZdu6LObote1QCb",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[448,134]],[[{"base":"2,2,0,0,0,0","mipmaps":["c0c7egjONMTb8ejGcuadkR@ba695"]}],[1],0,[],[],[]],[[[18,".bin",3429613751,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.3658052682876587,-1.3311518430709839,-8.490844720654422e-7],"maxPosition",8,[1,1.3658051490783691,1.3311519622802734,-8.466164445053437e-7]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[271,271,4]],[[{"name":"arrow_select_room","rect":{"x":259,"y":161,"width":39,"height":30},"offset":{"x":0,"y":0.5},"originalSize":{"width":45,"height":35},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"SunLight","rect":{"x":2,"y":465,"width":150,"height":149},"offset":{"x":0,"y":-0.5},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"monster_SP_003",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[449,10]],[[{"name":"roll_light0019","rect":{"x":112,"y":618,"width":37,"height":80},"offset":{"x":-31.5,"y":-10},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"monster_SP_002",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[450,10]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c6F2Y8Bd9P3pHMf/TTiFnB"]}],[1],0,[],[],[]],[[[31,"Water_Splash_Small",".mp3",2.063673],-1],0,0,[],[],[]],[[[26,"OddsPanel_2","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.1},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[451,24]],[[{"name":"archer01_1","rect":{"x":217,"y":704,"width":36,"height":84},"offset":{"x":-1,"y":0},"originalSize":{"width":38,"height":84},"rotated":true,"capInsets":[14,21,14,19],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[26,"WaterWave","0",[{"priority":127,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"COLOR_OVER_TIME_MODULE_ENABLE":true}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[118,452]],[[[33,"Water_Splash"],[47,"Water_Splash",[-6,-7,-8],[[70,true,-5,[1,"ea/4hd7iJIgoFZQHHB3S9Z"],[-2,-3,-4]]],[0,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[146,"Quad_1",1,[-9],[0,"83uiHI069EbKKeDAWh5R3V",1,0],[1,0,35,0],[1,75,75,1]],[136,"Quad<ModelComponent>",0,2,[1,"b3XuZWzFVGr6rB3tdQFpO4"],[0],[7]],[146,"Quad_2",1,[-10],[0,"3aTsqaOBpAdZ/kLNokuckW",1,0],[1,0,35,0],[1,75,75,1]],[136,"Quad<ModelComponent>",0,4,[1,"dblo+k/XtFYa+1J+OGCqfa"],[1],[7]],[146,"Quad_3",1,[-11],[0,"57iTlMKy9FhZO5z2kqNY34",1,0],[1,0,35,0],[1,75,75,1]],[136,"Quad<ModelComponent>",0,6,[1,"dfTzEVQwBDiYomAl1VzxNZ"],[2],[7]]],0,[0,4,1,0,-1,3,0,-2,5,0,-3,7,0,0,1,0,-1,2,0,-2,4,0,-3,6,0,-1,3,0,-1,5,0,-1,7,0,9,1,11],[0,0,0,3,5,7],[-1,-1,-1,6,6,6],[453,454,455,17,17,17]],[[{"name":"roll_light0016","rect":{"x":182,"y":186,"width":46,"height":72},"offset":{"x":-27,"y":14},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Monster_Hurt_01",".mp3",0.261224],-1],0,0,[],[],[]],[[{"name":"roll_light0008","rect":{"x":102,"y":889,"width":19,"height":96},"offset":{"x":40.5,"y":2},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[31,"Collect_01",".mp3",0.809796],-1],0,0,[],[],[]],[[[114,"h5bonusFont",32,{"commonHeight":32,"fontSize":32,"atlasName":"h5bonusFont.png","fontDefDictionary":{"43":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":0,"y":0,"width":29,"height":45}},"44":{"xOffset":-2,"yOffset":-2,"xAdvance":9,"rect":{"x":240,"y":0,"width":13,"height":44}},"46":{"xOffset":-2,"yOffset":-2,"xAdvance":9,"rect":{"x":120,"y":45,"width":13,"height":44}},"47":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":30,"y":0,"width":29,"height":45}},"48":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":90,"y":0,"width":29,"height":44}},"49":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":120,"y":0,"width":29,"height":44}},"50":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":150,"y":0,"width":29,"height":44}},"51":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":180,"y":0,"width":29,"height":44}},"52":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":210,"y":0,"width":29,"height":44}},"53":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":0,"y":46,"width":29,"height":44}},"54":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":30,"y":46,"width":29,"height":44}},"55":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":60,"y":46,"width":29,"height":44}},"56":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":90,"y":45,"width":29,"height":44}},"57":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":134,"y":45,"width":29,"height":43}},"61":{"xOffset":-2,"yOffset":-2,"xAdvance":25,"rect":{"x":60,"y":0,"width":29,"height":45}}},"kerningDict":{}}]],0,0,[0],[19],[456]],[[[26,"water_splash_2","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4294941744],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[265,10]],[[{"name":"archer_btn_bet_less","rect":{"x":153,"y":651,"width":59,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":59,"height":60},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["d3/ZG2Nq1LhaO8hqrkjcyf"]}],[1],0,[],[],[]],[[{"name":"roll_light0004","rect":{"x":112,"y":702,"width":80,"height":37},"offset":{"x":10,"y":-31.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[99,"BossCoin",2],[45,"BossCoin",33554432,[-5,-6,-7,-8,-9,-10,-11],[[21,true,-2,[1,"1bqIsURnhHzIJXG20k5Frr"],[71],72],[4,-3,[1,"535uQE+NlK+7oH7m5ti5W7"]],[2,-4,[1,"caujdKK9RM7IWep0RI9T2l"],[5,0,0]]],[0,"e8I+tySIlJ8rAIvkanYyMn",-1,0]],[143,"small_coin",33554432,1,[-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[[4,-12,[1,"90QuEpVvFCc5qKIZ6y5Rqf"]],[2,-13,[1,"f785EAjWBBQqf1GRGKsIY3"],[5,0,0]]],[0,"5dW5hjM7VMz43vYloVrDWO",1,0],[1,0.5,0.5,1]],[17,"BOSS_coin01",33554432,2,[[34,2,false,-34,[1,"4bSizoy69CZ5AzOikbnyDJ"],0],[21,true,-35,[1,"c61d6O2vBMUIfgQSLX0ogP"],[1],2],[15,0,-36,[1,"a8mazedx9GfLS5xpUsTHoJ"]],[2,-37,[1,"5e0WQ2w3VFxY4zUZrcVm2P"],[5,150,150]]],[0,"6bv6F2rVBLwbJGMi6rHKZT",1,0],[1,693,-663,0]],[17,"BOSS_coin02",33554432,2,[[34,2,false,-38,[1,"64Qm6jMqRE968Rr/BaASo3"],3],[21,true,-39,[1,"e80SItShtMIpYftRlwXpjy"],[4],5],[15,0,-40,[1,"acTC3tTm5MsJEBmbrrhJ9O"]],[2,-41,[1,"59Cd0IvxFBqa4p7M4zAAYI"],[5,150,150]]],[0,"e3WDRSvI9BaoyyQyaLzbqw",1,0],[1,-382,-373,0]],[17,"BOSS_coin03",33554432,2,[[34,2,false,-42,[1,"a3pcBQfzNOG7kQY7122e2M"],6],[21,true,-43,[1,"ab5JzhVvFMp4IQY7HfoXYF"],[7],8],[15,0,-44,[1,"bd2bx6h41JE4Gkt8hrcNhe"]],[2,-45,[1,"9eb3s2fKtGG5C9ZcSEWDS+"],[5,150,150]]],[0,"47b4DBHglMxa1zOy8wRK5i",1,0],[1,-644,-146,0]],[58,"BOSS_coin04",false,33554432,2,[[34,2,false,-46,[1,"bdbvMyx6lMULq8Eo0UwhV1"],9],[21,true,-47,[1,"56tHzxajdLUJFiB4A5MJCz"],[10],11],[15,0,-48,[1,"54moHHY2RGMoaJTclW/rYS"]],[25,-49,[1,"9789HPAuVGuqGVTnQAfebS"]]],[0,"a8fTKuzUNNi5Lng79Z6xJA",1,0],[1,165,-486,0]],[17,"BOSS_coin05",33554432,2,[[34,2,false,-50,[1,"d68tb9S/NGFrwsTW9fYixW"],12],[21,true,-51,[1,"4eKkwHuG5KGaak9syGIOW/"],[13],14],[15,0,-52,[1,"99KHzTsOtLNaYyWbLGmijN"]],[2,-53,[1,"b1ZWKXvYZJZYq9GMeZuSdP"],[5,150,150]]],[0,"f12/9JGTZHYrY5SHyE5sUR",1,0],[1,-128,-127,0]],[58,"BOSS_coin06",false,33554432,2,[[34,2,false,-54,[1,"bb4QBYX/tH3oFgE2bOetzc"],15],[21,true,-55,[1,"67JgVQDB5DMKGTN8vLRDka"],[16],17],[15,0,-56,[1,"a5SO//xxhLZreHX2QPiHTc"]],[25,-57,[1,"b3slhlKvhDy6dhl6Jo4D8O"]]],[0,"c00DP1PD5ONpw+eSlsLKxW",1,0],[1,411,-283,0]],[17,"BOSS_coin07",33554432,2,[[34,2,false,-58,[1,"3fDcQ4T0FFqoTqWljp3lVv"],18],[21,true,-59,[1,"6bUGvaxA1HqLBmEYX/Zo7o"],[19],20],[15,0,-60,[1,"abU21zXjRDepSxX2L1RE/t"]],[2,-61,[1,"61bUKXsrNEXarog+xCcb4o"],[5,150,150]]],[0,"c6Z283TQ5HIK+nQWuSNfEl",1,0],[1,-206,-517,0]],[17,"BOSS_coin08",33554432,2,[[34,2,false,-62,[1,"a9efK1fYlBTrMHSjeUlJoZ"],21],[21,true,-63,[1,"94jDY6TORJAKQZqiadj6/P"],[22],23],[15,0,-64,[1,"caV4WfZOdPXq/kcgtt29Pb"]],[2,-65,[1,"a6AJk1iplIxrG5PK1XiE5e"],[5,150,150]]],[0,"0daRqDQhhH5oh2J1kAbYJ9",1,0],[1,196,-460,0]],[58,"BOSS_coin09",false,33554432,2,[[34,2,false,-66,[1,"20SoDQPHRHPrs0XUiMqiFM"],24],[21,true,-67,[1,"b3EHCHjsBGyIjdWTdcRJ/5"],[25],26],[15,0,-68,[1,"72Mj2IS0FM4Y8zOtNVi/4f"]],[25,-69,[1,"65FJnqsvRAtpKdBdkmuVC6"]]],[0,"3caf0UmHNGLIEZEWh542QW",1,0],[1,-163,-457,0]],[58,"BOSS_coin10",false,33554432,2,[[34,2,false,-70,[1,"2bDuuzsrtIGZDufxMAoce9"],27],[21,true,-71,[1,"9c1BIBps5DNYixXv2lFF8M"],[28],29],[15,0,-72,[1,"e6gVc2bf9OS7+XKjpxbXtA"]],[25,-73,[1,"68X/VbmHFCzaEEYCqfu7MI"]]],[0,"7eJgbJDxtB2KY67S3RWDDT",1,0],[1,-374,-440,0]],[17,"BOSS_coin11",33554432,2,[[34,2,false,-74,[1,"93+XSYnRNPP4JQHHM+yPZH"],30],[21,true,-75,[1,"00auShXOJOdLMAZeh4ybuu"],[31],32],[15,0,-76,[1,"faHMNxdcBDSJrACnGw+HNO"]],[2,-77,[1,"5edYfD65RDDr56sXBEDSiP"],[5,150,150]]],[0,"bc8m5E7S5BobQ4tOoG0nWT",1,0],[1,499,-562,0]],[17,"BOSS_coin12",33554432,2,[[34,2,false,-78,[1,"87qY+fZhROgqLUnvH5YlNy"],33],[21,true,-79,[1,"057VxhbxxNm7a3F0Qg7Rdt"],[34],35],[15,0,-80,[1,"adRaVYn5JKYIjn7nf6DiYk"]],[2,-81,[1,"840Hu1FthEaIfx97bM4Ivt"],[5,150,150]]],[0,"b9v8p45NhIxbsbYDGp+tNF",1,0],[1,209,-654,0]],[58,"BOSS_coin13",false,33554432,2,[[34,2,false,-82,[1,"23E9kRg2JBdr5IbmFpM5+u"],36],[21,true,-83,[1,"be6X8enXBBVro4ZNWFmCpl"],[37],38],[15,0,-84,[1,"3bj4xxu4dD47YQxgY7HV+u"]],[25,-85,[1,"49p8hKEppGap4F63+jsBTc"]]],[0,"6cQwI7v+5Nr4Urpx/Cb2ml",1,0],[1,-199,-644,0]],[58,"BOSS_coin14",false,33554432,2,[[34,2,false,-86,[1,"bfCiYQPCpC662ss1VLrKrH"],39],[21,true,-87,[1,"21c5krbfxIk77xRfNzSRNI"],[40],41],[15,0,-88,[1,"2blNG05m1IPoeNH8Tth4n8"]],[25,-89,[1,"bbZ9s0YypIrKp4GkCkkg/N"]]],[0,"cdCSbvUFVDu7vJGV+i/oDa",1,0],[1,229,-605,0]],[17,"BOSS_coin15",33554432,2,[[34,2,false,-90,[1,"c1GXljpVRJPZAgzZgEAx1J"],42],[21,true,-91,[1,"80zMQFVutF9qWuwKtLQHq7"],[43],44],[15,0,-92,[1,"fdXIpgOw5JXo0FK0T6L9kg"]],[2,-93,[1,"b3L2KKfyhGrpfjaCNXjzeR"],[5,150,150]]],[0,"7fRs8e0CBG94OFwwYXTwc/",1,0],[1,813,-313,0]],[17,"BOSS_coin16",33554432,2,[[34,2,false,-94,[1,"8aRYn1zFBCMq6raPoGmLU4"],45],[21,true,-95,[1,"14is3cCTZNvofM2ayMUQBR"],[46],47],[15,0,-96,[1,"74NeZb6elHPJRyVryQWpJD"]],[2,-97,[1,"f8IHn7bZRPdoE4SEjEA2Cw"],[5,150,150]]],[0,"5bgOi7SvtMRY8001gpPgrt",1,0],[1,-432,-516,0]],[58,"BOSS_coin17",false,33554432,2,[[34,2,false,-98,[1,"b5cWhIVb1PQ4aCoMHi7KZV"],48],[21,true,-99,[1,"fdxXN0u9lCy7sIHnzMyYlr"],[49],50],[15,0,-100,[1,"a7IyxwPy5GW5e4leQFQAgy"]],[25,-101,[1,"1dVeIeIZ1NHaudMIr7yzNy"]]],[0,"3ectOG/ZFEMpzqva5/frlU",1,0],[1,-281,-492,0]],[17,"BOSS_coin18",33554432,2,[[34,2,false,-102,[1,"01FpZdlZRByKC2+YOrWuZt"],51],[21,true,-103,[1,"06A/24e+FOIbmxM9UWSi8j"],[52],53],[15,0,-104,[1,"0367k4111FzZOiIBjyRnCv"]],[2,-105,[1,"86HNiFbAdCbLkofmD0NtHH"],[5,150,150]]],[0,"51w4mWI5ZP+4sBbTs5k+pa",1,0],[1,-12,-543,0]],[58,"BOSS_coin19",false,33554432,2,[[34,2,false,-106,[1,"632pGg2k9Mv459oUv4/fVD"],54],[21,true,-107,[1,"05ri4PV/BCQL4zpaA0l7ie"],[55],56],[15,0,-108,[1,"d6VB4uiGVHWZbLEnHOfgIX"]],[25,-109,[1,"ffD+0hhO1EkajswqZvtAhD"]]],[0,"dbkmmBd4dDIL1SikCX7PiH",1,0],[1,-495,-313,0]],[58,"BOSS_coin20",false,33554432,2,[[34,2,false,-110,[1,"39f1WoWBtL2rXyW6xddFU8"],57],[21,true,-111,[1,"7blHn/rtVC8K8/i+mSiHC4"],[58],59],[15,0,-112,[1,"d73UQW8t1LUaFYqGsbt1OY"]],[25,-113,[1,"250BaoUYpKGLw6AzaxQ+Bb"]]],[0,"70SZIPqUJJWrquf+egJ9vx",1,0],[1,587,-484,0]],[57,"a_effect_01",33554432,1,[[148,1,0,-114,[1,"91dVaOgExNTqrR4CZJlDfA"],[4,4290443775],60,61],[15,0,-115,[1,"7duc2R/2dAx68ozC910lSg"]],[2,-116,[1,"f9N1FCek1PW4yf2WYZBZI8"],[5,172,172]]],[0,"4dnmFqRXdNqpacALeMEnM+",1,0],[1,1,1,0]],[61,"ForestDance_Ray_01",33554432,1,[[148,1,0,-117,[1,"94y1VLELRNj7fX8sGnncj/"],[4,4278221567],62,63],[15,0,-118,[1,"f5h+sew4hLfreSKbN/m3YJ"]],[2,-119,[1,"d1P7qKA11I8aXz5mZhCt4b"],[5,420,420]]],[0,"36ty2/vmtPmLaFqJ3fLpEy",1,0],[3,0,0,-0.08715574274765817,0.9961946980917455],[1,0.5,0.5,0],[1,0,0,-10]],[61,"ForestDance_Ray_02",33554432,1,[[148,1,0,-120,[1,"14yulolLxBTYeNUmpTDBov"],[4,4281710335],64,65],[15,0,-121,[1,"41TybHxzZGLrIngtkGXHU0"]],[2,-122,[1,"65f36POW5Ex5ALzGvt7xNe"],[5,420,420]]],[0,"d9kaiL3OlD5I7hJIMMyTOq",1,0],[3,0,0,0.8660254037844386,0.5000000000000001],[1,0.30000001192092896,0.30000001192092896,0],[1,0,0,120]],[57,"BigCoin",33554432,1,[[34,2,false,-123,[1,"85WEDN4lZFTI77SkATxLwJ"],66],[4,-124,[1,"82fyoKMYpP5o8Fz+zEqiti"]],[2,-125,[1,"774PPy9iFFGogyyQNKXy4J"],[5,150,150]]],[0,"9dmBNTc5VCvrr+FBxiXtg6",1,0],[1,0.5,0.5,0]],[105,"BigCoin_Light",false,33554432,1,[[39,1,2,false,-126,[1,"8ejzM6tfpNoqVHII22r2tK"],67,68],[4,-127,[1,"3fdAigveFPKr+uRY0fk4BN"]],[2,-128,[1,"0eHne8amlMgZTl4x/wiKEh"],[5,150,150]]],[0,"85GBAnV6NNr4L283Frv/Lh",1,0]],[29,"a_light_01",false,33554432,1,[[86,1,-129,[1,"23JO/6wLpOgI6Ocgyv6/5p"],69,70],[15,0,-130,[1,"1cMFMEw+5PeYPiLtSR4/Cu"]],[2,-131,[1,"90zTNArYtD4K54x0z+fnmj"],[5,156,75]]],[0,"a8Kj9uPotByI1sRRenV+ds",1,0],[1,4,1,0]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,23,0,-3,24,0,-4,25,0,-5,26,0,-6,27,0,-7,28,0,0,2,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,7,0,-6,8,0,-7,9,0,-8,10,0,-9,11,0,-10,12,0,-11,13,0,-12,14,0,-13,15,0,-14,16,0,-15,17,0,-16,18,0,-17,19,0,-18,20,0,-19,21,0,-20,22,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,9,1,131],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,2,-1,7,3,2,3,2,3,2,2,3,2,3,2,-1,7],[11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,11,5,5,1,80,1,272,1,272,11,1,11,1,457,273,273]],[[[26,"Axe_Knife_Light","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,3707764735],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[458,24]],[[{"name":"S_coin0005","rect":{"x":156,"y":156,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[33,"Monster_3"],[94,"Monster_3",[-12],[[[2,-2,[1,"58aaHXkhxPAIBZeFlr7IPR"],[5,0,0]],[149,true,62,10,[18],-7,[1,"dfu9wfwrxKU5pBM1do28TW"],[-6],[-5],[-4],-3],-8,[66,8,4,-9,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[70,true,-11,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-10]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[134,"RootNode",[-14,-15,-16],[-13],[0,"9027YhD4lFGbeLejQfVMgX",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.25,1.25,1.25],[1,90,0,0]],[20,"Bip001",[-17,-18,-19,-20,-21],[0,"7bbLR357RD0Khchca067Rl",1,0],[1,0.049051493406295776,0.05553199723362923,1.2095818519592285],[3,-0.0006097224509857245,-0.01722360207281461,-0.7956013042810014,0.6055753796155682],[1,-173.9593477789705,-175.31800666721483,-74.48749841136443]],[77,"RootNode",1,[-23,-24,-25],[[40,-22,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[21,22,23,24],25]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[20,"Bip001 Spine",[-26,-27,-28],[0,"16zZX6ouVEAI2ou2r3XFut",1,0],[1,0.3394815921783447,-0.0002846047282218933,-0.008734744042158127],[3,-0.05230478292673197,0.012908843581232251,0.001072712960647792,0.9985471549843236],[1,-5.997514007212323,1.4836911820313965,0.04537370293343577]],[20,"Bip001 Neck",[-29,-30,-31],[0,"31NxhMwlRAjqKndTF7zjhu",1,0],[1,0.586073637008667,-0.10362783074378967,0.00006033480167388916],[3,-6.914333686519426e-9,-3.672835548189103e-7,0.1309430625036947,0.9913898901955873],[1,0.000004893380983398575,-0.000043099440357317534,15.048183354636045]],[62,"Bip001 R Clavicle",6,[[-32,[6,"Bip001 Xtra02Opp",-33,[0,"39EAK6GkZMPa5ZzsA8HZhg",1,0],[1,0.523729681968689,0.06573440134525299,-0.10153985023498535],[3,-6.247959467427922e-18,1.251260647657785e-17,-0.05600278839455234,0.9984306123572309],[1,-6.385461655710315e-16,1.400276294153821e-15,-6.4208060947516925]],[6,"Bip001 Xtra02Opp_01",-34,[0,"0dNKnSpxZKJI7kip0DPOtV",1,0],[1,0.5237298011779785,0.06573434174060822,-0.10153985023498535],[3,0.7826464146067054,-0.00034783119784025367,-0.08943960781257812,0.6160073256634689],[1,104.03777033217236,8.072979526521477,-6.357707858170503]]],1,4,4],[0,"aao5DuCPdN64jheCuRf1U3",1,0],[1,-0.23842334747314453,0.1327838897705078,-0.3169342279434204],[3,-0.6656259486865426,0.08818455290240645,0.7346376984783908,0.0973295075448137],[1,-164.9760672635903,95.44955116681702,1.4673905845709705]],[43,"Bip001 R Hand",[[-35,-36,[12,"Bip001 Xtra03",-37,[0,"66PZVWItFDiaSWzNNIJh9E",1,0],[1,0.34129172563552856,0.09468472003936768,0.7260064482688904],[3,-0.6064391123804355,-0.3111928099009198,0.6915718898977402,-0.23899573038961877],[1,-1,-1.0000001192092896,-1],[1,133.85547722992646,98.64956261617886,2.6866395782588905]]],1,1,4],[0,"65rSCWzjFJpaFyAnKAt+Qj",1,0],[1,0.5262290835380554,-1.7881393432617188e-7,0],[3,0.6556428710861406,-0.046531923398984716,-0.057381973020445225,0.7514482782407546],[1,82.23254165609752,0.3076819588559249,-8.4679304827175]],[72,"RootNode",[-39],[[40,-38,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[15,16,17],18]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",9,[2],[[74,1,0,-40,[1,"0cCuiskZ1LlaHSvmTemF09"],[13],[7],14]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[62,"Bip001 L Clavicle",6,[[-41,[6,"Bip001 Xtra02",-42,[0,"dewrQFBYpDCoPdz9yY0hHV",1,0],[1,0.5237297415733337,0.06573442369699478,0.10153985023498535],[3,-0.7826482135490148,0.00034786624365362197,-0.08943981766338095,0.6160050095851116],[1,-104.03810930047298,-8.073014879107786,-6.3577021132315075]]],1,4],[0,"813ctDjutH2qhv59oZMPIa",1,0],[1,-0.23842334747314453,0.13278210163116455,0.31681370735168457],[3,0.6197065288056965,-0.10546422299257804,0.7732129312940685,0.0835636206958543],[1,164.53422347045768,-102.58936666479761,-0.08530146507025196]],[20,"Bip001 L Hand",[-43,-44],[0,"d9hjMszERHUZ99sP1pyPsF",1,0],[1,0.5262293815612793,-1.1920928955078125e-7,-2.220446049250313e-16],[3,0.9850150589012182,0.1428331022820484,0.03943748124079439,0.08825374611707922],[1,170.2232841761289,-3.1419505364188214,16.758990706849428]],[48,"Odds",4,[-45,-46],[0,"8d4GsIhIlAWrE+ZvZl4/NS",1,0]],[108,"OddsNum",13,[[[2,-47,[1,"beJ1C1UwZCj6qesWfHhS+t"],[5,33.26,32]],-48],4,1],[0,"4bIwSQVu5AS4I22dSZzJlt",1,0],[1,1.5,0,62]],[78,"FloorNode",4,[-49],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",15,[[113,1,-50,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",4,[9],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"cb/d/TgMtJNJLuOI4inRSv",1,0],[1,0,2.3,0]],[202,"monster_M_004",2,[-51],[0,"d5DsvczUBMrbuZz2ziAGyY",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[95,1,0,19,[1,"9evYAx6ehH8oaEtMDFhODj"],[2],[7],2],[3,"Root",2,[3],[0,"23aKtifTpCCJfGEicMDva1",1,0],[1,0,0.20308148860931396,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[54,"Bip001 Pelvis",3,[5],[0,"7dOLFtvjBCF4Pu1M2QSkCe",1,0],[3,0.5064108894136171,0.5064115450647001,0.4935051727052416,-0.49350582835632456],[1,-89.99992484914351,-90.00000096995645,1.4789272543102485]],[93,"Bip001 Spine1",5,[6],[0,"c5WZLUKURFGIMk9mXGYNw0",1,0],[1,0.3594597578048706,-0.0003339238464832306,-1.4901161193847656e-8]],[3,"Bip001 Head",6,[-52],[0,"3cQgHFs8FGjZy7O0ml3x3a",1,0],[1,0.1907801628112793,-5.960464477539063e-8,0],[3,0.18145938112017782,-0.045823953779044864,-0.1473043105372766,0.971222991058529],[1,20.83436810748271,-2.137729299035032,-17.62351322677988]],[3,"Bip001 Xtra01",24,[-53],[0,"baeGwAvaBCoqn6o5BSo6Ut",1,0],[1,1.2812135219573975,0.14581960439682007,2.0489096641540527e-7],[3,1.5007969979696621e-10,1.6231744959146397e-7,-0.05829964249453079,0.9982991293620281],[1,0.0000011090934666957856,0.000018696669975427017,-6.684437141641412]],[3,"Bip001 Xtra0102",25,[-54],[0,"1all9oO2xPQ4hgc0p+FsBb",1,0],[1,0.28650903701782227,-0.000299990177154541,1.4901161193847656e-8],[3,4.3913546822372867e-10,7.308940277145338e-7,-0.26434376248475705,0.9644285226157862],[1,0.000025793187720778953,0.00009391318514889061,-30.65592542612234]],[3,"Bip001 Xtra0103",26,[-55],[0,"c8ZoKaLypERasWmQ82nHMw",1,0],[1,0.43793344497680664,-0.0002758502960205078,1.4901161193847656e-8],[3,-0.0006751937800301669,-0.0019304664730094277,-0.32925483058631144,0.9442388860601619],[1,-0.18628225315610472,-0.2992342107712918,-38.44680857349964]],[3,"Bip001 Xtra0104",27,[-56],[0,"91XuYA4o1KoJar5E9a3Ovw",1,0],[1,0.4425288438796997,-0.00023984909057617188,-1.4901161193847656e-8],[3,0.006050552404082018,0.02066890578374812,-0.2801265493799275,0.9597214718249263],[1,1.5760125804219332,2.927034850169513,-32.50932140628952]],[5,"Bip001 Xtra0105",28,[[6,"Bip001 Xtra0106",-57,[0,"6aaEUHHsFOIrfKVi2//Kwm",1,0],[1,0.5797834396362305,-0.0004956722259521484,3.725290298461914e-8],[3,-0.004442710878886053,-0.037903267751958875,-0.11553903626974836,0.9925695621525114],[1,-1.0347023684259684,-4.493869316659745,-13.239633539416202]]],[0,"331QMy5IJCW6SjsC/D/hod",1,0],[1,0.35755884647369385,-0.0003838539123535156,-2.7755575615628914e-17],[3,-0.0005837076427244131,-0.0019184378799390511,-0.29021128849194044,0.956960493914632],[1,-0.1536976958426927,-0.2763341782636565,-33.74097361827072]],[3,"Bip001 L UpperArm",11,[-58],[0,"84vRHKQy5MN60RY8o0jVPA",1,0],[1,0.3031982481479645,7.450580596923828e-9,4.440892098500626e-16],[3,-0.11709683332907903,0.3358677609718843,-0.2198214967548895,0.9083830075075575],[1,-4.248863065429559,39.501225758549886,-28.556316553805246]],[3,"Bip001 L Forearm",30,[12],[0,"beipTvtTlMKoYhuJfnJb5r",1,0],[1,0.6440646648406982,5.960464477539063e-8,0],[3,0,0,-0.6265666020551498,0.7793678805218134],[1,0,0,-77.59452895775578]],[5,"Bip001 L Finger0",12,[[6,"Bip001 L Finger01",-59,[0,"08AbB9NTRP5LNJBlvlkDeW",1,0],[1,0.17469453811645508,0,1.1102230246251565e-16],[3,-7.447544841414305e-9,2.1265099513030475e-10,-0.028541535285973724,0.9995926073973934],[1,-8.537735953459018e-7,-1.3740672240025546e-16,-3.2710632398076904]]],[0,"d37u7LkLFBzribFPxdf2+1",1,0],[1,0.1943836808204651,0.07942855358123779,-0.2030106782913208],[3,0.5857833160884595,0.321579106005282,0.09317972722685788,0.7380801606920347],[1,69.78437425214196,25.22829862950765,30.950648507689998]],[5,"Bip001 L Finger1",12,[[6,"Bip001 L Finger11",-60,[0,"ff8n7xkl9M0ZsJuk4FMzb3",1,0],[1,0.20877480506896973,-2.384185791015625e-7,-2.220446049250313e-16],[3,0.020292182162518223,0.016294837512606505,0.7683625463915336,0.6394854985973015],[1,179.71210394935926,-176.73477967321065,79.5377391528963]]],[0,"54ISrgN25DgKViPkddc1PD",1,0],[1,0.3499831557273865,0,0],[3,0.012243022763404674,-0.01503336010551885,0.3307497399035325,0.9435193246729493],[1,2.4232769322494367,-2.674203996292146,38.591924139148354]],[3,"Bip001 R UpperArm",7,[-61],[0,"73WvfZLD9Km66TEtkZUzfL",1,0],[1,0.30319827795028687,7.450580596923828e-9,4.440892098500626e-16],[3,-0.22480667955835124,-0.3693849118153435,-0.32637524355520214,0.8405331309016929],[1,-42.06727940743506,-56.19301797440853,-22.493462824452774]],[3,"Bip001 R Forearm",34,[8],[0,"99NtW6YPVDz5wUv8XSe++k",1,0],[1,0.6440649032592773,0,0],[3,-7.681971943618675e-18,-5.670156478764916e-17,-0.37058568911385614,0.9287982811267517],[1,-4.446925040726797e-15,-8.769920933761502e-15,-43.50348555307545]],[5,"Bip001 R Finger0",8,[[6,"Bip001 R Finger01",-62,[0,"2aoWgeHI1F9p/6bcQGACVM",1,0],[1,0.17469453811645508,-1.1920928955078125e-7,0],[3,-6.61758111209012e-9,-4.344477197709558e-9,0.5488055913230775,0.8359500122211418],[1,-9.07134261385296e-7,-7.238492719851799e-14,66.57022014843818]]],[0,"d7sk++extPD79CHAinouk3",1,0],[1,0.19438382983207703,0.07942867279052734,0.2030106782913208],[3,-0.5496568058254714,-0.4898542739069574,0.1659392557787926,0.6560368507457551],[1,-58.622336598833826,-44.70846586916581,49.132786088227725]],[5,"Bip001 R Finger1",8,[[6,"Bip001 R Finger11",-63,[0,"fbEue8FaFKxZwnAbxB4hWB",1,0],[1,0.20877456665039062,5.551115123125783e-17,-5.960464477539063e-8],[3,-0.1217453686000132,-0.08890052758605471,0.718944241330506,0.6785233520499283],[1,-149.47558352938464,132.33180053151534,85.77884516608697]]],[0,"bfOsxXD9NCBrcfR6FY1LMy",1,0],[1,0.349983274936676,-2.220446049250313e-16,-5.960464477539063e-8],[3,-0.008430699897524385,0.016926836382404917,0.6163973866551278,0.7872081473371892],[1,-8.097302789284381,8.790926183844325,75.97277870633796]],[3,"Bip001 L Thigh",5,[-64],[0,"257SqZr6xCPaO/FJqcHqZ1",1,0],[1,-0.34763312339782715,-0.03186597302556038,0.3086744546890259],[3,0.05036785391866791,0.9733874678599331,0.2206304940380313,-0.03608464777976191],[1,-25.761200235185306,-174.6760070928332,4.711131104814813]],[3,"Bip001 L Calf",38,[-65],[0,"ab6yO0vKJPyI8Ddk+0PmSP",1,0],[1,0.6991642713546753,0,2.9802322387695312e-8],[3,-1.3392943065350738e-17,5.659508011597215e-18,-0.09677736265308232,0.9953060544766689],[1,-1.4927122011626859e-15,5.0644833724681e-16,-11.107253256566123]],[5,"Bip001 L Foot",39,[[6,"Bip001 L Toe0",-66,[0,"12FTYuiphKn72cxeX/VceK",1,0],[1,0.2635822594165802,0.3261260688304901,-5.551115123125783e-17],[3,-5.058222514143481e-7,-9.272909141587343e-7,0.7071066619768513,0.7071069003954346],[1,0,-0.00008197199086484706,90]]],[0,"67VitAP/BCKpn+QWHsp+yR",1,0],[1,0.46137458086013794,-1.3877787807814457e-17,-5.551115123125783e-17],[3,0.02913054190116201,-0.03231012365520338,0.0262124364037956,0.9987093549254994],[1,3.437296823246578,-3.7927893734907387,2.893221729074607]],[3,"Bip001 R Thigh",5,[-67],[0,"19nn9HDIVNxaauVhsL2yWG",1,0],[1,-0.3315541744232178,0.03297925740480423,-0.3086744546890259],[3,0.017751539252102537,0.9469073482047939,-0.31795555578963375,0.04422240735702918],[1,37.13736920529008,174.54644230354032,0.31493389412678974]],[3,"Bip001 R Calf",41,[-68],[0,"fcojLIlhJEy577jd1dCgM/",1,0],[1,0.6991643905639648,-2.9802322387695312e-8,2.9802322387695312e-8],[3,-5.162541590429496e-19,-6.919662586162073e-18,-0.0744000577748371,0.9972284750262104],[1,-1.1930966006655587e-16,-8.04039986187025e-16,-8.533503675841946]],[5,"Bip001 R Foot",42,[[6,"Bip001 R Toe0",-69,[0,"7aTgHQa19GMbbXknSTfKV9",1,0],[1,0.2635822892189026,0.3261260390281677,5.551115123125783e-17],[3,-8.589286584652784e-8,-5.073613438499789e-7,0.7071066619771523,0.7071069003957355],[1,0,-0.000013919532394706278,90]]],[0,"58GPNpIQBMB7s04llIMBkU",1,0],[1,0.4613746106624603,2.2351741790771484e-8,-2.9802322387695312e-8],[3,-0.12327623744678994,0.013630143891538505,0.047002392350424346,0.9911649527559958],[1,-14.279500313994676,2.2216081756851818,5.15288961371441]],[5,"Bip001 Xtra04",3,[[6,"Bip001 Xtra0402",-70,[0,"58ubltbAxH3YlH9N96psj8",1,0],[1,0.2725435495376587,-0.0003185272216796875,0.00003719329833984375],[3,-0.053710930118073597,-0.022654691740025754,0.13093744235086097,0.9896753443016709],[1,-5.9696664668433295,-1.8272704411131728,15.16530222221633]]],[0,"45PcUYoIFCTqyw6EXMFBk7",1,0],[1,0.38782620429992676,0.397160142660141,0.05101621150970459],[3,-0.6779612843832034,0.1642499701766241,0.4414702916097118,0.5643531038281722],[1,-108.75392228994242,54.64374925794561,15.99658237157408]],[5,"Bip001 Xtra04Opp",3,[[6,"Bip001 Xtra04Opp02",-71,[0,"0bjMtCxDhNUJGtojnAYWg3",1,0],[1,0.2726077437400818,-0.0002963542938232422,1.4901161193847656e-8],[3,3.158788778589181e-9,-6.518551443122514e-7,0.23116770331765743,0.9729139185675238],[1,0.00001972821533069427,-0.00008146416857845074,26.731658128733184]]],[0,"725+aCB0BE2bEAm3sSWJq+",1,0],[1,0.3878052532672882,-0.397149920463562,0.051041364669799805],[3,-0.5974311224087288,0.3955606216538382,0.1102413831576633,0.6888067116497638],[1,-73.95128983398483,45.594390060484415,-18.709524409896193]],[5,"Bip001 Xtra05",3,[[6,"Bip001 Xtra0502",-72,[0,"214ETCMnZLRbRIfnlzirm9",1,0],[1,0.19545382261276245,-0.00037360191345214844,6.556510925292969e-7],[3,-0.00044621358016633527,0.015108672774632556,-0.030316374940434376,0.9994260584509997],[1,0.0013871267858549317,1.732230748621048,-3.474909210884529]]],[0,"c7eTyHBYFFaqbOiDI7BLLa",1,0],[1,-0.3982851803302765,0.43180960416793823,0.030852437019348145],[3,-0.17587928337009476,0.6342680404869915,0.4750859700405953,0.5840067221947028],[1,-58.93917676158898,105.74632347102192,19.377917853425114]],[5,"Bip001 Xtra05Opp",3,[[6,"Bip001 Xtra05Opp02",-73,[0,"2czZdbBSRGbr0EFu3smt1b",1,0],[1,0.19545406103134155,-0.00037360191345214844,-6.258487701416016e-7],[3,0.00044626876075576355,-0.015108520959823466,-0.030316469916814026,0.9994260578403901],[1,-0.0013804319523473079,-1.7322131440241877,-3.474920193973364]]],[0,"fcBY6Cm2tGJ78fss5QS/+t",1,0],[1,-0.3982851207256317,-0.4318094849586487,0.030852556228637695],[3,-0.5840072627014868,0.4750841554057692,0.634269356204001,0.17587764546657333],[1,-121.06114955628496,105.74631656146875,-19.377918399071724]],[126,true,2,[1,"9axFG0xv1ONqG5zal1NwRL"],[3,4,5,6,7,8,9,10,11,12]],[9,"Board",13,[[83,"Quad<ModelComponent>",0,-74,[1,"142iVbqA5BdosytAKiKq8x"],[19],[7],20]],[0,"dc7KbQilBASL9s5eFfBMIw",1,0],[1,0,-4.1,60],[1,72,34,1]],[111,"X2",26,26,32,false,false,14,[1,"d6J+uMQyJFYKuudlWgOy7Q"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,40,0],[1,100,190,90]]],0,[0,4,1,0,0,1,0,20,50,0,-1,51,0,-1,18,0,-1,48,0,0,1,0,-3,51,0,0,1,0,-1,20,0,0,1,0,-1,4,0,-1,48,0,-1,18,0,-2,19,0,-3,21,0,-1,22,0,-2,44,0,-3,45,0,-4,46,0,-5,47,0,0,4,0,-1,15,0,-2,17,0,-3,13,0,-1,23,0,-2,38,0,-3,41,0,-1,24,0,-2,11,0,-3,7,0,-1,34,0,1,7,0,1,7,0,-1,36,0,-2,37,0,1,8,0,0,9,0,-1,10,0,0,10,0,-1,30,0,1,11,0,-1,32,0,-2,33,0,-1,49,0,-2,14,0,0,14,0,-2,50,0,-1,16,0,0,16,0,-1,20,0,-1,25,0,-1,26,0,-1,27,0,-1,28,0,-1,29,0,1,29,0,-1,31,0,1,32,0,1,33,0,-1,35,0,1,36,0,1,37,0,-1,39,0,-1,40,0,1,40,0,-1,42,0,-1,43,0,1,43,0,1,44,0,1,45,0,1,46,0,1,47,0,0,49,0,9,1,2,1,10,3,1,21,5,1,22,6,1,23,8,1,35,9,1,17,12,1,31,74],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,20,48,50,50,51],[-1,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,6,-1,-2,-3,7,-1,6,-1,-2,-3,-4,7,6,13,7,3,15,16],[19,66,459,64,256,257,258,259,260,261,262,263,264,19,41,20,30,31,20,68,17,21,32,33,34,21,254,255,64,8,35,22]],[[[156,"monster_SP_001_star",".plist"],-1],0,0,[],[],[]],[[{"name":"glass_02","rect":{"x":2,"y":368,"width":326,"height":328},"offset":{"x":0,"y":0},"originalSize":{"width":326,"height":328},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[23,"Prince",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[460,10]],[[[31,"Male_Hurt_03",".mp3",0.444082],-1],0,0,[],[],[]],[[{"name":"roll_light0012","rect":{"x":190,"y":932,"width":89,"height":28},"offset":{"x":5.5,"y":36},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[26,"WaterRipple","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true}],[[[{},"mainColor",8,[4,4294941744],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[461,10]],[[[19],[47,"monster_M_Medusa",[-3,-4],[[63,-2,[1,"afjBB1f3xd7oqDGlLTuSxp"],[3,4,5,6,7,8,9,10,11,12,13],14]],[0,"9fcDvf46tVwoqqOBu2eqJL",-1,0]],[20,"Bip001 Head",[-5,-6,-7,-8,-9,-10,-11,-12],[0,"22vacJrChZwapjkerZBEA0",1,0],[1,0.1295163631439209,2.2351741790771484e-8,1.862645149230957e-9],[3,0.07394517312672352,0.023110153464713862,-0.08993150414918638,0.992930187243575],[1,8.82244615640815,3.446883851549998,-10.088763148988493]],[43,"Bip001 Spine1",[[-13,[6,"Bone006_L",-14,[0,"e6KHSwYmhefpYhvR7xIl4p",1,0],[1,0.5088258981704712,0.42776697874069214,0.1937049776315689],[3,0.28355473112256985,0.542766865858189,0.784542615542204,0.09743576439215411],[1,-116.19698700654031,-157.53511065584348,27.431850341928737]],[6,"Bone005_R",-15,[0,"0bwxxazbNWiIQGIFIQ0gK+",1,0],[1,0.6713540554046631,-0.2445410043001175,-0.20629499852657318],[3,-0.06030400236645095,0.7224620151482791,-0.6253005410605694,0.2888101406042279],[1,76.36450314494448,157.51233440395697,-26.63601047466797]],[6,"Bone004_R",-16,[0,"9bHgEtNgxXSaFuSkeL6p7O",1,0],[1,0.7057569026947021,-0.0912640243768692,-0.4272949695587158],[3,-0.043889558445851226,0.8127568708426727,0.05041825987683029,0.5787555396092963],[1,-7.6296556927139685,109.04186637627085,-0.743914120805029]],[6,"Bone004",-17,[0,"6du7FdYCJfeanKrMcLL1J3",1,0],[1,0.7057571411132812,-0.09126503765583038,0.414730966091156],[3,0.5444103901221266,0.04854447984325859,0.8361514539180148,-0.04595113398613222],[1,-172.45808853135853,-113.77384865555763,-1.3745416614866315]],[12,"Bone005",-18,[0,"0bkyqd9pxXk7DLYV8Kp/8B",1,0],[1,0.671353816986084,-0.24454204738140106,0.21195097267627716],[3,0.2888095330695279,-0.6253023639313815,0.7224606155034472,-0.0603047785533435],[1,0.733959972858429,1,1],[1,103.6351934974812,-157.51251740117513,-26.636090332415165]],[12,"Bone006",-19,[0,"30FNgl9kpb849a/xNt3RZ7",1,0],[1,0.5088269710540771,0.42776793241500854,-0.2493010312318802],[3,0.09743568200798261,0.7845415988187666,0.5427684131959524,0.28355461066835175],[1,0.5433869957923889,1,1],[1,-63.803245458229355,157.53517314301604,27.43187741305809]]],1,4,4,4,4,4,4],[0,"ccWBFnLo1ZJbHjgQhMNCbw",1,0],[1,0.2922067642211914,-0.0005435049533843994,-2.7939677238464355e-9],[3,-7.074955604125484e-8,3.609806006398555e-7,-0.09701794955097177,0.9952826319517436],[1,-0.000004133693964366004,0.00004115844683504198,-11.134952828824668]],[3,"Bip001 Neck",3,[2,-20,-21],[0,"5dAaz51GdUSqUM1bNjxzpr",1,0],[1,0.8279080390930176,0.012804195284843445,7.427297532558441e-8],[3,-4.069383665223806e-10,-1.9270195851371112e-7,0.06905978827008684,0.9976125227983327],[1,0.0000014926972131874775,-0.00002223819639387183,7.919972725768341]],[81,"Bip001 R Hand",[[6,"Bip001 R Finger0",-22,[0,"c0wI3ZZXlSAoxq5EKVbEZo",1,0],[1,0.20745021104812622,0.05669069290161133,0.12940382957458496],[3,0.7625060801962249,0.4272671113598833,-0.08812193716327978,-0.47776753490014384],[1,-105.27061024714571,-23.85524983138282,47.374108901816655]],[6,"Bip001 R Finger1",-23,[0,"1dXFrk/xxfF4mv5KGo0Pko",1,0],[1,0.2144753336906433,-0.02633523941040039,-0.0002695322036743164],[3,0.00852050608967541,0.0014097985892154582,0.18827795468144026,0.9820778101682612],[1,0.9993659180810737,-0.027095927597114162,21.705209010925373]],[12,"Bone009",-24,[0,"160uyGv2FSn4qUcFbpJ+0K",1,0],[1,0.22783297300338745,0.1078529953956604,-1.7005300521850586],[3,0.5145162304489943,-0.490295764021116,0.48460584506988236,0.5099414547883048],[1,1.0432720184326172,0.9999989867210388,1],[1,89.95069739927534,-87.16057116528395,-0.5895288174405287]]],[0,"abhvJtLc5YELG9uG+/W6FX",1,0],[1,0.5122831463813782,-5.960464477539063e-8,0],[3,0.9227514579131476,0.07445021489695781,0.07470077791472385,0.37068410567475457],[1,136.69825954123868,-4.832653576967103,11.11500052792832]],[3,"Bip001",1,[-25,-26],[0,"dcym+UfxReTa+sgSSfMDYs",1,0],[1,0.006295293569564819,0.8358689546585083,-0.05548858642578125],[3,0.457184380710454,0.5394278839978507,0.5394278839978507,-0.457184380710454],[1,-90,-99.4350681742064,0]],[81,"Bip001 L Hand",[[6,"Bip001 L Finger0",-27,[0,"96+ue6RrBQ66WGVe+hQdJh",1,0],[1,0.20745033025741577,0.05669069290161133,-0.1294039487838745],[3,0.6380314323256805,0.08115298418428679,0.010544588010625862,0.7656493297757869],[1,79.22494387747372,6.408505358565528,6.8749750490189125]],[6,"Bip001 L Finger1",-28,[0,"76XgbhGLxVvK/QoPYNGFh0",1,0],[1,0.21447548270225525,-0.02633523941040039,0.0002695322036743164],[3,-0.0003961778949944484,-0.000039826037589937423,-0.1000954569992293,0.9949777590203098],[1,-0.046560440161082725,-0.00927077508381012,-11.489331902843915]]],[0,"4eG+M3VbpWgrO2sY101IMU",1,0],[1,0.512283205986023,1.1920928955078125e-7,4.440892098500626e-16],[3,-0.7068251826029134,4.2163626412799475e-8,4.2130063927347266e-8,0.707388267670842],[1,-89.95437407813083,0.000006830189170012744,0]],[67,"monster_M_001",1,[[64,-29,[1,"74XlBZDbxYdK3YSFvWqtDV"],[0],[7],1,1,2]],[0,"5artov7+5Vx435qAktMiTc",1,0]],[54,"Bip001 Pelvis",6,[-30],[0,"47E+YOKphQZJRtqHeOqofH",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[3,"Bip001 Spine",9,[3],[0,"80vmjlW+xT+5XTQAsxldoo",1,0],[1,0.26835691928863525,0.002127472311258316,3.57162207365036e-7],[3,-0.0000021128378688168253,-6.665861334597422e-7,0.01597758419952739,0.99987235025189],[1,-0.00024098506844866903,-0.00007254404526517467,1.8309741915122573]],[3,"Dummy004",2,[-31],[0,"2eWfxkl+JbYL0PVsKZ8Mvb",1,0],[1,-0.07082700729370117,0.7166298627853394,-0.0062940046191215515],[3,0.7067794319838114,-0.021517502497377723,0.7067791935652284,0.021517508085313265],[1,176.51240060492108,-89.99998067647574,-1.353023651568393e-7]],[3,"Bone010",11,[-32],[0,"eclJ6bxzdaJbf41513tqzS",1,0],[1,7.450580596923828e-9,-0.1324460506439209,0],[3,0.1370333846289246,0.13501599097059816,-0.6990256732643424,0.6887348123891384],[1,92.24959601739155,92.08301387009578,-67.80191841703953]],[5,"Bone011",12,[[6,"Bone012",-33,[0,"d83x0zbYBRvbdCHql2dpUx",1,0],[1,0.18970704078674316,0,-2.384185791015625e-7],[3,3.2137361389572864e-8,-0.2585453106963138,0.0000018022847240557237,0.9659991316319583],[1,0.00005695394454365773,-29.96752704924242,0.00019855239489391694]]],[0,"7bie8c1/RQBLVRGg6QnLqg",1,0],[1,0.18845495581626892,-0.000004999339580535889,0],[3,-0.0015755049212440534,0.21203416935086186,0.007259133391411638,0.9772340220204876],[1,-0.3528414138074168,24.486244130574686,0.7746409084707662]],[5,"Bone007",2,[[6,"Bone008",-34,[0,"84/D+hIU9Tp6Y2mCV2lE55",1,0],[1,0.3215360641479492,1.4901161193847656e-8,0],[3,0.0014230069692016982,0.08671547323076333,0.016344038488014093,0.9960980243728189],[1,0.000019880729334029245,9.95069935941348,1.880058467766643]]],[0,"eckJlCzShUnK7Bctw9Fywz",1,0],[1,1.0107722282409668,0.9223159551620483,-0.0110040083527565],[3,0.13658505792897296,0.6937899647811329,0.6978979765382015,0.11374718046359368],[1,-90.6989042373325,-177.99405248699262,20.382792451409227]],[3,"Snake03_00",2,[-35],[0,"0ekeieIbZWKbA4pNZ8ckP7",1,0],[1,0.4913027286529541,-1.5660289525985718,0.6260451078414917],[3,0.9828170998211011,-0.03333227290355506,0.07595940574367756,0.16489292453404428],[1,160.76443049536132,-9.231991829492207,-2.3193201287384366]],[5,"Snake03_01",15,[[6,"Snake03_02",-36,[0,"a2cfeNLYJQsa5xYgnGcdXT",1,0],[1,0.5405089855194092,-0.000003814697265625,-7.450580596923828e-8],[3,-0.051361986232637574,0.041758649643081035,0.17972246067156636,0.9814876457095025],[1,-7.0987401001895885,6.15107678065323,20.39566522543664]]],[0,"b5Pc/KHcZYfJfxZ/UYnWou",1,0],[1,0.5569455623626709,-1.1920928955078125e-7,-1.043081283569336e-7],[3,-0.030292754771895657,-0.05465829332539751,-0.24294331492611265,0.9680254984822435],[1,-5.52966693292776,-7.835018090640249,-27.84227213480408]],[3,"Snake04_00",2,[-37],[0,"84bhvlfapYd62wD2i1dgTb",1,0],[1,0.4842193126678467,-1.5936418771743774,-0.6460533142089844],[3,0.16146969748329956,0.009189968902003473,-0.11886858905600439,0.9796496005215675],[1,19.10632661475625,3.3219105062810836,-13.293028808224859]],[5,"Snake04_01",17,[[6,"Snake04_02",-38,[0,"24NoU0VeRXxo6XDyQb/wng",1,0],[1,0.5405092239379883,0.000003814697265625,2.384185791015625e-7],[3,0.030842506742806988,-0.15198564275513857,-0.07453748459272361,0.9850854113043788],[1,2.211105093684249,-17.367839010125014,-8.987954354030984]]],[0,"3bd2LZZ6VWsI8Fk81ZwjOo",1,0],[1,0.55694580078125,1.1102230246251565e-16,-2.086162567138672e-7],[3,-0.010713920013417288,0.12212248910059875,0.25213751234990506,0.9598947777958905],[1,-5.3781695646130405,15.881774084972376,28.77911002085089]],[3,"Snake02_00",2,[-39],[0,"34R119B2ZdIa0efyA82noq",1,0],[1,0.3049478530883789,-0.488728791475296,1.263437271118164],[3,0.3950479651523844,-0.15511064329037855,0.24349679206110947,0.8721164519850283],[1,53.329764261056894,-29.054103227648973,17.58755404078638]],[5,"Snake02_01",19,[[6,"Snake02_02",-40,[0,"63vg2GG15fRIsBCIBRjo6w",1,0],[1,0.4091451168060303,-5.551115123125783e-17,-5.960464477539063e-8],[3,0.005713914966876069,0.09197623250760911,-0.07274688755069099,0.9930838908073902],[1,1.4319226144250838,10.686144547296982,-8.246747102774592]]],[0,"02pGkzWS5RUrsMgM2FIbP5",1,0],[1,0.3923511505126953,-0.0000010132789611816406,1.1102230246251565e-16],[3,-0.01201634317785598,-0.020594640089270276,-0.09690473410149118,0.9950080104225014],[1,-1.6294320880322712,-2.5296690336443266,-11.089785905171901]],[3,"Snake05_00",2,[-41],[0,"8442GF6mdXI5YWbKJo/iyl",1,0],[1,0.3049478530883789,-0.4887251555919647,-1.2717746496200562],[3,0.9108685056684446,0.0238287853475628,-0.14103834023886544,0.387116185340862],[1,134.48032823768534,16.020521881459125,-3.7720226004019963]],[5,"Snake05_01",21,[[6,"Snake05_02",-42,[0,"ddQlBmROZYpL91egjGT7Ie",1,0],[1,0.40914463996887207,1.1920928955078125e-7,1.1920928955078125e-7],[3,-0.0016205210420031178,0.0832160994711163,-0.018936535011280634,0.9963502709098504],[1,-0.004447302508380832,9.548547048594843,-2.1780248617648104]]],[0,"4c27WB/HtcmqPocjRqArKa",1,0],[1,0.3923511505126953,0.0000010132789611816406,1.1920928955078125e-7],[3,0.010942926649639115,-0.021184455640649247,0.14787355091373935,0.9887188094376034],[1,1.6718548082941498,-2.7043806757538467,16.974561028451312]],[3,"Snake01_00",2,[-43],[0,"38ZAu3A8Zd3IP7l95T3itu",1,0],[1,-0.3496628999710083,0.4691341817378998,1.0494390726089478],[3,0.2715985155725662,-0.10637422560102068,0.3883942630461715,0.8741102143891142],[1,45.345155568550524,-30.43327506102155,38.40503315560268]],[5,"Snake01_01",23,[[6,"Snake01_02",-44,[0,"b7jEe9ykle9ZHVw3gws6NM",1,0],[1,0.5604145526885986,2.220446049250313e-16,-8.940696716308594e-8],[3,0.0019355336385676028,0.006964810341679176,-0.015274403012439262,0.9998572086748447],[1,0.2340644473712525,0.801781910194571,-1.7487944770036215]]],[0,"8b1LoyxYJaxLSwForCh91n",1,0],[1,0.5125818252563477,-0.0000014901161193847656,0],[3,0.010415564291665978,-0.00978977046952703,-0.26277327538764755,0.9647517204735568],[1,0.9940936728502086,-0.8919385835975735,-30.47922243274694]],[3,"Snake06_00",2,[-45],[0,"76cGAGymtTwI6XdymAOn0j",1,0],[1,-0.3496626615524292,0.4691372811794281,-1.0664880275726318],[3,0.8265611731831087,0.4832737564217769,-0.12238118352277,0.26127753301750634],[1,125.76822953637175,42.12559594347819,47.303814188936]],[5,"Snake06_01",25,[[6,"Snake06_02",-46,[0,"58oz2I0htWV5bxYSeadjZv",1,0],[1,0.5604140758514404,2.384185791015625e-7,-2.9802322387695312e-8],[3,-0.0019356219985397693,0.006964734907215307,0.015274401155641527,0.9998572090576171],[1,-0.23407444250673903,0.8017734169270696,1.748794211017712]]],[0,"6fM7BzBTVeIJq72yX4OXna",1,0],[1,0.5125820636749268,0.000001430511474609375,-8.940696716308594e-8],[3,-0.008046885748829512,-0.01188384804620038,0.3260937250630507,0.9452284931485422],[1,-0.5430876248981581,-1.2532365060036306,38.07245009244907]],[3,"Bip001 L Clavicle",4,[-47],[0,"b1VvJiDDBUkYWpKZlViVNu",1,0],[1,-0.26825904846191406,-0.10199030488729477,0.21269501745700836],[3,0.7003988676524229,-0.05891770168939349,0.710222786069219,0.03941731557221863],[1,172.0126751637314,-90.90422007248347,-1.5209020835903806]],[3,"Bip001 L UpperArm",27,[-48],[0,"86KXYU3FVW6547ZCuLLaWF",1,0],[1,0.20820294320583344,-2.9802322387695312e-8,0],[3,-0.12663648943169514,0.4241265329945066,0.3595512188776481,0.8214638181673455],[1,-35.87588617089792,64.15250053649092,28.900946387684233]],[3,"Bip001 L Forearm",28,[7],[0,"a0DVNvvw1W8pRvpht6UWio",1,0],[1,0.5641331672668457,4.470348358154297e-8,-1.1920928955078125e-7],[3,-1.9556176159540715e-17,7.602980401668286e-17,-0.5086692038462095,0.8609620439127751],[1,5.186042017111889e-15,1.3183338010000188e-14,-61.150453341614266]],[3,"Bip001 R Clavicle",4,[-49],[0,"7c8TJ1v4dV65EUAAk9222Q",1,0],[1,-0.26825904846191406,-0.10198908299207687,-0.2126956433057785],[3,-0.70039872980014,0.058915952960024054,0.7102229459786642,0.03941949754309426],[1,-172.0126427568339,90.90422235567199,-1.5205823844389412]],[3,"Bip001 R UpperArm",30,[-50],[0,"c2siYOtx1RQ5JIvowrGw4d",1,0],[1,0.20820294320583344,2.9802322387695312e-8,0],[3,0.25814977681426926,-0.19948876207919058,0.24269448590371073,0.9135985513598347],[1,37.20300276861978,-31.39452785718178,19.904579427305286]],[3,"Bip001 R Forearm",31,[5],[0,"afcPK0Oz9eErhNOrUFpskp",1,0],[1,0.5641331672668457,2.220446049250313e-16,-1.1920928955078125e-7],[3,4.9591312325744706e-17,-2.4943721497209758e-17,-0.4493461691625925,0.8933577224487976],[1,6.361108937661871e-15,-1.696334878085474e-24,-53.40348515652033]],[3,"Bip001 Xtra01",6,[-51],[0,"8blSkUsmZTK6rJCKCJUynJ",1,0],[1,-0.6342772245407104,0.000012071337550878525,-0.5227375030517578],[3,0.17749346616686404,0.6918781927163172,0.6899686983352283,0.11723408731792002],[1,-90.94873164928636,-174.80405722384972,24.04057088081078]],[3,"Bip001 Xtra0102",33,[-52],[0,"b10kDbPTdTfofbtyq1KAQP",1,0],[1,0.9724041223526001,-0.00040841102600097656,0.0000035762786865234375],[3,0.007453510897151411,-0.029092477219821646,0.35711556163964225,0.9335772858094411],[1,2.6670342263460642,-4.58802620066076,41.786459136679916]],[3,"Bip001 Xtra0103",34,[-53],[0,"91/twqEGFU+qBc5qNLGbbQ",1,0],[1,0.6884965896606445,-0.0004330873489379883,-1.1920928955078125e-7],[3,0.00020985308187388573,-0.0005480541140721387,0.24118392132364547,0.9704792484609457],[1,0.043551124628488515,-0.07553607185131735,27.91283330612798]],[3,"Bip001 Xtra0104",35,[-54],[0,"4e8CIdICxYVLMmLZ+ad4Yc",1,0],[1,0.6155774593353271,-0.00042247772216796875,5.960464477539063e-8],[3,0.025255371131700222,-0.14390055975736182,0.17178449202402896,0.9742406701788652],[1,5.992911833103879,-17.81418307197578,19.11409516670665]],[5,"Bip001 Xtra0105",36,[[6,"Bip001 Xtra0106",-55,[0,"baWHLra9lbg7ado/9bmFxi",1,0],[1,0.5110671520233154,-0.00032329559326171875,-1.1920928955078125e-7],[3,0.01189593044223489,-0.06777698573827687,0.17323634097905313,0.9824733773529623],[1,2.85467962571392,-8.391116519960944,19.80302808604116]]],[0,"e0/PR25ttQi4A3g1sWsvg2",1,0],[1,0.5645923614501953,-0.0003821849822998047,2.384185791015625e-7],[3,0.022902058341459763,-0.1304897362484043,0.17211712824671307,0.9761268455593519],[1,5.448440880748097,-16.154136018008387,19.27116278934768]]],0,[0,4,1,0,0,1,0,-1,8,0,-2,6,0,-1,11,0,-2,14,0,-3,15,0,-4,17,0,-5,19,0,-6,21,0,-7,23,0,-8,25,0,-1,4,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,-2,27,0,-3,30,0,1,5,0,1,5,0,1,5,0,-1,9,0,-2,33,0,1,7,0,1,7,0,0,8,0,-1,10,0,-1,12,0,-1,13,0,1,13,0,1,14,0,-1,16,0,1,16,0,-1,18,0,1,18,0,-1,20,0,1,20,0,-1,22,0,1,22,0,-1,24,0,1,24,0,-1,26,0,1,26,0,-1,28,0,-1,29,0,-1,31,0,-1,32,0,-1,34,0,-1,35,0,-1,36,0,-1,37,0,1,37,0,9,1,2,1,4,3,1,10,5,1,32,7,1,29,55],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,7],[462,237,238,61,226,227,228,229,230,231,232,233,234,235,61]],[[[65,"Skin-0",707542537,["Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis","Bip001/Bip001 Xtra01","Bip001/Bip001 Xtra01/Bip001 Xtra0102","Bip001/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103","Bip001/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104","Bip001/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104/Bip001 Xtra0105","Bip001/Bip001 Xtra01/Bip001 Xtra0102/Bip001 Xtra0103/Bip001 Xtra0104/Bip001 Xtra0105/Bip001 Xtra0106","Bip001","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone006","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone006_L","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone004","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone005","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone005_R","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bone004_R","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Dummy004/Bone010/Bone011/Bone012","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Dummy004/Bone010/Bone011","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Dummy004/Bone010","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007/Bone008","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone007","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bone009","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake01_00/Snake01_01/Snake01_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake01_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake01_00/Snake01_01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake02_00/Snake02_01/Snake02_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake02_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake02_00/Snake02_01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake03_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake03_00/Snake03_01/Snake03_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake03_00/Snake03_01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake06_00/Snake06_01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake06_00/Snake06_01/Snake06_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake06_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake05_00/Snake05_01/Snake05_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake05_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake05_00/Snake05_01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake04_00/Snake04_01/Snake04_02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake04_00","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Snake04_00/Snake04_01"],[[[7,-3.5075085946800755e-8,-0.000001415453198205796,1,0,0.9994893670082092,-0.03195104002952576,-1.0168022868128901e-8,0,0.03195103630423546,0.999489426612854,0.0000014158513295114972,0,-1.101957082748413,0.08861508965492249,-0.00629518972709775,1],[7,-4.6822469812468626e-7,-0.0000016368284150303225,1,0,0.9868444800376892,0.16167235374450684,7.266949069162365e-7,0,-0.16167233884334564,0.9868444800376892,0.0000015395961554531823,0,-1.3851369619369507,-0.18176141381263733,-0.00629621185362339,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,4.370756556681954e-8,-0.0000013868002497474663,0,-4.371138828673793e-8,1,-0.0000027577070795814507,0,-0.8358689546585083,0.055488571524620056,-0.006294287741184235,1],[7,-0.0000013654527037942898,-0.000002895767238442204,1,0,-0.0891140028834343,0.9960214495658875,0.000002762565372904646,0,-0.9960215091705322,-0.0891139954328537,-0.0000016180736110982252,0,-0.6589836478233337,-0.37334179878234863,-0.006296898704022169,1],[7,-0.0000013661743878401467,-0.000002887412620111718,1,0,-0.08301974833011627,0.9965478777885437,0.000002764025794022018,0,-0.9965479373931885,-0.08301974833011627,-0.0000016011705383789376,0,-1.6332751512527466,-0.3628098964691162,-0.006296869367361069,1],[7,-0.0000013661743878401467,-0.000002887412620111718,1,0,-0.08301974833011627,0.9965478777885437,0.000002764025794022018,0,-0.9965479373931885,-0.08301974833011627,-0.0000016011705383789376,0,-2.321542501449585,-0.36231985688209534,-0.006296867970377207,1],[7,-0.0000013661743878401467,-0.000002887412620111718,1,0,-0.08301974833011627,0.9965478777885437,0.000002764025794022018,0,-0.9965479373931885,-0.08301974833011627,-0.0000016011705383789376,0,-2.9369661808013916,-0.3618703782558441,-0.006296866573393345,1],[7,-0.0000013661743878401467,-0.000002887412620111718,1,0,-0.08301974833011627,0.9965478777885437,0.000002764025794022018,0,-0.9965479373931885,-0.08301974833011627,-0.0000016011705383789376,0,-3.5014195442199707,-0.3614635467529297,-0.00629686564207077,1],[7,-0.0000013661743878401467,-0.000002887412620111718,1,0,-0.08301974833011627,0.9965478777885437,0.000002764025794022018,0,-0.9965479373931885,-0.08301974833011627,-0.0000016011705383789376,0,-4.012368679046631,-0.3611198365688324,-0.006296864710748196,1],[7,0.000001370906943520822,1,-6.123234262925839e-17,0,4.371139183945161e-8,-5.986301677887024e-14,1,0,1,-0.000001370906943520822,-4.371138828673793e-8,0,0.05548858270049095,-0.006295369938015938,-0.8358689546585083,1],[7,8.340179391552738e-8,-0.000001405232637807785,1,0,0.9981479048728943,-0.06083415076136589,-1.6873345032308862e-7,0,0.06083414703607559,0.9981479644775391,0.0000013975562751511461,0,-2.330247640609741,0.31124550104141235,-0.006294259335845709,1],[7,0.9995233416557312,-0.028472086414694786,0.011940223164856434,0,-0.01641157455742359,-0.16239231824874878,0.9865897297859192,0,-0.026151269674301147,-0.9863154292106628,-0.16278214752674103,0,-0.19380183517932892,0.06435863673686981,-1.963807463645935,1],[7,0.9999321699142456,0.011613781563937664,0.0008999004494398832,0,-0.0010100607760250568,0.009482929483056068,0.9999544620513916,0,0.011604719795286655,-0.9998875856399536,0.009494015946984291,0,-0.4220089614391327,-0.2900475263595581,-1.9390902519226074,1],[7,0.998771607875824,0.04954257607460022,0.0008999005658552051,0,-0.0013691133353859186,0.009437779895961285,0.9999544620513916,0,0.04953182861208916,-0.9987274408340454,0.009494015015661716,0,-0.9744278192520142,-0.32725265622138977,-1.9390901327133179,1],[7,0.9523165225982666,0.22431780397891998,0.2068205028772354,0,-0.16606275737285614,-0.18759185075759888,0.9681076407432556,0,0.2559616267681122,-0.9562901258468628,-0.14139598608016968,0,-1.2853199243545532,-0.12080696225166321,-2.187634229660034,1],[7,0.998771607875824,-0.0008999027195386589,0.04954257607460022,0,-0.0013691133353859186,-0.9999544620513916,0.009437736123800278,0,0.04953182861208916,-0.00949397124350071,-0.9987274408340454,0,-1.7011864185333252,1.965425729751587,-0.327501118183136,1],[7,0.998771607875824,-0.0008604507893323898,0.04954327642917633,0,-0.0013691133353859186,-0.9999465942382812,0.010234015062451363,0,0.04953182861208916,-0.010289272293448448,-0.9987195730209351,0,-1.486711025238037,1.938828945159912,-0.3287965953350067,1],[7,-0.999523401260376,0.028469813987612724,0.011941162869334221,0,-0.01641213148832321,-0.1623922735452652,-0.9865897297859192,0,-0.026148878037929535,-0.9863154888153076,0.16278210282325745,0,-0.18121644854545593,0.06400009989738464,1.9636571407318115,1],[7,-0.9999321103096008,-0.011616522446274757,0.000899874372407794,0,-0.0010100607760250568,0.009482929483056068,-0.9999544620513916,0,0.011607460677623749,-0.9998875260353088,-0.009494018740952015,0,-0.40941935777664185,-0.28990140557289124,1.9390785694122314,1],[7,-0.9987714290618896,-0.04954531788825989,0.0008998744888231158,0,-0.0013691133353859186,0.009437779895961285,-0.9999544620513916,0,0.049534570425748825,-0.9987273216247559,-0.009494016878306866,0,-0.9618528485298157,-0.32662901282310486,1.9390785694122314,1],[7,-0.9523158073425293,-0.2243204563856125,0.20682089030742645,0,-0.16606275737285614,-0.1875918209552765,-0.9681076407432556,0,0.2559642791748047,-0.9562894701957703,0.14139539003372192,0,-1.2733299732208252,-0.11798298358917236,2.185029983520508,1],[7,-0.9987714290618896,0.0008998766425065696,0.04954531788825989,0,-0.0013691133353859186,-0.9999544620513916,-0.009437736123800278,0,0.049534570425748825,-0.009493974037468433,0.9987273216247559,0,-1.6886115074157715,1.9654141664505005,0.32687750458717346,1],[7,-0.9987714290618896,0.0008604225004091859,0.049546018242836,0,-0.0013691133353859186,-0.9999465942382812,-0.010234014131128788,0,0.049534570425748825,-0.010289275087416172,0.9987193942070007,0,-1.4741361141204834,1.9388179779052734,0.3281729519367218,1],[7,-0.6241428256034851,0.906904935836792,-0.25000008940696716,0,-1.3525071144104004,-0.08953942358493805,0.6722005009651184,0,1.080697774887085,0.41171133518218994,0.6968833208084106,0,2.1903717517852783,0.2749790549278259,-1.5891636610031128,1],[7,0.3391512930393219,0.9069046974182129,0.25000011920928955,0,-0.7349341511726379,0.08953918516635895,0.6722012162208557,0,0.5872376561164856,-0.41171151399612427,0.6968827247619629,0,1.204803466796875,-0.23597486317157745,-1.5784125328063965,1],[7,0.9994907379150391,0.031149983406066895,0.00693416828289628,0,-0.0059293173253536224,-0.03223583847284317,0.9994626045227051,0,0.031356777995824814,-0.998994767665863,-0.03203471750020981,0,-0.4006909132003784,-0.19461147487163544,-2.087789297103882,1],[7,0.46581658720970154,-0.9383454322814941,0.05117318779230118,0,-1.2092220783233643,-0.3045140504837036,0.3458009958267212,0,-0.42086464166641235,-0.16364343464374542,-0.9369113445281982,0,2.1741013526916504,0.7551455497741699,-1.078987717628479,1],[7,-0.3418913185596466,-0.9383452534675598,-0.05117494612932205,0,-0.8875205516815186,0.30451396107673645,0.3458016812801361,0,-0.30889779329299927,0.16364538669586182,-0.9369112253189087,0,1.6019415855407715,-0.7380228638648987,-1.0780553817749023,1],[7,-0.9994800686836243,0.03115106374025345,-0.008314209058880806,0,-0.007309405133128166,0.03223197162151337,0.9994536638259888,0,0.03140205889940262,0.9989939332008362,-0.031987544149160385,0,-0.3977811932563782,0.19461925327777863,-2.088339328765869,1],[7,0.000027850035621668212,1,0.00011712892592186108,0,0.00028290474438108504,-0.00011713679850799963,1,0,1.0000001192092896,-0.00002781689545372501,-0.00028290797490626574,0,-1.0532896518707275,0.003083575516939163,-2.207770824432373,1],[7,0.00002397187017777469,1,0.00011609964712988585,0,0.001331886975094676,-0.00011613147216849029,0.9999991655349731,0,0.9999992251396179,-0.000023817216060706414,-0.001331889652647078,0,-0.8658979535102844,0.0030771454330533743,-2.206664562225342,1],[7,-0.014830748550593853,0.9998900294303894,0.00011494362115627155,0,0.00774313835427165,-1.036598433756808e-7,0.9999700784683228,0,0.9998601675033569,0.01483119372278452,-0.007742284797132015,0,-0.6915193796157837,-0.010003582574427128,-2.201068639755249,1],[7,-0.0037498052697628736,0.9999929666519165,0.00012041653099004179,0,-0.9926326274871826,-0.003736788872629404,0.12110480666160583,0,0.12110438942909241,0.0003345900622662157,0.9926397800445557,0,2.858168601989746,0.015352535992860794,-1.26212477684021,1],[7,0.0007073835586197674,0.9999997615814209,-0.000001303361500504252,0,-0.9567800760269165,0.0006771896150894463,0.29081183671951294,0,0.2908117473125458,-0.00020446845155674964,0.9567803740501404,0,2.918652057647705,0.0026434501633048058,-1.7370389699935913,1],[7,3.1302894853979524e-7,1.000001072883606,-1.8626471387506172e-7,0,4.18983603367451e-8,1.8626489861617301e-7,1,0,0.9585227966308594,-3.2657470683261636e-7,-4.371132789060539e-8,0,1.843200922012329,1.8019686937332153,-1.8492995500564575,1],[7,0.15071283280849457,0.5545510649681091,0.8183876872062683,0,0.9183403253555298,-0.3850066065788269,0.09176595509052277,0,0.36597368121147156,0.7377282381057739,-0.5672919154167175,0,-3.021399974822998,-0.3783356845378876,-0.8846484422683716,1],[7,0.45484983921051025,0.3136374354362488,0.8335124254226685,0,0.4572961926460266,-0.8853757381439209,0.083605095744133,0,0.7641935348510742,0.343134343624115,-0.5461382269859314,0,-1.592354655265808,1.3152717351913452,-0.8925710916519165,1],[7,0.1789311021566391,0.5463470220565796,0.8182226419448853,0,0.9073251485824585,-0.4132241904735565,0.0775035098195076,0,0.38045328855514526,0.7285262942314148,-0.5696529746055603,0,-2.4831178188323975,-0.2823384702205658,-0.8436802625656128,1],[7,0.3807041645050049,0.6654565334320068,0.6420527100563049,0,0.9241008162498474,-0.2987205684185028,-0.23833471536636353,0,0.033192966133356094,0.6840565204620361,-0.7286731600761414,0,-3.6822400093078613,0.13802099227905273,-0.624954104423523,1],[7,0.6353104710578918,0.40015527606010437,0.6604968905448914,0,0.6596636772155762,-0.7258943915367126,-0.19473320245742798,0,0.4015275537967682,0.5594218373298645,-0.7251362204551697,0,-2.317653179168701,1.793578863143921,-0.7797361612319946,1],[7,0.46989181637763977,0.6011887788772583,0.6463539004325867,0,0.8731439113616943,-0.42413610219955444,-0.24026654660701752,0,0.12969651818275452,0.6772593259811401,-0.7242224812507629,0,-3.2165496349334717,0.6583425402641296,-0.6240460276603699,1],[7,0.056393176317214966,0.31418150663375854,-0.9476864337921143,0,0.9837597608566284,-0.1794871687889099,-0.0009646944236010313,0,-0.1704006940126419,-0.9322413206100464,-0.3192010223865509,0,-3.2086410522460938,-1.2895221710205078,0.058761116117239,1],[7,0.2895028591156006,0.3244149684906006,-0.9005236029624939,0,0.9564710259437561,-0.06192385032773018,0.285180926322937,0,0.03675307333469391,-0.9438855648040771,-0.32822075486183167,0,-3.954258680343628,-1.5329557657241821,-0.9662125110626221,1],[7,0.18279577791690826,0.33364129066467285,-0.9248075485229492,0,0.9060320854187012,0.30803006887435913,0.29021215438842773,0,0.38169530034065247,-0.8909549713134766,-0.24598313868045807,0,-2.5731260776519775,-2.920438051223755,-0.8342823386192322,1],[7,-0.17893080413341522,0.5463464856147766,-0.8182229399681091,0,0.9073250889778137,0.41322416067123413,0.07750336080789566,0,0.3804532587528229,-0.7285268902778625,-0.5696521997451782,0,-2.4839158058166504,0.2847752869129181,-0.8473307490348816,1],[7,-0.15071265399456024,0.5545504689216614,-0.8183882832527161,0,0.9183403253555298,0.3850066363811493,0.09176576882600784,0,0.36597365140914917,-0.7377288937568665,-0.5672913193702698,0,-3.0220725536346436,0.38080865144729614,-0.8882997632026672,1],[7,-0.45484960079193115,0.31363746523857117,-0.8335124254226685,0,0.45729655027389526,0.8853757381439209,0.08360490202903748,0,0.7641934156417847,-0.3431348502635956,-0.5461379289627075,0,-1.5943841934204102,-1.3138725757598877,-0.8962888717651367,1],[7,-0.3807041347026825,0.6654553413391113,-0.6420537829399109,0,0.9241006374359131,0.2987203299999237,-0.2383350133895874,0,0.03319321572780609,-0.6840571165084839,-0.7286725044250488,0,-3.6806204319000244,-0.14085319638252258,-0.6222232580184937,1],[7,-0.635310173034668,0.4001554250717163,-0.6604970693588257,0,0.659663736820221,0.7258942127227783,-0.19473327696323395,0,0.4015273153781891,-0.5594220757484436,-0.7251362204551697,0,-2.314950942993164,-1.7952805757522583,-0.7769266366958618,1],[7,-0.46989133954048157,0.6011883020401001,-0.6463545560836792,0,0.8731439113616943,0.42413565516471863,-0.2402665913105011,0,0.1296965777873993,-0.6772598624229431,-0.7242218852043152,0,-3.214550733566284,-0.6608995199203491,-0.6212970614433289,1],[7,-0.2895025610923767,0.32441452145576477,0.9005239009857178,0,0.9564712643623352,0.061923567205667496,0.28518062829971313,0,0.036753099411726,0.9438858032226562,-0.3282202482223511,0,-3.95367431640625,1.5323010683059692,-0.9680304527282715,1],[7,-0.05639283359050751,0.31418123841285706,0.9476866722106934,0,0.9837596416473389,0.1794872283935547,-0.0009649982675909996,0,-0.17040081322193146,0.9322415590286255,-0.319200724363327,0,-3.208526849746704,1.2888872623443604,0.05684772506356239,1],[7,-0.18279562890529633,0.3336416780948639,0.9248075485229492,0,0.9060319662094116,-0.30803024768829346,0.2902123034000397,0,0.3816956877708435,0.8909544944763184,-0.2459835708141327,0,-2.5727555751800537,2.9197640419006348,-0.8361524939537048,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[23,"Material #150",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[463,4]],[[[18,".bin",75430482,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":255960,"length":58524,"count":14631,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":255960,"count":3555,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52]]},"minPosition",8,[1,-2.3046398162841797,-0.09253381937742233,-4.555646896362305],"maxPosition",8,[1,2.286938190460205,4.915341854095459,1.383073329925537]]],-1],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c6F2Y8Bd9P3pHMf/TTiFnB"]}],[1],0,[],[],[]],[[[19],[32,"s1_02",[-2],[0,"afgFcgQuNW8bt97mLtHZ6v",-1,0]],[27,"Plane026",1,[[30,-3,[1,"beFC5cxfJXp6R+rR0N5hnn"],[0],[7],1]],[0,"904CadtkFRHbltLIZjAfO1",1,0],[1,0.22299803793430328,0.22299803793430328,0.22299803793430328]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[464,124]],[[{"base":"2,2,0,0,0,0","mipmaps":["deLtUDkolFWI1cAExPGeDV@ba695"]}],[1],0,[],[],[]],[[[18,".bin",1299258723,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":128,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":128,"count":4,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-1.8375725746154785,-1.4460421800613403,-8.463534868496936e-7],"maxPosition",8,[1,1.8375731706619263,1.4460421800613403,-8.195402756427939e-7]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[[26,"Material #13",1,[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALPHA_TEST":false,"USE_TRANSPARENCY_MAP":true,"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"transparencyMap",6,0,"mainTexture",6,1]],11]]],0,0,[0,0,0],[14,10,8],[274,274,4]],[[[26,"Rock_02","0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.6},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[43,24]],[[{"name":"Super_Circle","rect":{"x":727,"y":499,"width":111,"height":111},"offset":{"x":0,"y":0},"originalSize":{"width":111,"height":111},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[23,"Material #429",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":1},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[465,4]],[[[23,"Material #429",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[466,4]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["dfgKQvAhdPBptDqRUtQppv@475e3"]}],[1],0,[],[],[]],[[[18,".bin",2128135357,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1536,"length":480,"count":120,"stride":4}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":6592,"length":1356,"count":339,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1536,"count":48,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]},{"view":{"offset":2016,"length":4576,"count":143,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.3647168278694153,-1.228991985321045,-0.355316162109375],"maxPosition",8,[1,0.36471685767173767,0.5698835849761963,0.37411755323410034]]],-1],0,0,[],[],[]],[[[19],[32,"Weapon_Stone_01",[-2],[0,"24uprM61tYFJLo3O8fAtCZ",-1,0]],[60,"Bullet",1,[[30,-3,[1,"6akH0X+O1ftqGzQ3gyArLG"],[0,1],[7],2]],[0,"972h0zsnRZVZe2ug0ZFlw9",1,0],[1,-3.142227456010005e-7,-0.003170421114191413,0.00008141460421029478],[3,-0.7071067215818992,0,0,0.7071068407911908],[1,-89.9999903406537,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0,0],[-1,-2,6],[467,468,253]],[[{"base":"2,2,0,0,0,0","mipmaps":["dfgKQvAhdPBptDqRUtQppv@12a7b"]}],[1],0,[],[],[]],[[[33,"Monster_5"],[94,"Monster_5",[-13],[[[2,-2,[1,"ddntJakipP+biuQmY9SyGO"],[5,0,0]],[268,true,58,30,[40,50,60],-8,[1,"7ctEom6oNHnrvsrwXN79Dn"],[-7],[-6],[-5],-4,-3,33,34],-9,[66,8,4,-10,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[150,-12,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-11]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[134,"RootNode",[-15,-16,-17,-18],[-14],[0,"b35XOBJMxG2qmXBVacjm7r",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.2,1.2,1.2],[1,90,0,0]],[77,"RootNode",1,[-20,-21,-22,-23],[[40,-19,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[28,29,30,31],32]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[81,"Bip001 Head",[[6,"Bip001 Ponytail2",-24,[0,"86tByZu2VDl5EEXODAaqMQ",1,0],[1,0.7986867427825928,-0.2681947648525238,-0.8114317059516907],[3,0.6679535411346154,-0.09525775771362249,-0.5855556045541894,0.4493202203955194],[1,139.78949385021687,66.97263481637215,-40.802940997620404]],[6,"Bip001 Ponytail1",-25,[0,"5czKU0qEJHLIXn0nUQvmCK",1,0],[1,0.7986869812011719,-0.26819923520088196,0.8114302754402161],[3,0.6679534909838712,-0.09526104476789818,0.5855550764000657,-0.4493202863596315],[1,-139.78964106477392,-66.97252542981963,-40.80324257524031]],[12,"Bone001",-26,[0,"c0yy4SNm5K4KqUWxy2AXmF",1,0],[1,0.23102664947509766,-0.0127943754196167,-0.0028874806594103575],[3,0.43989485980999016,0.5536178410701154,0.5536182583026333,0.43989387633334065],[1,1.8299598693847656,3.9113073348999023,1.0000005960464478],[1,-90.00033652202865,-179.99963082271884,76.93997112083406]],[12,"Bone002(mirrored)",-27,[0,"82ficIBcxOApx9vuBeCfDH",1,0],[1,0.3994925022125244,0.3463113307952881,0.8539996147155762],[3,0.12832687697897768,0.6939008779384127,0.6888784117937714,0.16577188544989618],[1,1.000000238418579,2.5227439403533936,2.5227441787719727],[1,-88.8738064742762,176.6584475315498,23.984256756865868]],[12,"Bone002",-28,[0,"27T6w9lglFIY/ZOt4McUri",1,0],[1,0.3994920253753662,0.34631407260894775,-0.8544054627418518],[3,0.1657724125688811,0.6888773620913348,0.6939019145676067,0.1283262256461492],[1,1.0000003576278687,2.52274489402771,2.5227463245391846],[1,-91.12639577623668,-176.65830711763275,23.98424047417892]]],[0,"04Qamds4ZGvaINxcqzGXQ0",1,0],[1,0.11547517776489258,0,1.6940658945086007e-21],[3,-1.0225193786709588e-8,0.0000012562494183241022,-0.46136273859426497,0.8872116001468994],[1,0.00011383849141122828,0.00022145384200751981,-54.950155093051485]],[119,"LightBG",3,[-30,-31],[[2,-29,[1,"749hgcuqRL87M7tMH6QQK/"],[5,0,0]]],[0,"cdNyyNL9hNFaMrcPzccxe3",1,0],[1,0,45,-135]],[76,"Bip001 Pelvis",[-32,-33,-34],[0,"9dzaJgiqNH/rJeU9nAm+kb",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[-35,-36,4],[0,"4fdh/Dcb9OHYHg6nkyrUYA",1,0],[1,0.6768262386322021,0.15322548151016235,1.9995559341623448e-7],[3,5.050049470440369e-14,-7.564381234415511e-7,0.2727278511709916,0.9620912218678025],[1,0.000027771804358597268,-0.00009796947135100628,31.653309160279544]],[20,"Bip001 L Hand",[-37,-38,-39],[0,"c3GQetlv5Dh7eJAnrlsTzY",1,0],[1,0.6830113530158997,1.3877787807814457e-17,2.384185791015625e-7],[3,-0.552500255182949,-0.02206761418838907,-0.16797228377256115,0.816113840288865],[1,-69.88164065354198,-13.2313836171131,-14.464747726386458]],[20,"Bip001 R Hand",[-40,-41,-42],[0,"0a93320XROFI5PqTga/e/P",1,0],[1,0.6830112934112549,2.220446049250313e-16,0],[3,0.6183826932197208,0.046974413163956424,-0.09253887845373841,0.7789947401675772],[1,77.35608128118281,10.855547819383672,-4.938032514349887]],[72,"RootNode",[-44],[[40,-43,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[18,19,20],21]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",10,[2],[[74,1,0,-45,[1,"0cCuiskZ1LlaHSvmTemF09"],[16],[7],17]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[62,"Bip001",2,[[[6,"Bip001 Footsteps",-46,[0,"105MlE7P9E+YV3RKrdTEl5",1,0],[1,0.03314083069562912,4.3461082555040775e-7,-1.4983811378479004],[3,-0.007818265827490229,-0.007818481894327801,0.707063079733205,0.7070640334075226],[1,0,-1.267029176424895,90]],6],4,1],[0,"9ctspCbCFMeqjZi2+op+Vx",1,0],[1,0,1.5017086267471313,-6.952732611864576e-9],[3,-0.494441432515029,-0.49444059804998075,-0.5054975877648116,0.5054981242066283],[1,-90.00001620990938,-89.99992162726208,-1.2670464318490349]],[43,"Bip001 Spine1",[[7,[12,"bombs",-47,[0,"804nj7/yNM3JVQTa8p1IeC",1,0],[1,-1.48138427734375,-1.4991543292999268,0.041518598794937134],[3,0.6932198902203283,-0.13945241073075737,0.6932186981274497,0.13945266405049406],[1,0.7692750692367554,0.7692751288414001,0.7692750692367554],[1,157.25162799602003,-89.99990125555246,0.000001073236163722799]]],1,4],[0,"a41JWG6KRKBoztj/qADe0R",1,0],[1,0.4881800413131714,-0.0004372447729110718,-1.2126974979764782e-9],[3,-4.1198950258008025e-15,-3.1639780515280245e-7,0.11407476025703019,0.9934721682423725],[1,0.00000424647222132246,-0.00003698234760869216,13.100523051673761]],[195,"SparkParticles",[-49],[[8,-48,[1,"cdyZxHqQdKZaqMr0Nws3GF"],[5,0,0],[0,0,0]]],[0,"5cywEYLpJGpYgtJeYq981J",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.01,0.01,0.01],[1,90,0,0]],[67,"Particle",14,[[8,-50,[1,"a5dKd9e41IcKuJ3q11Lqz+"],[5,0,0],[0,0,0]],[261,"Particle_1<ParticleSystem>",1,60,0.5,0.2,180,100,50,510,300,0,true,2,-51,[1,"68wF4AyfNNcbg0u3bodJ+L"],[0,20,20],[0,0,-1000],[4,4278235135],[4,3342336],[4,4278190335],3,4,5]],[0,"9eHx1/lo5IkaADTN8dFc2C",1,0]],[38,"Light-001",5,[[8,-52,[1,"65VoUYO6NL04KVm9sbYJyl"],[5,0,0],[0,0,0]],[262,"Light<ParticleSystem>",1,20,1.5,1,0,360,250,500,50,20,50,0,0,0,true,1,-53,[1,"bbt/6/F0RHGbVCZivk8JSz"],[4,1744830719],[4,65315],22,23]],[0,"d4KaHiL6VEfrAnEhIC4VT0",1,0],[1,-5,0,0]],[38,"Particle_1",5,[[8,-54,[1,"23ajLBv9JO7IW/8YmCHEep"],[5,0,0],[0,0,0]],[263,"Particle_1<ParticleSystem>",1,5,2,0.25,30,20,10,-1,50,20,0,true,1,-55,[1,"d8yZ5odFtAfZ4kWrHVEDkW"],[0,50,50],[0,0,20],[4,4278237951],[4,6876671],24,25]],[0,"02sKgfguFAU5s8SQRwK2G2",1,0],[1,-5,0,0]],[48,"Odds",3,[-56,-57],[0,"6camD6DmdPeo3YvDHaBOuQ",1,0]],[108,"OddsNum",18,[[[2,-58,[1,"e3QeU41CNKGZDLbNwDAhLU"],[5,33.26,32]],-59],4,1],[0,"fbpi6A5eJEUrqJtZGYs87E",1,0],[1,1.5,10,62]],[78,"FloorNode",3,[-60],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",20,[[113,1,-61,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",3,[10],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"2fQ24+QdBBApQWi5ED7JfS",1,0],[1,0,2.8,0]],[133,"monster_SP_002",2,[-62],[0,"8euRRZABNO1aQLlcRijCtI",1,0],[1,0,0,0.27233123779296875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[95,1,0,24,[1,"446NF097RPmrvio/dpF36Z"],[2],[7],2],[3,"Bip001 Spine",6,[13],[0,"9bJeTIOy1JYY9vY2ROjYMl",1,0],[1,0.3775414228439331,-0.0003868862986564636,5.241087137619616e-7],[3,-0.0000021086065688398778,-6.994742242356259e-7,0.04657720283039849,0.9989146931402902],[1,-0.00023866848317810805,-0.0000691123395994971,5.339286015271913]],[3,"Bip001 L Clavicle",7,[-63],[0,"035uyB6x9LRJYQ2tewjuFP",1,0],[1,-0.2363729476928711,-0.02701544761657715,0.3379834294319153],[3,0.654324899971696,-0.2260737605415564,0.7034297105423941,0.16104726758896856],[1,147.98899472859662,-95.28250951740053,-3.9726634853712968]],[3,"Bip001 L UpperArm",27,[-64],[0,"a4ljVE22JPjYbMzZv6u/Ve",1,0],[1,0.30420196056365967,1.1102230246251565e-16,2.384185791015625e-7],[3,0.006887236169055859,0.4450461880407883,0.07775532482095278,0.8920989664551254],[1,-3.2979344195755598,53.26715983746942,8.329239717374646]],[3,"Bip001 L Forearm",28,[8],[0,"4aMC7d2QNBPolR/Alx599f",1,0],[1,0.7790260314941406,0,2.384185791015625e-7],[3,9.616237513452544e-18,-5.992386769124505e-17,-0.37212910664211035,0.9281809780370125],[1,-2.119558606492523e-15,-8.247873047902274e-15,-43.69396972697518]],[5,"Bip001 L Finger0",8,[[6,"Bip001 L Finger01",-65,[0,"34G0q2eA5A+Yt8iU4uHIbK",1,0],[1,0.14324843883514404,-5.960464477539063e-8,-1.1920928955078125e-7],[3,-1.3488532315842122e-8,-1.6191007941940224e-8,0.09067996012175883,0.9958800855686973],[1,-0.0000013939856737394116,-0.0000017360988556967038,10.405451788499462]]],[0,"b1iEJwiNhOrarTccBfMLEp",1,0],[1,0.10676467418670654,0.06541752815246582,-0.16025078296661377],[3,0.6160864882031531,0.2728873812349566,0.021978775224875815,0.7385708155998636],[1,75.04307236079569,23.860536567982205,21.636095223568823]],[5,"Bip001 L Finger1",8,[[6,"Bip001 L Finger11",-66,[0,"28HVE7lBdKAa4pygTlFgfj",1,0],[1,0.13652074337005615,0,1.1102230246251565e-16],[3,1.8187247211608923e-8,-1.4985072695251778e-8,0.22049446340744977,0.9753882260959787],[1,0.0000026711691725385087,-0.0000023643312415909614,25.476153719796113]]],[0,"b4yjUqyNZCvIxnProZVnx8",1,0],[1,0.328582763671875,-0.010582208633422852,-0.05439960956573486],[3,0.06736534832845753,-0.019247459244673065,0.1467918455369253,0.9866831301086857],[1,8.318589205001075,-3.456906908282819,16.68327132093423]],[5,"Bip001 L Finger2",8,[[6,"Bip001 L Finger21",-67,[0,"0aHuySoR9AeqyoZSosKTbi",1,0],[1,0.12787997722625732,4.440892098500626e-16,-5.960464477539063e-8],[3,4.3803792085477774e-8,1.3354692183648446e-9,0.284363695274309,0.9587164798885737],[1,0.00000568883192019403,-0.0000015277340043504454,33.041634712504376]]],[0,"83fnYJiz9Gv4IyGZhURsnn",1,0],[1,0.3275125026702881,-0.010309934616088867,0.11389482021331787],[3,-0.034115370501866256,0.004978365750759077,0.2571161995863449,0.9657653013440932],[1,-4.522511181730773,1.7927101449206537,29.754727032161174]],[3,"Bip001 R Clavicle",7,[-68],[0,"34FyfAwKlKR7NR14VDsM/B",1,0],[1,-0.23637306690216064,-0.027013540267944336,-0.33798307180404663],[3,-0.6698866360457585,0.17435295551658805,0.6901329625880352,0.21111474533861851],[1,-148.3737526215052,90.76705871599373,3.3136036192481955]],[3,"Bip001 R UpperArm",33,[-69],[0,"a2FT3sI45JfrGHU0nnTed7",1,0],[1,0.3042020797729492,5.960464477539063e-8,4.440892098500626e-16],[3,0.14084686039113256,-0.406413159064692,0.012120736504895084,0.902686874726556],[1,15.38318059973498,-47.758935102685754,-5.313291605399097]],[3,"Bip001 R Forearm",34,[9],[0,"03GyPpWYhLDrEnqQ1rufto",1,0],[1,0.7790259718894958,2.9802322387695312e-8,0],[3,-2.4708344673214953e-17,4.736067569697813e-17,-0.5007380815567494,0.8655988526325957],[1,5.35068532825555e-16,6.5793327220305815e-15,-60.09768621667314]],[5,"Bip001 R Finger0",9,[[6,"Bip001 R Finger01",-70,[0,"c0Nq9lcZpLor98swGNOSD3",1,0],[1,0.1432485580444336,5.960464477539063e-8,4.440892098500626e-16],[3,-1.3512371441764614e-9,1.4839770542902324e-8,0.09067998228970582,0.9958800835501925],[1,-3.135616259001312e-7,0.000001736098786735047,10.405454339267992]]],[0,"63HaQCAtZATJIYmHmLqJQ8",1,0],[1,0.10676467418670654,0.06541728973388672,0.16025081276893616],[3,-0.6160864618635129,-0.27288736956816045,0.021978716543216217,0.7385708436282749],[1,-75.04306863628443,-23.860540153862516,21.63608818443988]],[5,"Bip001 R Finger1",9,[[6,"Bip001 R Finger11",-71,[0,"b5/aqisPxKUbEZwKahAlj9",1,0],[1,0.13652092218399048,2.384185791015625e-7,5.960464477539063e-8],[3,-2.180162533136675e-8,-4.9284349793111235e-9,0.22049446340744983,0.975388226095979],[1,-0.0000025613208930940607,2.8807729091226997e-14,25.476153719796176]]],[0,"128d6PcfFEv6ARr9vwol84",1,0],[1,0.328582763671875,-0.010582208633422852,0.05439960956573486],[3,-0.06736535618728531,0.01924745936131642,0.14679180172302866,0.9866831360881779],[1,-8.318589868437373,3.456906628327083,16.683266235369477]],[5,"Bip001 R Finger2",9,[[6,"Bip001 R Finger21",-72,[0,"4bXzpViTBKmp7VKdIpas4x",1,0],[1,0.12787997722625732,2.384185791015625e-7,1.1102230246251565e-16],[3,2.0974938527796693e-8,-2.4864300139765154e-8,0.28436367902464327,0.9587164847083669],[1,0.0000037154220718946126,-0.000004073957284453685,33.04163277024656]]],[0,"c4adwzlKtLgoH7TprESOj0",1,0],[1,0.32751238346099854,-0.010310173034667969,-0.11389470100402832],[3,0.034115341004975874,-0.0049783108472973995,0.25711617208596443,0.9657653099905187],[1,4.5225054284876665,-1.7927019702042712,29.75472408660068]],[3,"Bip001 L Thigh",6,[-73],[0,"3dC1CfgZhDpK2TzfRU4eGn",1,0],[1,-5.960464477539062e-7,6.109476089477539e-7,0.3917329013347626],[3,0.35633790809727306,0.9102712354503314,0.13713781657514587,-0.16007121049579176],[1,-27.178177637153045,-150.7472390116894,37.21622581855343]],[5,"Bip001 L Calf",39,[[6,"Bip001 L Foot",-74,[0,"7caVd8kIJGK5kbLBUlh6ea",1,0],[1,0.6499094367027283,1.043081283569336e-7,5.960464477539063e-8],[3,0.07739398699927229,-0.0826721422556368,0.2867829230082866,0.9512786357014664],[1,13.299329494012166,-13.78785800947578,32.1964795523681]]],[0,"f2EtNU7wVMjoXmufAHi9uH",1,0],[1,0.8068881034851074,1.1920928955078125e-7,1.1102230246251565e-16],[3,3.442959667299415e-17,4.354412125423695e-17,-0.6202284749880517,0.7844212126236743],[1,2.6837490328542704e-14,2.7581054785046265e-14,-76.66564169523824]],[3,"Bip001 R Thigh",6,[-75],[0,"ceM2WtQWtFK7jrv9XkgOyp",1,0],[1,5.960464477539062e-7,-4.731118679046631e-7,-0.3917329013347626],[3,0.24622989098597692,0.9490084205377607,-0.14516769584061975,0.1329669079800827],[1,22.17673256873416,158.99295780265484,25.38784466162673]],[5,"Bip001 R Calf",41,[[6,"Bip001 R Foot",-76,[0,"deI1gmfsVE4KqPSmJfxumF",1,0],[1,0.649909496307373,-7.450580596923828e-8,-1.1102230246251565e-16],[3,-0.04462143854226515,0.08363024286728585,0.4145832131846375,0.9050611410539506],[1,-12.960606054858824,16.346956617926427,47.98613736418858]]],[0,"5b7b0FuDZLX7M7A8yuMAGU",1,0],[1,0.8068881034851074,-1.1102230246251565e-16,1.1102230246251565e-16],[3,-1.0715455424778844e-17,8.818841161642614e-18,-0.6354645359152559,0.7721300561395137],[1,-1.590276892933272e-15,2.4577743382024453e-22,-78.90889349596776]],[3,"bomb",2,[-77],[0,"6dWR9878ZCDIidMblNt1wC",1,0],[1,1.324704647064209,-0.0022638398222625256,1.7528510093688965],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[93,"spark01",43,[14],[0,"15RpWgu+FCvaxqNQ5ZdiMx",1,0],[1,0.48831772804260254,-0.4315357208251953,1.3351060152053833]],[226,true,false,2,[1,"29YQMSV2hGbYhoM8qrmbAr"],[6,7,8,9,10,11,12,13,14,15]],[9,"Board",18,[[83,"Quad<ModelComponent>",0,-78,[1,"f4mYiCDHtEXJuKKhdG5Crl"],[26],[7],27]],[0,"8ePabXUzhAz6KHHL6BuqhI",1,0],[1,0,10,60],[1,96,46,1]],[111,"X2",26,26,32,false,false,19,[1,"13yNnWQktNra5BYHzWp91z"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,45,0],[1,120,180,110]]],0,[0,4,1,0,0,1,0,66,5,0,20,47,0,-1,48,0,-1,23,0,-1,45,0,0,1,0,-3,48,0,0,1,0,-1,25,0,0,1,0,-1,3,0,-1,45,0,-1,23,0,-2,24,0,-3,12,0,-4,43,0,0,3,0,-1,20,0,-2,22,0,-3,5,0,-4,18,0,1,4,0,1,4,0,1,4,0,1,4,0,1,4,0,0,5,0,-1,16,0,-2,17,0,-1,26,0,-2,39,0,-3,41,0,-1,27,0,-2,33,0,-1,30,0,-2,31,0,-3,32,0,-1,36,0,-2,37,0,-3,38,0,0,10,0,-1,11,0,0,11,0,1,12,0,1,13,0,0,14,0,-1,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,-1,46,0,-2,19,0,0,19,0,-2,47,0,-1,21,0,0,21,0,-1,25,0,-1,28,0,-1,29,0,1,30,0,1,31,0,1,32,0,-1,34,0,-1,35,0,1,36,0,1,37,0,1,38,0,-1,40,0,1,40,0,-1,42,0,1,42,0,-1,44,0,0,46,0,9,1,2,1,11,4,1,7,6,1,12,7,1,13,8,1,29,9,1,35,10,1,22,13,1,26,14,1,44,78],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,25,45,47,47,48],[-1,6,-1,3,22,2,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,6,-1,-2,-3,7,3,2,3,22,-1,6,-1,-2,-3,-4,7,67,68,6,13,7,3,15,16],[19,79,469,2,470,471,63,243,244,245,246,247,248,249,250,251,19,41,20,30,31,20,2,472,2,473,236,17,21,32,33,34,21,474,475,241,242,63,8,35,22]],[[[99,"Bomb_Explosion",1],[157,"Bomb_Explosion",[-5],[[21,true,-2,[1,"a1ZHkqbL9Kz4zIKlLv5HWI"],[6],7],[150,-4,[1,"aeCoQLgq9CiZt6wEtADvT/"],[-3]]],[0,"39B9K/lBJA5arD4wwl+E1C",-1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[210,"RootNode",1,[[-7,[16,"Center",-8,[0,"82GB8NorRKnJ5vpWmDwMMU",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Smoke01",-9,[0,"d4wd+XbslEGKpc1YrKurfO",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Smoke02",-10,[0,"82Xd6+eIhNQqrfngBivgPG",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.00000000000003,0,0]],[16,"Bone001",-11,[0,"61w/Fn1oJOQquYPIgNGN5d",1,0],[3,-0.7062530293092724,-0.03473694884632855,0.0347370345280027,0.7062530293092724],[1,1.2172287702560425,1,1.000000238418579],[1,-90.00000034271574,0.000006967903880339513,5.631637175467161]],[16,"Bone002",-12,[0,"5b2RH7rUBHzaz9uqFEN7y9",1,0],[3,-0.6741356711780282,-0.37140022948668155,-0.09205432792961446,0.631766544771102],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-85.39387429997583,-39.99998995291547,22.608643815522772]],[16,"Bone003",-13,[0,"00qkU28olFApkcWtBD9Lob",1,0],[3,0.5330550063464916,0.6179261790745318,0.47831299801296334,-0.3244014077576457],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.58105412241288,-103.65199858254984,20.392323490397327]],[16,"Bone004",-14,[0,"c7TKMmiBxFp4+V5hIbIXfJ",1,0],[3,-0.6385573599275324,0.17907212266592834,0.3176246213066153,0.6777110541419019],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.01103011401533,41.45130182352175,11.643395612072615]],[16,"Bone005",-15,[0,"c7clggKDRLp6z3lrPTJ9Xl",1,0],[3,-0.3699089001720681,0.2882860609546329,0.6014605778512617,0.6467640419222291],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.80386006651895,82.32123971975935,34.3833351073313]],[16,"Bone006",-16,[0,"135nHhJv5PlqUa9VwQbp8G",1,0],[3,-0.22844006905986058,0.643590293584084,0.6766763561984481,0.27516500107075653],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-91.15823592099746,138.287548605756,4.493826431523457]],[16,"Bone007",-17,[0,"d5TJvqyt9DJo7jAoGDYGuF",1,0],[3,0.1363646255814735,0.6746526443492096,0.7182396738655725,0.10188360637570498],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-94.18786414313364,-176.4518484052417,19.29009370117969]],[16,"Bone008",-18,[0,"3cgedFRTxHp4OICkviDQkW",1,0],[3,0.41875078661861925,0.671757509422417,0.5726097142413399,-0.21332543776429908],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.39093585047345,-126.07954565688854,18.5597564669865]],[16,"Bone009",-19,[0,"31/oflimJIEKWjB7R2p8NP",1,0],[3,-0.6864041554480814,-0.3825223968612831,0.09234047504085198,0.6115547301365062],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-86.97409130222461,-26.29557225900434,39.64823547388661]],[16,"Bone010",-20,[0,"55pgzo6QVLXJ7HCksBo36R",1,0],[3,0.668291453188857,0.5883846315024667,0.23650182912492018,-0.38891765687224794],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.3656211904349,-75.80370606177492,37.046671310767046]],[16,"Bone011",-21,[0,"460e53vdRC+KcETL2k27k/",1,0],[3,0.3912054972529596,0.7089240092988996,0.5723151676038395,0.1297704006668225],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-86.86948567421464,-158.2212878535223,44.685039045804615]],[16,"Bone012",-22,[0,"39uTq+mFJCF40xFJxGaQTp",1,0],[3,-0.15339441560985992,0.3820321550821651,0.6942448003472915,0.5903776273993924],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.88656932990698,111.07028285720821,44.63034016371058]],[16,"Bone013",-23,[0,"4dGindwdlBVLje9qi9Tqka",1,0],[3,0.4063485326429576,0.5012023524986808,0.5781278101896936,0.49944499892778293],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.57159115801282,169.78094382320552,80.001324868445]],[16,"Bone014",-24,[0,"24d1sgo1tEo7yD6HppW+a2",1,0],[3,-0.6427974004712064,-0.40983756738007543,-0.3308823951180281,0.5562027606119903],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.63230066948167,-63.20361062730711,9.137810384848787]],[16,"Bone015",-25,[0,"8fdFBxgxNAA7g0GXNCq6LW",1,0],[3,-0.5064589371413412,-0.21749468105649847,0.5236791362161284,0.6495810734571359],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-98.13363534753863,34.780780471645976,64.24342268610513]],[16,"Bone016",-26,[0,"fbyIQg8qVOIIuHgRTFONiK",1,0],[3,-0.591001686681503,0.32203408925751903,0.3895560782885907,0.6286947697922356],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.11953829575658,60.52646875453639,6.2679536916278416]],[16,"Bone017",-27,[0,"88ArHCkKdMurksyoaFqlg6",1,0],[3,0.000471641732438248,0.6031952101574855,0.7198133704046455,0.3435462527576856],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.39215040121667,151.5591091607285,29.679467643185287]],[12,"Bone018",-28,[0,"98b6oFha1HV6qsUH+HsU6S",1,0],[1,0.02539999969303608,0.02539999969303608,-0.02539999969303608],[3,-0.4698987041605227,0.43070343452681287,0.5257023611478714,0.5633176606486094],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.66958789601851,85.54706572000671,10.806974032586487]],[16,"Bone019",-29,[0,"acP/mRfs5F5ItS5IQXbboH",1,0],[3,-0.6664724924993499,-0.09992566673221523,0.248476996233866,0.69576465863999],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.7736467143074,12.644300855792775,28.617398246836707]],[16,"Bone020",-30,[0,"a0diW7qeNJ6rirKJVz0C2d",1,0],[3,0.7142807206991547,0.6131758060986996,-0.006105778240487271,-0.3373146933129125],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-92.47061873353756,-58.51992512537176,61.65182834569619]],[16,"Bone021",-31,[0,"dccmvtyX9O6K0Etw9k0scL",1,0],[3,0.4087833752220783,0.7054156643866722,0.5767199383052113,-0.05175910877506354],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.96114132434134,-140.49429788043685,31.132796164829927]],[16,"Bone022",-32,[0,"f2U8wFit9AmrXGodp2wYZX",1,0],[3,-0.4718245175322684,0.28611725007570693,0.5281911388746408,0.6453934185276974],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.20173213999186,72.21795081444914,24.31719763011717]],[16,"Bone023",-33,[0,"0c9OBtZYhKJoJHL407T232",1,0],[3,-0.25663095598903524,0.5658894156167034,0.6618468136059595,0.41936680488657885],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.46351529348973,122.38764707732128,15.346969790002538]],[16,"Bone024",-34,[0,"a8aS8DxZFGP5g3oVta3q6I",1,0],[3,-0.16106387918514542,0.21863010451972612,0.6856712079766438,0.6753623462789264],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-89.13328736611564,93.97716064408002,58.84005573649517]],[16,"Bone025",-35,[0,"c0K3/77RNCuZbjT1nrOzLM",1,0],[3,0.22239390529800984,0.6938003462034662,0.6760907925522723,-0.10992393151761969],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582],[1,-90.76129406943767,-152.66710866865043,9.20438996867641]]],1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],[[227,true,false,-6,[1,"92iXSfZN9APJ5APOiyWDZy"],[4],5]],[0,"d0MgatQVZGWKIkBz8an9NF",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,7,7,7],[1,-90,0,0]],[145,"Bomb",2,[-36],[0,"2aFkfmNLdLO5KDHUIKsJea",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,10,10,10],[1,-90.00000000000003,0,0]],[171,0,3,[1,"ebQuYNhqdGcaqqIEvcnXKo"],[0,1,2,3],[7],2]],0,[0,4,1,0,0,1,0,-1,4,0,0,1,0,-1,2,0,0,2,0,-1,3,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,-1,4,0,9,1,36],[0,0,0,0,0,0,0,0,4,4],[-1,-2,-3,-4,-1,7,-1,7,6,13],[217,220,219,218,60,60,275,275,221,222]],[[[26,"Bullet_S02_speed","2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_BLEACH_COLOR":true,"USE_ALBEDO_MAP":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[476,10]],[[{"name":"number_20_w","rect":{"x":260,"y":492,"width":255,"height":251},"offset":{"x":-0.5,"y":2.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[73]],[[{"name":"ForestDance_Ray_01","rect":{"x":359,"y":676,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[26,"Scene_01","0",[{"priority":127,"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{"alphaThreshold":0.6},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[43,24]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e2TZg8BSBHcpuY4dZCNmgH"]}],[1],0,[],[],[]],[[{"name":"archer_btn_pinkB","rect":{"x":153,"y":740,"width":52,"height":88},"offset":{"x":1,"y":-0.5},"originalSize":{"width":60,"height":101},"rotated":false,"capInsets":[13,17.5,8,16.5],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"a_light_01","rect":{"x":365,"y":262,"width":156,"height":75},"offset":{"x":0,"y":0},"originalSize":{"width":156,"height":75},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"roll_light0000","rect":{"x":169,"y":412,"width":55,"height":63},"offset":{"x":-22.5,"y":-18.5},"originalSize":{"width":100,"height":100},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"Monster_4"],[94,"Monster_4",[-12],[[[2,-2,[1,"e5ltMwubxAlqhPuIwS5UGv"],[5,0,0]],[149,true,62,15,[25],-7,[1,"dfu9wfwrxKU5pBM1do28TW"],[-6],[-5],[-4],-3],-8,[66,8,4,-9,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[70,true,-11,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-10]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[211,"RootNode",[[-14,-15,-16,-17,[6,"Dummy004",-18,[0,"b6BnTFfuFLrLrpcLMlUutr",1,0],[1,-0.016441356390714645,-0.33935022354125977,1.4171502590179443],[3,0.5150974470276765,-0.5050231294210329,-0.4872353746181229,0.49216658616376474],[1,110.08563738476025,17.752397960299984,-89.09113880761949]],-19],1,1,1,1,4,1],[-13],[0,"fccCA+ZzBInKJzSsjIJtZ9",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,1.4,1.4,1.4],[1,90,0,0]],[20,"Bip001 L Hand",[-20,-21,-22,-23,-24],[0,"88uJ3id41KnJRIy2dmRAfK",1,0],[1,0.5006297826766968,-1.1920928955078125e-7,4.440892098500626e-16],[3,-0.6582899510683116,0.04228806753212849,-0.09385046107694317,0.7456930673021733],[1,-83.22488656741238,-3.5365847203699854,-11.28228223805411]],[20,"Bip001 R Hand",[-25,-26,-27,-28,-29],[0,"17/XwxTqNMFKEtBBGqxuCS",1,0],[1,0.5006297826766968,0,0],[3,0.7456827893975648,0.00012470362932455798,-0.041570116582792464,0.6650030732655037],[1,96.64501704438383,3.5693535204206266,-3.1587423695373786]],[77,"RootNode",1,[-31,-32,-33],[[40,-30,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[22,23,24,25],26]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[20,"Bip001 Spine",[-34,-35,-36],[0,"d7NI8GsFZI4KwUTUWMPTrQ",1,0],[1,0.15989065170288086,-0.0005258247256278992,2.22465359911439e-7],[3,-0.0000020707484351451806,-6.840717735626471e-7,-0.013363486985303973,0.9999107046185863],[1,-0.00023840179991270626,-0.0000815820152655527,-1.5313883897460843]],[128,"Bip001 Neck",[-37,-38,-39],[0,"28q3AHrINII5leML9+YYE8",1,0],[1,0.631783127784729,-0.001707509160041809,0.00006047538772691041]],[20,"Bone003",[-40,-41,-42],[0,"27ucb3bdFN7JGB+ReyZuK0",1,0],[1,0.7357587814331055,-4.440892098500626e-16,8.460415301669855e-8],[3,3.997127023116263e-14,1.1464957899787013e-13,0.02330703410588638,0.9997283541848692],[1,4.277568359160024e-12,1.3041719295891e-11,2.671031237002317]],[72,"RootNode",[-44],[[40,-43,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[16,17,18],19]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",9,[2],[[74,1,0,-45,[1,"0cCuiskZ1LlaHSvmTemF09"],[14],[7],15]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001 Spine1",6,[7,-46],[0,"7bIf4/rXxEy6QlmZyM7BuZ",1,0],[1,0.6606606245040894,-0.00039261579513549805,-1.0889777968259295e-9],[3,1.8363594974792656e-14,3.816920530814549e-8,-0.013761612811058711,0.9999053045228017],[1,6.021640004495724e-8,0.000004375111721124669,-1.5770144457597477]],[62,"Bip001 L Clavicle",7,[[-47,[6,"Bone001",-48,[0,"feR1Aq3JhAhJ3DHw8tmfvb",1,0],[1,0.25853222608566284,0.017087489366531372,0.07450723648071289],[3,0.3291996983294883,-0.18397237180632867,0.23716725177184989,0.8952839883069035],[1,45.25343808701887,-30.637810491034568,17.67015518109092]]],1,4],[0,"cd5gPF/SlA6Ius6Eaq6rr3",1,0],[1,-0.24609780311584473,0.0760565921664238,0.3552507162094116],[3,0.7055554348934967,0.06829647680154777,0.7019529897888603,0.06920346577466076],[1,179.89651945190954,-89.69660065951494,11.158808181510317]],[62,"Bip001 R Clavicle",7,[[-49,[6,"Bone001_R",-50,[0,"daPJBifrRFS4xWHMMTLjPG",1,0],[1,0.2586156725883484,0.01708918809890747,-0.07451558113098145],[3,0.8794379763040657,0.2795447387754223,-0.1868928209541957,0.33691936473431405],[1,131.49759110537656,33.750933398701356,21.45367841070574]]],1,4],[0,"f8ZYtsF5JAFKPMN+YuYKdg",1,0],[1,-0.24609780311584473,0.07605855911970139,-0.35537123680114746],[3,0.7055552446307499,0.06829841284423577,-0.7019527995845692,-0.06920542415437266],[1,-179.89651670418527,89.69660002752158,11.159125236615294]],[48,"Odds",5,[-51,-52],[0,"8d4GsIhIlAWrE+ZvZl4/NS",1,0]],[108,"OddsNum",14,[[[2,-53,[1,"beJ1C1UwZCj6qesWfHhS+t"],[5,33.26,32]],-54],4,1],[0,"4bIwSQVu5AS4I22dSZzJlt",1,0],[1,1.5,0,62]],[78,"FloorNode",5,[-55],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",16,[[113,1,-56,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",5,[9],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"3drXzZ+E1F1YBv1HoyGbDP",1,0],[1,0,2.3,0]],[203,"monster_M_003",2,[-57],[0,"08E0GbT+VALbhG8cFFrpNf",1,0],[1,0.23828887939453125,0,0]],[95,1,0,20,[1,"a6Ns8UHS1MLryBVYiroRbq"],[2],[7],2],[54,"Root",2,[-58],[0,"87jtFwacBLVKpQb8Ln4RQ1",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[3,"Bip001",22,[-59],[0,"cbpDN7fdpKQ6MjH9kjPSox",1,0],[1,2.561137080192566e-9,0.057176027446985245,1.143359899520874],[3,-8.312010776862054e-39,8.311991158683218e-39,-0.707105946721014,0.7071076156510963],[1,0,1.3470174164166888e-36,-90]],[54,"Bip001 Pelvis",23,[6],[0,"aaku6JuB1JvaSjP1TNrtRr",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[5,"Bip001 Head",7,[[10,"Bip001 HeadNub",-60,[0,"dalPUX6KVKNqvcvV9JykbG",1,0],[1,1.0493707656860352,-2.7755575615628914e-17,3.637978807091713e-12]]],[0,"98VyfSl1pKVZoGKXeKSGAS",1,0],[1,0.2673945426940918,-7.450580596923828e-9,3.637978807091713e-12],[3,-2.4964688692569808e-9,-6.271651082158686e-8,0.0014889813384960668,0.9999988914666704],[1,-2.753741783095854e-7,-0.000007186380691056864,0.17062475598689478]],[3,"Bip001 L UpperArm",12,[-61],[0,"8b8XJxcctJ04vtQGifO21T",1,0],[1,0.3912932276725769,-2.0816681711721685e-17,-4.440892098500626e-16],[3,-0.25651204330178984,0.1241501780882364,-0.6302342351995177,0.722214035936909],[1,-70.92398438562613,-39.48424240175178,-76.91114917985112]],[3,"Bip001 L Forearm",26,[3],[0,"167YUsAs5J05TW6hgF/NIn",1,0],[1,0.9073795676231384,1.1920928955078125e-7,0],[3,-4.578849592800137e-17,-6.262542611058353e-17,-0.4362915673032536,0.8998053502286317],[1,-1.2679224301157081e-14,-1.4123258827036254e-14,-51.73501364487481]],[3,"Bip001 L Finger0",3,[-62],[0,"564H8nNm9JMKyEdoh6QbFF",1,0],[1,0.15724682807922363,0.10853540897369385,-0.280010461807251],[3,0.6469967347866844,0.4224053311910211,-0.1247771602493949,0.6224143488359418],[1,81.77525315266503,48.315717546497766,23.03314405482635]],[5,"Bip001 L Finger01",28,[[10,"Bip001 L Finger0Nub",-63,[0,"730CKFAgVCvZLYbi0VlkHQ",1,0],[1,0.19635671377182007,-1.1920928955078125e-7,4.440892098500626e-16]]],[0,"eaOaaGHiFKgqGT8VBgYCf0",1,0],[1,0.2230098843574524,-2.220446049250313e-16,-2.384185791015625e-7],[3,1.5970774585043392e-8,-4.742369063156933e-9,0.1741082035222399,0.9847265272481788],[1,0.0000020191989521741145,-9.088762633852202e-7,20.05353050162362]],[3,"Bip001 L Finger1",3,[-64],[0,"ddWWOVdIVE74Oht1Rzy6kf",1,0],[1,0.41220617294311523,-0.05643582344055176,-0.18570828437805176],[3,0.05480386961589817,0.05151804069817767,0.026161871371950605,0.9968239482697344],[1,6.12756778948025,5.739660577371665,3.313791647145718]],[5,"Bip001 L Finger11",30,[[10,"Bip001 L Finger1Nub",-65,[0,"e4URemwQFOUop6NpWm92oZ",1,0],[1,0.21047544479370117,-2.384185791015625e-7,0]]],[0,"af6mhZaflMJIxXumhCgQX5",1,0],[1,0.21047544479370117,-4.440892098500626e-16,2.384185791015625e-7],[3,-1.157355726393661e-8,-3.739024392000969e-8,0.30279246077905875,0.9530565175766654],[1,4.086591713252195e-8,-0.0000045086310785628456,35.25080448952805]],[3,"Bip001 L Finger2",3,[-66],[0,"4eWHtjdwVAe7fxzZR3JjCP",1,0],[1,0.4075636863708496,-0.043886661529541016,-0.008726358413696289],[3,-0.026201416960130487,0.02795337809921632,0.04119503759051985,0.998416277551623],[1,-3.141501951624513,3.334612362515148,4.634249782307842]],[5,"Bip001 L Finger21",32,[[10,"Bip001 L Finger2Nub",-67,[0,"07OPgYMfBBGqLmr2uRK2lD",1,0],[1,0.24555480480194092,2.384185791015625e-7,2.220446049250313e-16]]],[0,"02rAEu2hBBsIJMuMy3xyl2",1,0],[1,0.22620201110839844,-4.440892098500626e-16,1.1920928955078125e-7],[3,-2.1346562362788676e-9,6.405774153524933e-9,0.3161475668371008,0.9487100273439618],[1,-5.800948741783755e-7,9.670428303541836e-7,36.86021051465174]],[3,"Bip001 L Finger3",3,[-68],[0,"3cVH2PZuFAuKRNrWvKkYAX",1,0],[1,0.4085817337036133,-0.004747867584228516,0.1710878610610962],[3,-0.06296034802314279,0.028271691424540484,0.10428203476704014,0.9921501717308957],[1,-7.678888342068354,4.054677243803466,11.733914809176078]],[5,"Bip001 L Finger31",34,[[10,"Bip001 L Finger3Nub",-69,[0,"1fZgL3I5RLnYFYO8b7A+IG",1,0],[1,0.21047547459602356,4.440892098500626e-16,-1.1920928955078125e-7]]],[0,"02ebszEi1O0oolE11w+ei+",1,0],[1,0.21047556400299072,-4.440892098500626e-16,1.1920928955078125e-7],[3,7.957158328760457e-9,3.2193729677553806e-11,0.3549088168792099,0.9349009207939628],[1,0.0000011377869143528558,-4.27982761659063e-7,41.57571216559368]],[3,"Bip001 L Finger4",3,[-70],[0,"42ow/qDupC8a0pKlzGUmt0",1,0],[1,0.40224790573120117,0.0662531852722168,0.30907320976257324],[3,-0.07959501248243317,-0.0002520443751012064,0.17639633576478786,0.9810957665744514],[1,-9.577306672352574,1.6849620829429341,20.252837505544477]],[5,"Bip001 L Finger41",36,[[10,"Bip001 L Finger4Nub",-71,[0,"c8nBpo5tVIMIGgdIzKfijX",1,0],[1,0.1753963828086853,0,1.1920928955078125e-7]]],[0,"e6Ke0NAPhAmriL4Z8zE+Uc",1,0],[1,0.17539632320404053,-2.384185791015625e-7,-1.1920928955078125e-7],[3,-1.9879662589075646e-8,-1.1645787579274914e-8,0.2811044784887674,0.959677170809829],[1,-0.0000021509891620421565,-7.605226948869812e-7,32.65226898124036]],[3,"Bip001 R UpperArm",13,[-72],[0,"c7Zu1U23RJ+JdKlaeCKpEY",1,0],[1,0.3912932872772217,-6.938893903907228e-18,2.384185791015625e-7],[3,0.2515311215018178,-0.13698530054828675,-0.5888658104754068,0.7557805102031115],[1,50.57590099324775,18.344106061208937,-73.5401934381205]],[3,"Bip001 R Forearm",38,[4],[0,"daseO4DqdGKLE018mwBHTf",1,0],[1,0.9073795080184937,1.1102230246251565e-16,-2.384185791015625e-7],[3,-3.6334093714294004e-17,-3.509544699461461e-17,-0.5007262232599189,0.8656057124002001],[1,-1.1268278153721893e-14,-1.1164395301403043e-14,-60.09611637247491]],[3,"Bip001 R Finger0",4,[-73],[0,"60pNnezHJAxIAFT4O+GJPI",1,0],[1,0.15724670886993408,0.1085350513458252,0.2800103425979614],[3,-0.4903048346297891,-0.23648313022586753,0.10585494489290807,0.8321488021375444],[1,-57.032644809000274,-18.506133996956443,24.08376416602293]],[5,"Bip001 R Finger01",40,[[12,"Bip001 R Finger0Nub",-74,[0,"7cJ3Ql4dBMnp1NOoUFKyGS",1,0],[1,0.19635677337646484,2.220446049250313e-16,0],[3,1.676380634307861e-8,1.4901161193847653e-8,0.9999999999999998,-9.313225746154784e-9],[1,-1,-1,-1],[1,-179.99999829245272,-179.9999980790093,-0.0000010672170291894999]]],[0,"29Ffca4BhFz5q7iC8VVEdl",1,0],[1,0.2230098843574524,1.1102230246251565e-16,4.440892098500626e-16],[3,-9.31315600776908e-8,3.5886007648688746e-10,0.2762988178514842,0.9610717784088053],[1,-0.000012118246156648651,0.000003526666269156071,32.07886036818074]],[3,"Bip001 R Finger1",4,[-75],[0,"8b7TB8zIlEaoZj1JBIWrO2",1,0],[1,0.4122058153152466,-0.05643606185913086,0.18570828437805176],[3,-0.06541616438281203,-0.03712547180151396,0.2607267784502007,0.9624780370376956],[1,-7.100514471020022,-2.4833229064553257,30.447245236763784]],[5,"Bip001 R Finger11",42,[[12,"Bip001 R Finger1Nub",-76,[0,"25DWCtp9NJ4JJAi4w+lXHu",1,0],[1,0.21047556400299072,0,5.960464477539063e-8],[3,2.421438694000243e-8,-3.4694469519536127e-16,0.9999999999999996,1.490116119384765e-8],[1,-1,-1,-1.0000001192092896],[1,179.99999999999991,-179.99999722523566,0.0000017075472925031854]]],[0,"65aRbv4b5GS6Qe7AsEK6CT",1,0],[1,0.21047544479370117,-2.384185791015625e-7,-1.1920928955078125e-7],[3,-1.6341425749857566e-8,2.385570461618585e-8,0.333480502231466,0.9427569965963912],[1,-0.000003442751507937372,0.0000041174479739484076,38.960329068296176]],[3,"Bip001 R Finger2",4,[-77],[0,"e9huVlCThAfb/cOAmzg9jW",1,0],[1,0.40756332874298096,-0.04388689994812012,0.008726418018341064],[3,0.021896179950574267,-0.031439848509984256,0.18475227214124296,0.9820380293898447],[1,3.358577767625456,-4.295849417654638,21.191772614908217]],[5,"Bip001 R Finger21",44,[[12,"Bip001 R Finger2Nub",-78,[0,"589DHxvSBNF5DKTIa2VzwQ",1,0],[1,0.24555468559265137,2.384185791015625e-7,1.1920928955078125e-7],[3,-8.271806125530277e-25,5.551115123125783e-17,1,-1.4901161193847656e-8],[1,-1,-1,-1],[1,-180,180,-0.0000017075472925031882]]],[0,"f3et84IwNBHaKq1I1TkCgw",1,0],[1,0.22620177268981934,-2.384185791015625e-7,5.960464477539063e-8],[3,1.3407156351816275e-8,6.50328683567694e-9,0.4364281918084341,0.8997390918454197],[1,0.0000017075471445800586,7.175171620203642e-14,51.75241362083951]],[3,"Bip001 R Finger3",4,[-79],[0,"b38yBqBXFIipvI20rTscZy",1,0],[1,0.40858161449432373,-0.00474858283996582,-0.17108803987503052],[3,0.059768468138726084,-0.034511238334929195,0.20436614750848237,0.9764584898486371],[1,8.187225964791564,-5.736545326590685,23.26502307682617]],[5,"Bip001 R Finger31",46,[[12,"Bip001 R Finger3Nub",-80,[0,"34OzkSD5JCnJFOtrpJHpGX",1,0],[1,0.21047556400299072,4.440892098500626e-16,1.1102230246251565e-16],[3,-1.4901161193847656e-8,1.6653345369377348e-16,1,7.450580596923828e-9],[1,-1,-1,-1],[1,-179.99999999999997,179.99999829245272,8.537736462515936e-7]]],[0,"e6afY9gslBdrwHpCKg4oo+",1,0],[1,0.21047544479370117,-4.440892098500626e-16,5.960464477539063e-8],[3,-3.68297718810549e-9,1.4438845406500246e-8,0.24716043013283467,0.9689745723064934],[1,-9.317230887541956e-7,0.0000019452057246076284,28.619088921753793]],[3,"Bip001 R Finger4",4,[-81],[0,"efPiXINKpBXZbAW/qgjKVk",1,0],[1,0.4022477865219116,0.0662531852722168,-0.309073269367218],[3,0.07950635113264229,-0.0037639657298711936,0.22566972272389496,0.9709468311587807],[1,9.997081224034087,-2.7534288436552545,25.95264134901938]],[5,"Bip001 R Finger41",48,[[12,"Bip001 R Finger4Nub",-82,[0,"feW3U6lKZPxoK3BjZMHypv",1,0],[1,0.17539623379707336,4.76837158203125e-7,-2.220446049250313e-16],[3,-3.725290742551124e-9,5.551115123125783e-17,1,-6.123234262925839e-17],[1,-0.9999999403953552,-1,-0.9999999403953552],[1,-180,179.99999957311312,-7.016709628407983e-15]]],[0,"1dVeIE1gRPd40bQaOt2O+D",1,0],[1,0.17539632320404053,-2.384185791015625e-7,-5.960464477539063e-8],[3,-1.3377650052020978e-8,-7.547245468846736e-9,0.26545631792725083,0.9641228880555146],[1,-0.0000014531915980045273,-4.969197803668559e-7,30.788138078395612]],[3,"Bone002",11,[8],[0,"35vwj1RctK4ZQa7p7huljB",1,0],[1,0.6990445852279663,-0.6576737761497498,-0.0000011920928955078125],[3,-0.22280555341304684,0.9748629059346446,6.842456436880665e-7,7.057808291655062e-7],[1,-0.00010486947199264184,179.9998930700659,-25.747740571768734]],[5,"Bone004",8,[[12,"Bone005",-83,[0,"d5A+4G89NK8L7SyFuZ+Dk8",1,0],[1,0.6455504894256592,-2.384185791015625e-7,7.173753147071693e-8],[3,6.003795527769369e-15,-4.31387555951176e-14,0.13784547524667792,0.9904537470038757],[1,5.220435619354248,1.0000001192092896,1],[1,1.4166706726991842e-12,-5.188146256989575e-12,15.846384609582314]]],[0,"b5JQ211kVC5Y9E1zT/v6eF",1,0],[1,0.6499662399291992,0,7.268363333423622e-8],[3,3.091399865389307e-14,5.947836180799249e-14,0.07919220577241098,0.9968593654798555],[1,3.029605668362637e-12,6.596514292902829e-12,9.08427043930414]],[5,"Bone009",8,[[6,"Bone010",-84,[0,"b4S3Byd19IUIV8NcfMrZx5",1,0],[1,0.7753241062164307,2.220446049250313e-16,1.1920928955078125e-7],[3,-0.011118670047852917,0.05979838251134043,0.11957953928025762,0.9909597683109622],[1,-2.1428340721020587,7.162661312006386,13.63095919876253]]],[0,"e3W75THgtHsZIjrxAeTjT2",1,0],[1,0.11905777454376221,-0.007365226745605469,0.58700031042099],[3,-0.0003223349605736925,-0.2131822837374954,0.004397411330190191,0.9770024937400276],[1,0.07133920587392908,-24.618369859256568,0.5001982726571514]],[5,"Bone009(mirrored)",8,[[6,"Bone010(mirrored)",-85,[0,"28ahHequRG1LZVGaRLgx/Q",1,0],[1,0.775323748588562,1.1920928955078125e-7,-2.384185791015625e-7],[3,0.013301920366607503,0.05311263068288659,-0.15241828813895747,0.9867982432175757],[1,2.549578896703496,6.552431354026983,-17.421521144527965]]],[0,"49+plhDh1A4aiSZSmXXV2A",1,0],[1,0.11905741691589355,-0.007365703582763672,-0.5868726372718811],[3,0.9770025793409386,0.004397621926103129,-0.21318188707852975,-0.0003223417212392335],[1,179.92865660902956,24.618323391840107,0.5002220447302346]],[3,"Bip001 L Thigh",6,[-86],[0,"5aDoL3dpFKWb6jrkRa8V1q",1,0],[1,-0.15984761714935303,-0.003748806193470955,0.533313512802124],[3,0.12373682743045374,0.978287211026555,0.06842639234473548,-0.1515294001506474],[1,-10.121767164528197,-161.25327248328267,12.789106516426445]],[3,"Bip001 L Calf",54,[-87],[0,"13wfMZdd5ADY9pr1DzsDXM",1,0],[1,0.5768526196479797,0,0],[3,1.7970034390187534e-17,-4.669889626213724e-17,-0.21887602469840506,0.9757526765590875],[1,9.268139175499661e-16,-5.276380075867698e-15,-25.28605020439066]],[3,"Bip001 L Foot",55,[-88],[0,"31rPkzA+9Abqx6kVDrd4Ac",1,0],[1,0.4651743769645691,1.4901161193847656e-8,-5.960464477539063e-8],[3,-0.012796611456113164,-0.13994103594657625,0.06448836589847265,0.9879746979843083],[1,-0.4182186895957434,-16.09647203350615,7.527803604549367]],[5,"Bip001 L Toe0",56,[[12,"Bip001 L Toe0Nub",-89,[0,"ab5G0V56xDMZd/cSJbugYW",1,0],[1,0.049959659576416016,1.3552527156068805e-20,0],[3,6.245004513516506e-16,1.0587911840678754e-22,1,-6.123234262925839e-17],[1,-1,-1,-1],[1,-180,-179.99999999999991,-7.0167096047110005e-15]]],[0,"47YDewHz9A7KLwXmcZqRTx",1,0],[1,0.17106933891773224,0.49293577671051025,5.960464477539063e-8],[3,6.622408766566225e-7,-1.2108311383525853e-8,0.7071070494072362,0.7071065129654467],[1,0,0.0001073207686755142,90]],[3,"Bip001 R Thigh",6,[-90],[0,"davHobFmhNV71M3ldUPGzF",1,0],[1,-0.15984761714935303,-0.003745848312973976,-0.533313512802124],[3,0.11196639993231877,0.9782180067225633,-0.07028863490754758,0.16003925897343044],[1,10.183555087377924,160.40379615318938,11.33570613527419]],[3,"Bip001 R Calf",58,[-91],[0,"e9rPlzD+9GlZt9sfQvY0wv",1,0],[1,0.576852560043335,2.9802322387695312e-8,0],[3,1.5608380153510016e-17,7.570008630751557e-18,-0.19075210159904316,0.9816382407667034],[1,2.072001855290787e-15,1.2863168393551515e-15,-21.993358466378957]],[3,"Bip001 R Foot",59,[-92],[0,"cebCk7JzdEJr21I8l/3mHh",1,0],[1,0.46517419815063477,-2.9802322387695312e-8,0],[3,0.013025433766278854,0.14875319611374496,0.04664943743305901,0.9876875288816425],[1,0.6822159362329092,17.096781713702082,5.510334117318387]],[5,"Bip001 R Toe0",60,[[10,"Bip001 R Toe0Nub",-93,[0,"54I/DONLRNxayrMgeCLOy6",1,0],[1,0.04995971918106079,2.710505431213761e-20,5.960464477539063e-8]]],[0,"9apRBH7wtHyKTbPu74DQUR",1,0],[1,0.17106932401657104,0.49293577671051025,-5.960464477539063e-8],[3,-3.315904268091345e-8,-4.0194426691136005e-7,0.7071071686165652,0.7071063937562025],[1,0,-0.000005373655831955448,90]],[5,"Dummy003",2,[[10,"Dummy006",-94,[0,"c3wRyWBq1NH5z3uaNQuAIm",1,0],[1,3.4119272232055664,7.152557373046875e-7,1.1920928955078125e-7]]],[0,"f2VC4gaKNNwJnd3zRluEFT",1,0],[1,-1.2556428909301758,4.300552845001221,-2.042227268218994],[3,0.5504373365659305,0.7514449431245787,-0.2802211073537989,0.2320029460160228],[1,70.69501175568277,113.54720733070516,44.204584284411204]],[5,"Bone011",2,[[141,"Dummy001",-95,[0,"6dfQdCOEBO6LPcMo65B24Q",1,0],[3,-0.0000029733048449865835,-2.1932669369464557e-7,5.33175814607506e-8,0.9999999999955542],[1,-0.00034071563630752653,-0.00002513296960027896,0.000006109819511099089]]],[0,"c786s2eFRMEYsCcLONRJXO",1,0],[1,-0.04225916042923927,2.9228570461273193,1.4171502590179443],[3,0.5150962503368085,-0.5050218732154472,-0.4872366517687362,0.49216786327036005],[1,110.0856277642325,17.75267529634454,-89.0911344777076]],[126,true,2,[1,"04xE7P5qFCO5gP6oSOiuQ1"],[3,4,5,6,7,8,9,10,11,12,13]],[9,"Board",14,[[83,"Quad<ModelComponent>",0,-96,[1,"142iVbqA5BdosytAKiKq8x"],[20],[7],21]],[0,"dc7KbQilBASL9s5eFfBMIw",1,0],[1,0,-6,60],[1,84,36,1]],[111,"X2",26,26,32,false,false,15,[1,"d6J+uMQyJFYKuudlWgOy7Q"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,40,0],[1,110,190,90]]],0,[0,4,1,0,0,1,0,20,66,0,-1,67,0,-1,19,0,-1,64,0,0,1,0,-3,67,0,0,1,0,-1,21,0,0,1,0,-1,5,0,-1,64,0,-1,19,0,-2,20,0,-3,22,0,-4,62,0,1,2,0,-6,63,0,-1,28,0,-2,30,0,-3,32,0,-4,34,0,-5,36,0,-1,40,0,-2,42,0,-3,44,0,-4,46,0,-5,48,0,0,5,0,-1,16,0,-2,18,0,-3,14,0,-1,11,0,-2,54,0,-3,58,0,-1,25,0,-2,12,0,-3,13,0,-1,51,0,-2,52,0,-3,53,0,0,9,0,-1,10,0,0,10,0,-2,50,0,-1,26,0,1,12,0,-1,38,0,1,13,0,-1,65,0,-2,15,0,0,15,0,-2,66,0,-1,17,0,0,17,0,-1,21,0,-1,23,0,-1,24,0,1,25,0,-1,27,0,-1,29,0,1,29,0,-1,31,0,1,31,0,-1,33,0,1,33,0,-1,35,0,1,35,0,-1,37,0,1,37,0,-1,39,0,-1,41,0,1,41,0,-1,43,0,1,43,0,-1,45,0,1,45,0,-1,47,0,1,47,0,-1,49,0,1,49,0,1,51,0,1,52,0,1,53,0,-1,55,0,-1,56,0,-1,57,0,1,57,0,-1,59,0,-1,60,0,-1,61,0,1,61,0,1,62,0,1,63,0,0,65,0,9,1,2,1,10,3,1,27,4,1,39,6,1,24,7,1,11,8,1,50,9,1,18,96],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,64,66,66,67],[-1,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-1,6,-1,-2,-3,7,-1,6,-1,-2,-3,-4,7,6,13,7,3,15,16],[19,66,477,59,202,203,204,205,206,207,208,209,210,211,19,41,20,30,31,20,478,17,21,32,33,34,21,200,201,59,8,35,22]],[[[31,"Shoot_Axe",".mp3",0.600816],-1],0,0,[],[],[]],[[[23,"Floor",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_ALBEDO_MAP":true},{},{}],[[[{},"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[10,8],[479,10]],[[{"name":"005","rect":{"x":153,"y":714,"width":60,"height":22},"offset":{"x":-34.5,"y":0.5},"originalSize":{"width":129,"height":27},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[221,"particle-add",[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[480,481]],[[[99,"Change_Cannon",2],[45,"Change_Cannon",33554432,[-5,-6,-7],[[2,-2,[1,"c5LIrQ3ulDG6YlnkGeLTUp"],[5,0,0]],[40,-3,[1,"e5TJmN6thCGKQkhyNL5QDG"],[6],7],[4,-4,[1,"04bTyiVDhMQ7l5hBmU02yT"]]],[0,"42sWG4hq5NxqueHvweT41d",-1,0]],[57,"Light_effect_blur02",33554432,1,[[2,-8,[1,"497SFdkbJA3ZJVWFSRPgFE"],[5,150,149]],[24,1,-9,[1,"44zIVAHclBZ5ky0c16Zyp6"],[4,4278229503],0,1],[15,0,-10,[1,"a6xuryJbJNaYb0gnjHxK7t"]]],[0,"3a6L9tA4dJ+INQ8zBK/Roy",1,0],[1,2.8,2.8,0]],[57,"Light_effect_blur01",33554432,1,[[2,-11,[1,"8d67jti+JMardlt2+5JpAi"],[5,150,149]],[24,1,-12,[1,"b2qZPpGUVIRJlGgT46d335"],[4,4278242559],2,3],[15,0,-13,[1,"abGDroskNCbo6or4dZBXEz"]]],[0,"cd/tE0/qxAzK40Wq+Zsa2F",1,0],[1,1.2,1.2,0]],[57,"CircleLight",33554432,1,[[2,-14,[1,"4f15HVQtVCCZnhbshV6gjP"],[5,108,108]],[24,1,-15,[1,"9cbQjGbCNLdbclaFhXPqhJ"],[4,4278234623],4,5],[15,0,-16,[1,"05wmdnm0FP0rvNOdXlI5YR"]]],[0,"578gfDRatDfqHlE7OwVHpB",1,0],[1,4,4,0]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,9,1,16],[0,0,0,0,0,0,0,0],[3,2,3,2,3,2,-1,7],[1,81,1,81,1,39,276,276]],[[{"fmt":"0_4_7@89","w":0,"h":0},-1],[3],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["ebKpsMQQxJxojbvRNfU08o"]}],[1],0,[],[],[]],[[{"name":"WaterSplash01_00000","rect":{"x":10,"y":1,"width":110,"height":127},"offset":{"x":1,"y":-0.5},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-55,-63.5,0,55,-63.5,0,-55,63.5,0,55,63.5,0],"indexes":[0,1,2,2,1,3],"uv":[10,127,120,127,10,0,120,0],"nuv":[0.078125,0,0.9375,0,0.078125,0.9921875,0.9375,0.9921875],"minPos":{"x":-55,"y":-63.5,"z":0},"maxPos":{"x":55,"y":63.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[270]],[[{"name":"eff_heart_003","rect":{"x":769,"y":133,"width":66,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[99,"AxeBullet_HitFx",2],[73,"AxeBullet_HitFx",33554432,[-5],[[2,-2,[1,"00p7MuzGVPBY+UNnSuTrFx"],[5,0,0]],[40,-3,[1,"ad9XM0a7VJRYXZ1z2fQbx8"],[34],35],[4,-4,[1,"5694hQNBpLjqgbeKvhS80o"]]],[0,"b9TK4AugxI4JTYFzvhg9T9",-1,0],[1,0,0,3.5]],[144,"lines",33554432,[-8,-9,-10,-11,-12,-13,-14,-15,-16,-17],[[2,-6,[1,"e3DnHYfqxMjYaWSHxQWfI7"],[5,0,0]],[4,-7,[1,"e9SFznHH1AjoxOAffS0znp"]]],[0,"c6vwCWRghArr/e+lK8qfDD",1,0],[1,0.5,0.5,1]],[22,"Hit",33554432,1,[2,-20,-21,-22,-23,-24,-25,-26],[[2,-18,[1,"cfujoMWc1O852O7Okk7OVi"],[5,0,0]],[4,-19,[1,"1akduYES9KJ4YpiKk+C92/"]]],[0,"2fH/7vH5BBEqPelLjZUaW9",1,0],[1,0,0,3.5]],[61,"Blue_line01",33554432,2,[[8,-27,[1,"16ffaHB4RPrLJOOi1ToPNX"],[5,125,11],[0,0,0.5]],[24,1,-28,[1,"245jLAJSlNtqEWY8fjyd9R"],[4,4278237439],0,1],[4,-29,[1,"d1zYwJT/pMS6cMGQtM1WMq"]]],[0,"6aGUXDfl9DC4il/FLXsZsB",1,0],[3,0,0,0.23396294798379016,0.9722455137313488],[1,0,1,1],[1,0,0,27.061]],[61,"Blue_line02",33554432,2,[[8,-30,[1,"3a+D9BLTtL6Yobed1zKT+f"],[5,125,11],[0,0,0.5]],[24,1,-31,[1,"28RPuEWDRH4qjn8cbZJd8l"],[4,4278237439],2,3],[4,-32,[1,"acNcoza3dKqb6AxnZ1hrIk"]]],[0,"1fVcobHPBBUY5ppwY9KUKw",1,0],[3,0,0,-0.3034843169039736,0.952836433703775],[1,0,0.699999988079071,1],[1,0,0,-35.334]],[61,"Blue_line03",33554432,2,[[8,-33,[1,"aejPRxJDFF4qDusUNQvTVz"],[5,125,11],[0,0,0.5]],[24,1,-34,[1,"c9Y28CaHhPG7shZRdMV5Xm"],[4,4278237439],4,5],[4,-35,[1,"23OIjElTtK1JeNpvnpx287"]]],[0,"eaoyqANPRIqrmd1OYTpXT7",1,0],[3,0,0,-0.8558521091475487,0.5172206175972612],[1,0,0.800000011920929,1],[1,0,0,-117.708]],[61,"Blue_line04",33554432,2,[[8,-36,[1,"99QT0auJBLOK6sDextptQp"],[5,125,11],[0,0,0.5]],[24,1,-37,[1,"beDCPds6NCt45NJlBQcMwN"],[4,4278237439],6,7],[4,-38,[1,"4f4JiBtCNAn6N9bWKXAA4m"]]],[0,"aadUuKq6dDM6O/JivygEpu",1,0],[3,0,0,-0.9934587452033468,0.11419160029963603],[1,0,0.800000011920929,1],[1,0,0,-166.88600000000002]],[61,"Blue_line05",33554432,2,[[8,-39,[1,"febILZOQBHDrOanqMU8jHW"],[5,125,11],[0,0,0.5]],[24,1,-40,[1,"c0Dqt5nzNPXpP7g4oGC0OD"],[4,4278237439],8,9],[4,-41,[1,"67DHVbDFJLsZK1uTmSy/Dx"]]],[0,"12z8y4rbhEzZi+7AIQgrHC",1,0],[3,0,0,-0.7622222483475529,0.647315413167338],[1,0,1,1],[1,0,0,-99.32100000000003]],[61,"Blue_line06",33554432,2,[[8,-42,[1,"f32fpd3QZDH73nE5H/s/+b"],[5,125,11],[0,0,0.5]],[24,1,-43,[1,"22jgpb4kFCq4wH1Hq7pF+n"],[4,4278237439],10,11],[4,-44,[1,"18ImX8+XhNd7h6m5Z1iSwd"]]],[0,"33D4/py2NAC5bFPqpEFxtn",1,0],[3,0,0,-0.8570099512942264,-0.5152998577359281],[1,0,0.6000000238418579,1],[1,0,0,-242.03500000000003]],[61,"Blue_line07",33554432,2,[[8,-45,[1,"ffEKP6QHlOTp/ZqcpxdW/U"],[5,125,11],[0,0,0.5]],[24,1,-46,[1,"f4q5uEDKBLG4mpIc8OuEuB"],[4,4278237439],12,13],[4,-47,[1,"d0/dcw0slBZqP7jNbxjbuP"]]],[0,"8fuu0MUUpAfIcKWzjaHtUG",1,0],[3,0,0,-0.6315557981217426,-0.7753304288229688],[1,0,0.30000001192092896,1],[1,0,0,-281.67]],[61,"Blue_line08",33554432,2,[[8,-48,[1,"902lHV8LVHppSsp968eatZ"],[5,125,11],[0,0,0.5]],[24,1,-49,[1,"173d12TGlCbLwV88z6kXP7"],[4,4278237439],14,15],[4,-50,[1,"c1bJnwVuxAKI8H9G9OFOsv"]]],[0,"e7kDDGiQFLprmr30ib994p",1,0],[3,0,0,-0.10661115427526005,-0.9943007903969989],[1,0,0.4000000059604645,1],[1,0,0,-347.76]],[61,"Blue_line09",33554432,2,[[8,-51,[1,"11nSq/B2dJRZmGtE/M2WbL"],[5,125,11],[0,0,0.5]],[24,1,-52,[1,"b0YnvrywVIfomouzS7Oeou"],[4,4278237439],16,17],[4,-53,[1,"6d1Eqc3JNG/7rpOV+zhEKy"]]],[0,"44kGEomKZK56nD8FhfGO3V",1,0],[3,0,0,0.4585487411058529,-0.8886692590779978],[1,0,0.30000001192092896,1],[1,0,0,-414.587]],[61,"Blue_line10",33554432,2,[[8,-54,[1,"fbtEdI7gxO8pN/BDSmDWqf"],[5,125,11],[0,0,0.5]],[24,1,-55,[1,"deaSIup91LZL/DPKLxKN24"],[4,4278237439],18,19],[4,-56,[1,"127DpvBi5FIo+HLDdHEAQ5"]]],[0,"b9YnC6tttDaY9TjQVuFN9d",1,0],[3,0,0,-0.9784387490640593,-0.206537198417038],[1,0,0.30000001192092896,1],[1,0,0,-203.83900000000003]],[57,"a_effect_01",33554432,3,[[2,-57,[1,"f09CadVttKdop1TbsRsxWC"],[5,30,30]],[24,1,-58,[1,"baQfM4nzBOlb2ZrRYYhNbT"],[4,4278208511],20,21],[4,-59,[1,"66w+NLNzBLGZOYqnp4UaMx"]]],[0,"c6pXgzx29FnbUp6aaDwQKI",1,0],[1,1.5,3,1]],[57,"a_light_02",33554432,3,[[2,-60,[1,"86GMzbk/tHEJDUAlqjuTdl"],[5,44,209]],[86,1,-61,[1,"6e7Cpf5jhAcqYaN0gY5P1t"],22,23],[4,-62,[1,"b3s9eFTqNPKacxCLromG0u"]]],[0,"7cisN8gVJFCaIGRucR4nkc",1,0],[1,1.5,1.5,1]],[132,"Axe_Chips01",33554432,3,[[8,-63,[1,"b66xrch+9NH4Fm1P5xth0W"],[5,28,101],[0,0.5,0]],[24,1,-64,[1,"3ayNzJfVlPqKr+qBmI5/rf"],[4,4278224383],24,25],[4,-65,[1,"53W2S1/HlFabgaiBeKLyde"]]],[0,"6biquFqj5GI7H9BJT/8EoV",1,0],[1,1.583,-2.358,0],[3,0,0,-0.17841583058861227,0.9839551775337003],[1,0,0,-20.555]],[121,"Axe_Chips02",33554432,3,[[8,-66,[1,"27fSoajtZOxouxalC5DEQn"],[5,28,101],[0,0.5,0]],[24,1,-67,[1,"baIHUkXe9EfrAOGp3g+oHR"],[4,4278224383],26,27],[4,-68,[1,"5bCA2wlE9Ga4RBI7f5jIJx"]]],[0,"dfUwQ+PupNx7LDjnRa2IdA",1,0],[1,1.583,-2.358,0],[3,0,0,-0.28797899466783705,0.9576367258152236],[1,0.7,0.7,1],[1,0,0,-33.474000000000004]],[121,"Axe_Chips03",33554432,3,[[8,-69,[1,"09ENdkN7tML7cyXXOViuuF"],[5,28,101],[0,0.5,0]],[24,1,-70,[1,"daqAs3dZBPZqqNdax+FB33"],[4,4278224383],28,29],[4,-71,[1,"bcvZsbP4JMsqMmMxDSTB38"]]],[0,"e0wLC9NzxJOZ5QUJDzdEA7",1,0],[1,1.583,-2.358,0],[3,0,0,-0.9838022344862009,0.17925725486004274],[1,1.2,1.2,1],[1,0,0,-159.347]],[132,"Axe_Chips04",33554432,3,[[8,-72,[1,"43iSV1rxpCLqJj2TS18v6U"],[5,28,101],[0,0.5,0]],[24,1,-73,[1,"90gkUvBEFOg5Vk6dk2YcBI"],[4,4278224383],30,31],[4,-74,[1,"caM8hA/9dJcaMqQj/WhSgr"]]],[0,"f8U3tG3o9O0oziXeAVlsXz",1,0],[1,1.583,-2.358,0],[3,0,0,-0.9817966370545884,-0.18993515595671273],[1,0,0,-201.89800000000002]],[132,"Axe_Chips05",33554432,3,[[8,-75,[1,"8aoNiNerZDeKOl46oMZtFR"],[5,28,101],[0,0.5,0]],[24,1,-76,[1,"eey1GLJ/lKX5Yi31ORIeaQ"],[4,4278224383],32,33],[4,-77,[1,"f3NPK4ulZN/ZmBszWO+S7n"]]],[0,"ccZZquEA1LfaNqBD8CLnvf",1,0],[1,1.583,-2.358,0],[3,0,0,-0.480667399480385,-0.8769029884067929],[1,0,0,-302.54200000000003]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,0,2,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,0,3,0,0,3,0,-2,14,0,-3,15,0,-4,16,0,-5,17,0,-6,18,0,-7,19,0,-8,20,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,9,1,2,1,3,77],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,-1,7],[1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,80,1,482,1,42,1,42,1,42,1,42,1,42,277,277]],[[{"name":"Light_effect_blur","rect":{"x":545,"y":628,"width":186,"height":187},"offset":{"x":0,"y":0},"originalSize":{"width":186,"height":187},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[33,"Glass_Broken"],[144,"Glass_Broken",33554432,[-5,-6,-7],[[2,-2,[1,"597eXQL0NPL6zeK7p0/mDh"],[5,0,0]],[40,-3,[1,"a7rr2ISCdC2p0QqZMWOWel"],[3],4],[4,-4,[1,"daPW3azopC6Lv5d+lJnoqD"]]],[0,"16mHU0rX5JAplURLjdWsZY",-1,0],[1,1.6,1.6,1]],[17,"glass_02_3",33554432,1,[[2,-8,[1,"0bkT5C5c5FEqVeldiS4h7o"],[5,326,328]],[34,2,false,-9,[1,"8bwEo2w6NIsrYP0Lr8RmAE"],0],[4,-10,[1,"23EM3jWn9L64hZGNO84ZmV"]]],[0,"78NLiPT7BJ97vMR4IlPFH1",1,0],[1,-19.0436,-3.082,0]],[17,"glass_03_4",33554432,1,[[2,-11,[1,"f23N0E5fZAAJCjdAA1uw1D"],[5,359,362]],[34,2,false,-12,[1,"0d5EjIch9Me5cDLs8lwvJy"],1],[15,0,-13,[1,"f4q5t3gldJr6lQECQx7/fB"]]],[0,"fdvEnPfNtKc7nEXuokuqRe",1,0],[1,-23.5972,-9.7168,0]],[57,"Ray_5",33554432,1,[[2,-14,[1,"40jTvvhPtPAas685cXUNs3"],[5,256,256]],[228,1,2,false,-15,[1,"f3TNkB3V9AGKkIrRsPbhkS"],2],[4,-16,[1,"22sVxqTydJdLEZe8H3HkAn"]]],[0,"e3KlGupwhJpYDarOjPFmEk",1,0],[1,3,3,1]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,9,1,16],[0,0,0,0,0],[2,2,2,-1,7],[483,484,485,278,278]],[[{"name":"btn_white_n","rect":{"x":293,"y":350,"width":6,"height":6},"offset":{"x":0,"y":0},"originalSize":{"width":6,"height":6},"rotated":false,"capInsets":[1,1,1,1],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"roll_light0003","rect":{"x":2,"y":877,"width":96,"height":20},"offset":{"x":2,"y":-40},"originalSize":{"width":100,"height":100},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[{"name":"S_coin0002","rect":{"x":156,"y":310,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[[19],[32,"Boss_floor_m",[-2],[0,"1aGcTwGpJaR5DoycW3PiA8",-1,0]],[44,"Boss_floor_m",1,[[30,-3,[1,"53FUclq4Ncjq5KJPmx3bsZ"],[0],[7],1]],[0,"a8fhrzYGxWs4Fy/rM47IrZ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,6],[486,41]],[[[18,".bin",3387130622,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":912,"count":228,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":228,"stride":32},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-2.168393611907959,-2.011500120162964,-0.5212656855583191],"maxPosition",8,[1,2.147764205932617,2.011500120162964,-0.0020635128021240234]]],-1],0,0,[],[],[]],[[[23,"Material #79",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[487,4]],[[{"base":"2,2,0,0,0,0","mipmaps":["9dsSOANqBKWYYH4WSNVscz"]}],[1],0,[],[],[]],[[{"name":"small_coin","rect":{"x":134,"y":861,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"Stage"],[45,"Stage",33554432,[-56,-57,-58],[[2,-53,[1,"72qStIktZMc4vPBeur5TEm"],[5,1136,640]],[269,-54,[1,"d06os4qjRMpagCq/jfb54D"]],[270,-55,[1,"482rvcqbZAsLF6q5zIT57s"]]],[216,"d9oIgi2+RMK6cHPLbJjeaR",-52,0,[[42,["blackScreenNode"],-5,-4,[14,["de0qxvJepFDoPrJivirFJh"]]],[42,["playerBetText"],-7,-6,[14,["3ai9/eqm5BKIY1VI+vMdc4"]]],[42,["playerCoinsText"],-9,-8,[14,["781lND8mxDZ5uBHIUUVcs7"]]],[42,["minusBetBtn"],-11,-10,[14,["8edNiVXhtOeIdfOEaQrLp4"]]],[42,["plusBetBtn"],-13,-12,[14,["24IFpAvmBMaYgyDDNZ+ejc"]]],[42,["sessionText"],-15,-14,[14,["05FJF3fuRFYIVeDJHEopaT"]]],[42,["lstFuncBtn","0"],-17,-16,[14,["35QLuV7GdMNKzEqHyC2xBF"]]],[42,["lstFuncBtn","1"],-19,-18,[14,["037xsQD7tDSKdfqzDyT9n2"]]],[42,["lstFuncBtn","2"],-21,-20,[14,["ffdpgEagxNmoKCdbORxkge"]]],[42,["lstFuncBtn","3"],-23,-22,[14,["2fAKO5DSxKkqiwf0x6JKwU"]]],[42,["lstFuncBtnFx","0"],-25,-24,[14,["79bnwPmKZKcbIdT9y5lwmi"]]],[42,["lstFuncBtnFx","1"],-27,-26,[14,["c9I4ZmLs1MOYhG+YOCSqr5"]]],[42,["lstFuncBtnFx","2"],-29,-28,[14,["cdh6+7DbZDEKD9IZVj8DOk"]]],[42,["lstFuncBtnFx","3"],-31,-30,[14,["3ehHE/8YlOGr2r5YX1+P05"]]],[42,["lstFuncBtnCost","0"],-33,-32,[14,["90vXD5hsJKCKvJEOSeGX0u"]]],[42,["lstFuncBtnCost","1"],-35,-34,[14,["7960eJJP9AhqiKWVyOU1XA"]]],[42,["lstFuncBtnCost","2"],-37,-36,[14,["56ygZkNAVL/amW9BY8bFfG"]]],[42,["lstFuncBtnCost","3"],-39,-38,[14,["cfaTjnK81EI7/E7x9jTg5S"]]],[42,["lstFuncBtnName","0"],-41,-40,[14,["f9BGbFcRRBtpsYGNpPk6gp"]]],[42,["lstFuncBtnName","1"],-43,-42,[14,["96PzG3IINKOpoYAsRSSiFB"]]],[42,["lstFuncBtnName","2"],-45,-44,[14,["cf0h4SDGpGQoMnZfAGtiNM"]]],[42,["lstFuncBtnName","3"],-47,-46,[14,["111P6MoapFfK20WmVdgBVq"]]],[42,["toast"],-49,-48,[14,["84J2pQQjNF9rsgVjZyWSYM"]]],[42,["locationHintNode"],-51,-50,[14,["b0p3JsND9M8asLFtoAIljb"]]]],[-1,-2,-3]]],[196,0,{},[82,"99KHcneTxFtp0SYrcio7ut",-63,[89,"17jkTS01RFS5ZQSex2CCsx",1,[[59,"UI",["_name"],-59],[36,["_lpos"],-60,[1,0,0,0]],[36,["_lrot"],-61,[3,0,0,0,1]],[36,["_euler"],-62,[1,0,0,0]]]],2]],[271,[1,"f7kx6zd0FMNL4TJyuoIxke"],[-76,-77,-78,-79],[-72,-73,-74,-75],[-68,-69,-70,-71],[-64,-65,-66,-67]],[73,"BottomBar",33554432,[-81,-82,-83,-84,-85,-86,-87,-88,-89],[[2,-80,[1,"d5dFg0V5VMrqjviO9N6Ont"],[5,0,0]]],[0,"59nDMavatNh6StfYeBQ8Ve",1,0],[1,0,-274,0]],[163,"Controller",0,1,[-90,-91,-92,-93,-94,-95,-96,-97],[0,"6cCkZiAFdIu7sABlZodtpr",1,0]],[73,"Arrow",33554432,[-101,-102,-103],[[2,-98,[1,"24nPvhGHtD25/RtV3DQhpS"],[5,0,0]],[21,true,-99,[1,"f7eVi2HglFFIqZbN81fNsi"],[20],21],[4,-100,[1,"afDmss89JAO6f1KKHZ9HDs"]]],[0,"4e6QnfCmVMiY3x0q08UWNy",1,0],[1,0,-218,0]],[103,"ButtonLayer",512,33554432,2,[-106,-107,-108,-109,-110],[[2,-104,[1,"12sz3TruNH3aoszaYRDfKC"],[5,1136,640]],[75,45,100,100,-105,[1,"d7XMaIxw5FTaSPank+BXwv"]]],[0,"faRgF2rYRJK55tSk90Lbgq",1,0]],[159,"BlackScreen",false,33554432,[[2,-111,[1,"57UJ/sl/RKcJdDNQR8NQtn"],[5,1136,640]],[85,1,0,-112,[1,"03ZolL92hF3ams2EMNrI52"],[4,4278190080],84],[4,-113,[1,"62gb0zWldHLaQdpPnDdVYF"]],[51,-114,[1,"666+cP0shHeZKHI1QWBhRi"]],[75,45,16,16,-115,[1,"e8CW002OBM77+KCMt2GVaq"]]],[0,"de0qxvJepFDoPrJivirFJh",1,0]],[158,"TopUI",512,33554432,[-118,-119,-120,-121],[[2,-116,[1,"31dtNdVVhE7aVsdrCy9RTN"],[5,1136,640]],[98,45,-117,[1,"ceLkNvbuRH0K1pBfXkdgWM"]]],[0,"99J0pDqnFGfoZ4pw1fS1gr",1,0]],[46,"Border",33554432,9,[-128,-129,-130,-131],[[2,-122,[1,"77FD4uJR5GYrer3mtRNhvM"],[5,0,0]],[174,-127,[1,"d4j1OR7c1CG6jNw553P9B7"],-126,-125,-124,-123]],[0,"81gN4nQqFM7Jg3Zi07edYy",1,0]],[45,"UI",33554432,[-133,-134,4,-135],[[2,-132,[1,"3aGt3QJXFFtLSdanoC4tX+"],[5,0,0]]],[0,"bd+TOEVUZEZZO35R0G43d/",1,0]],[22,"WiFi",33554432,4,[-138,-139,-140],[[2,-136,[1,"83xuKwIklDqKZH2gDMO4e6"],[5,23,18]],[84,-137,[1,"7cTkU152BKboOxHEoClMN7"],[4,4293896032],12]],[0,"82YR5/W8JByKYYPZi2km9i",1,0],[1,-116,-35,0]],[22,"FuncBtn",33554432,7,[-142,-143,-144,-145],[[2,-141,[1,"b06AKz6a9IkJeuU8ViGe5m"],[5,0,0]]],[0,"cdTD9m5iFN0KSOpwuOPWao",1,0],[1,318,-271,0]],[45,"RoomBtnBG",33554432,[-149,-150],[[2,-146,[1,"f3TRX3WpdJlo5dAzW95qqn"],[5,145,90]],[116,1,0,-147,[1,"aeUzUEEkNIEIKDbEBlmlSj"],30],[140,3,1.05,-148,[1,"1dSxng41FM0q+PEvHh5m6A"],31]],[0,"6cp67Du6xC5KNvK0kg0Xj+",1,0]],[46,"LightFx",33554432,14,[-153,-154,-155],[[2,-151,[1,"9egIfUZKREv4c+ZS9vPVoR"],[5,0,0]],[21,true,-152,[1,"4fuJwsY1BCR4tNW5ufdTdg"],[28],29]],[0,"54zk3MDktNzqUFVzewH8id",1,0]],[22,"FuncBtnFx",33554432,7,[-157,-158,-159,-160],[[2,-156,[1,"f0hCBJ0VxFS5ZGaimrQT1W"],[5,0,0]]],[0,"3fXzqVBvpHK7vYfJmbE+rr",1,0],[1,318,-271,0]],[22,"FuncBtnCost",33554432,7,[-162,-163,-164,-165],[[2,-161,[1,"4ek65rcJ5Ppbc4c4Ll2RA+"],[5,0,0]]],[0,"a3V1vhNm9D27yk+in+Li4u",1,0],[1,318,-271,0]],[73,"FuncBtn",33554432,[-167,-168,-169,-170],[[2,-166,[1,"5fBRktKtBNWK0B6UKcTejm"],[5,0,0]]],[0,"24N1HkuLhBV73EHxdWwC/M",1,0],[1,318,-271,0]],[104,"Pivot",false,33554432,[-173,-174],[[2,-171,[1,"21p/FzvGhK37okE/8kgda8"],[5,0,0]],[4,-172,[1,"309uIJmAhP9K1uy8Lab0K8"]]],[0,"d3pzwM2aZMvryoYukcscKX",1,0]],[46,"Display",33554432,1,[-177,2],[[2,-175,[1,"7ev/eA/vxIkqexfnwFO7eH"],[5,1136,640]],[246,45,-176,[1,"c5DrUDwz1O2qyRyNPG9ULT"],1]],[0,"0f+lOVRWdHu4KyjrIVHDkJ",1,0]],[14,["97CfmgVDND27mBF7ys+wq6"]],[14,["7evMwbm6hJl7cJZ8Ys66Rg"]],[110,"BtnMinus",33554432,4,[-181],[[[2,-178,[1,"90JFN5rRFH4JckgoWfufek"],[5,75,75]],[115,0,-179,[1,"cfkQHrltdEGYftMhGU/l8W"],14],-180],4,4,1],[0,"2eZfqcrV9HtKBONDtPYEv8",1,0],[1,-105,13,0]],[110,"BtnPlus",33554432,4,[-185],[[[2,-182,[1,"41W6nkh4JMa4EAdHOlDuGD"],[5,75,75]],[115,0,-183,[1,"ac7AyCzGxH47KvKF9kYLyp"],16],-184],4,4,1],[0,"75c0PwzP5J7ILiTiwq93VQ",1,0],[1,70,13,0]],[73,"BottomBar",33554432,[-187,-188,-189],[[2,-186,[1,"bc9smsVhBHz6AN8SmxH4A9"],[5,0,0]]],[0,"d4W9Qo/xhPUZ+BeAj0cAJQ",1,0],[1,0,-274,0]],[120,"YourLocation",33554432,6,[[2,-190,[1,"178hZRTGFOB5fZwV6mASO4"],[5,180,70.4]],[167,"您的位置",40,false,true,-191,[1,"99/ERJ465MNLrD7eIbvw7F"]],[155,10,-192,[1,"f1Y2QIQf5PdYJYIpGkrPLa"],[4,4292280064],[0,0,0]],[4,-193,[1,"b7T9AB0V5OUZ0uflyT4LCH"]]],[0,"6dYBA03v5ONYNCtd2uIcf0",1,0],[1,0,235,0],[1,0.9,0.9,0.9]],[45,"Use",33554432,[-195,-196,-197],[[2,-194,[1,"2et9y3knBFJL0cZcd11Obp"],[5,90,90]]],[0,"12/Rd2qqFNXacuLDWuA+Mr",1,0]],[45,"Use",33554432,[-199,-200,-201],[[2,-198,[1,"adxCTqNYZNA5AJYam7ETSx"],[5,90,90]]],[0,"d73EdHBHVPHIK/FxZhrJqG",1,0]],[45,"Use",33554432,[-203,-204,-205],[[2,-202,[1,"3cdVYezqtHRpy+drWdlc99"],[5,90,90]]],[0,"31dJcCOftDWbXuvQvRZKQM",1,0]],[45,"Use",33554432,[-207,-208,-209],[[2,-206,[1,"1cEMmw/DNIl6BUkhJUw+DS"],[5,90,90]]],[0,"64OfMITRBOEYaWI/2CYWX+",1,0]],[129,"Cost",false,33554432,[-211,-212,-213],[[2,-210,[1,"87L0MnrFJBDJqyUeueTpCw"],[5,0,0]]],[0,"cfeQVqo61Cwpw+BpJcnf3O",1,0],[1,0,-28.6,0]],[129,"Cost",false,33554432,[-215,-216,-217],[[2,-214,[1,"77Lln6wbxDX6glP9cQbtZG"],[5,0,0]]],[0,"3e3Ovsz69LT6ZVRpLiNFCV",1,0],[1,0,-28.6,0]],[14,["a6BxCH1ftPgKzWqOL9CaHW"]],[46,"Location",33554432,11,[6],[[2,-218,[1,"56pLROitVHFqHOwU925QdZ"],[5,0,0]]],[0,"b0p3JsND9M8asLFtoAIljb",1,0]],[14,["19m3e/BMxGVo7baRPyfSmJ"]],[14,["99KHcneTxFtp0SYrcio7ut"]],[46,"Aim",33554432,11,[-220,-221],[[2,-219,[1,"0aNpFLXyhBwrUq4JB7TRqi"],[5,0,0]]],[0,"1b3Hg+4VxGYZhyXoZqXoQm",1,0]],[37,"BarBG",33554432,4,[[2,-222,[1,"7fzktkuV9EsID8PHxuCxdP"],[5,1600,115]],[116,1,0,-223,[1,"94SBV3PmZBpIh8t6FRx8ja"],5],[51,-224,[1,"43TC1ZBjtDW4KTd7yhjWaW"]]],[0,"dbdwGBN/pLrZkXLl0bk7J0",1,0]],[105,"DarkImage",false,33554432,23,[[2,-225,[1,"15r4jh75xBip4GYzsBeuSR"],[5,75,75]],[138,0,-226,[1,"86rW0ZgWNEao+rujD62yrr"],[4,4289835441],13],[51,-227,[1,"3bamwgjYBMxIqglBnbc93i"]]],[0,"4bTf0Xu5JIHa2cgcNZt+Vm",1,0]],[105,"DarkImage",false,33554432,24,[[2,-228,[1,"b1yEPDEslD7YuVzu6L7wbr"],[5,75,75]],[138,0,-229,[1,"0bUBUUOXVNuqE56Hg9RqHA"],[4,4289835441],15],[51,-230,[1,"14PfAge3pCM6taDfjHhCDS"]]],[0,"32uGU184NHDqp9GhFOCccn",1,0]],[17,"LocationArrow",33554432,6,[[2,-231,[1,"d4+VeGre1MMpshKg1bLOoR"],[5,66,74]],[35,-232,[1,"b9IEm1CBVCIJUMFrVy9AFF"],17],[4,-233,[1,"e70UA2eaxCZq5Rjf3zGR5M"]]],[0,"71SmJqOo9JVJjthBIlIIjy",1,0],[1,0,175,0]],[120,"Light",33554432,6,[[2,-234,[1,"0fgPWEQK9HOpmZ3/oi59z+"],[5,80,80]],[69,-235,[1,"fauyhR7dJPYoDsnWdgi63p"],18,19],[15,0,-236,[1,"78TvHBUTREcZUdhW++Gbp3"]]],[0,"53n/6djLBCMb1FO7YlHdEs",1,0],[1,0,70,0],[1,0.009999999776482582,0.009999999776482582,1]],[110,"Hammer",33554432,13,[-239],[[[2,-237,[1,"cehA/6nhJOoqza6wvPmb4+"],[5,90,90]],-238],4,1],[0,"dc6AfPqV9Jp4kTXvQnrOI3",1,0],[1,-150,0,0]],[130,"EF_sprite_ani",false,33554432,15,[[2,-240,[1,"e3Fr/M6JtC74o20X4nOBny"],[5,171.2,98.3]],[173,1,1,0,-241,[1,"0crBZ42VBG76B7e7D3sY6l"],23],[4,-242,[1,"b4PUu2rXRCrLCikk3Xu0NU"]]],[0,"85yb4CIC1BHLKjn+IQjko/",1,0],[1,-0.2,0.1,0],[1,0.8,0.8,1]],[58,"FrameFx_1",false,33554432,15,[[2,-243,[1,"a2ZHaSd4lEh5DguqCXRBdb"],[5,32,32]],[86,1,-244,[1,"78DQEvNoZE2LcER7X791HY"],24,25],[4,-245,[1,"deXM+T/s5Harb1dS6jSOaV"]]],[0,"aeLzqYZDlD25Zyk7C1Xvk8",1,0],[1,-70.282,0,0]],[58,"FrameFx_2",false,33554432,15,[[2,-246,[1,"cbiZTzkANN2rGDldkEu+t/"],[5,32,32]],[86,1,-247,[1,"7dW2Hwy0pEvqT2hi27ouHd"],26,27],[4,-248,[1,"f0g07AY5NKJbkSIVUGBV5l"]]],[0,"27V6EpYoxEDJ6QmXgbwWPV",1,0],[1,-70.282,0,0]],[22,"Hammer",33554432,16,[-250],[[2,-249,[1,"f4FWj6aXdOy7L0pdBDlDOf"],[5,90,90]]],[0,"79bnwPmKZKcbIdT9y5lwmi",1,0],[1,-150,0,0]],[122,"FrameFx",false,33554432,47,[27],[[2,-251,[1,"99UsnN855CopDYCVAm+vcG"],[5,90,90]],[21,true,-252,[1,"bepYdPK71Pza5DkXrv/0ed"],[38],39]],[0,"ca6Bqzm2ZDMKL7XBCIEFa3",1,0]],[22,"Axe",33554432,16,[-254],[[2,-253,[1,"9eADio7RhKo7pdMvI2cTxc"],[5,90,90]]],[0,"c9I4ZmLs1MOYhG+YOCSqr5",1,0],[1,-50,0,0]],[122,"FrameFx",false,33554432,49,[28],[[2,-255,[1,"27x3iGcvFHGKyQEFf04W/f"],[5,90,90]],[21,true,-256,[1,"23XxwnoOxHU4re8YmGYadi"],[46],47]],[0,"fcv1VjgQZN44XpJrLWRgam",1,0]],[22,"Aim",33554432,16,[-258],[[2,-257,[1,"6ecLQ5PsZPq721yegdgkE9"],[5,90,90]]],[0,"cdh6+7DbZDEKD9IZVj8DOk",1,0],[1,50,0,0]],[122,"FrameFx",false,33554432,51,[29],[[2,-259,[1,"c3AxQK6ThOfJ+ESQ1eo2hU"],[5,90,90]],[21,true,-260,[1,"08HPAYzqJKM6jG1FOF5XAW"],[54],55]],[0,"deBqmKO1VKFZxxjHIwqLHs",1,0]],[22,"Auto",33554432,16,[-262],[[2,-261,[1,"760H0t9ZNOk77h0kYwDcHY"],[5,90,90]]],[0,"3ehHE/8YlOGr2r5YX1+P05",1,0],[1,150,0,0]],[122,"FrameFx",false,33554432,53,[30],[[2,-263,[1,"8eOoAMQ4RKzpXMdFGPSnal"],[5,90,90]],[21,true,-264,[1,"b3ooGE3VhGV635nWpoQZ13"],[62],63]],[0,"delXG4/fFPlbkFqxcNyeSg",1,0]],[22,"Hammer",33554432,17,[31],[[2,-265,[1,"5eN4VXBWVCkL34O5VN61MQ"],[5,90,90]]],[0,"90vXD5hsJKCKvJEOSeGX0u",1,0],[1,-150,0,0]],[22,"Axe",33554432,17,[32],[[2,-266,[1,"c47JxvokBDNa+41k0alpUL"],[5,90,90]]],[0,"7960eJJP9AhqiKWVyOU1XA",1,0],[1,-50,0,0]],[46,"BitmapLabel",33554432,7,[-268,18],[[2,-267,[1,"1fjLR+9RJI5q0EZNLFVbMS"],[5,0,0]]],[0,"7aIspg6UNG0pP447I/R8io",1,0]],[106,"RoomName",33554432,[[2,-269,[1,"35tgLIv9RIHITCP2aZYTsd"],[5,63.38,44.1]],[71,"富豪館\n(單人)",18,30,35,2,false,true,-270,[1,"5elTCbi2hOIr06HoncJNEg"]],[176,1,-271,[1,"dedzobRj9D44V8cB8xUhVh"]]],[0,"50a4PPdx1MFZqy/cCUtggM",1,0],[1,0,-8,0]],[22,"Hammer",33554432,18,[-273],[[2,-272,[1,"57kTdq39lCDr7iJSUp1+Ue"],[5,90,90]]],[0,"f9BGbFcRRBtpsYGNpPk6gp",1,0],[1,-150,0,0]],[17,"Name",33554432,59,[[2,-274,[1,"28O/2L4jJARrh901vqN7w+"],[5,82,34.239999999999995]],[71,"雷電槌",24,24,24,2,false,true,-275,[1,"91ZnbL/5VB+rJ7Rgbba8I1"]],[91,-276,[1,"2fHBy4ljhPn67Pg8TuzpfB"],[4,4285072384]]],[0,"c0QLma08pIUodFeOZ9rB77",1,0],[1,0,-27,0]],[22,"Axe",33554432,18,[-278],[[2,-277,[1,"aedhKvf2BDaKYYLAs1f/T6"],[5,90,90]]],[0,"96PzG3IINKOpoYAsRSSiFB",1,0],[1,-50,0,0]],[17,"Name",33554432,61,[[2,-279,[1,"9ef8wUXlxEpJQ0etQO1deN"],[5,82,34.239999999999995]],[71,"飛斧",24,24,24,2,false,true,-280,[1,"14JZIB9GBGNKEkqtCEX3mr"]],[91,-281,[1,"0ekicVNHtCArn9JP5rWZQo"],[4,4278210677]]],[0,"c5B5rjxbFLaJZgfy3qk/JA",1,0],[1,0,-27,0]],[22,"Aim",33554432,18,[-283],[[2,-282,[1,"b5bkKwLzlKb6fzjRJnI5p5"],[5,90,90]]],[0,"cf0h4SDGpGQoMnZfAGtiNM",1,0],[1,50,0,0]],[17,"Name",33554432,63,[[2,-284,[1,"8efGv2YLNPb7M7mXgHqD9l"],[5,82,34.239999999999995]],[71,"鎖定",24,24,24,2,false,true,-285,[1,"4ajNMbxTZB+bal4WuW92iO"]],[91,-286,[1,"bee48Ni8hO96zhWWqdHNVD"],[4,4278211759]]],[0,"94OV9U1xtO2IwKK2RouZu4",1,0],[1,0,-27,0]],[22,"Auto",33554432,18,[-288],[[2,-287,[1,"ecHdQzPM1BQa+NHdMZ0l4Y"],[5,90,90]]],[0,"111P6MoapFfK20WmVdgBVq",1,0],[1,150,0,0]],[17,"Name",33554432,65,[[2,-289,[1,"6atjWhquNMgYrLK0uDS3xh"],[5,82,34.239999999999995]],[71,"自動",24,24,24,2,false,true,-290,[1,"fbtUv8sIZG7pF7fdozPnil"]],[91,-291,[1,"0aS0xDCXtKVJALwxc6ZwU5"],[4,4278548736]]],[0,"07GJ9Qa8ZDC7wbJINrLYTb",1,0],[1,0,-27,0]],[110,"Axe",33554432,13,[-294],[[[2,-292,[1,"8f07x7bHFOt5brFbCdnLSb"],[5,90,90]],-293],4,1],[0,"85brBzhQBE8bEUOoIfh1TJ",1,0],[1,-50,0,0]],[110,"Aim",33554432,13,[-297],[[[2,-295,[1,"f9WCcE/mhMs7ESUP4xKnTW"],[5,90,90]],-296],4,1],[0,"f4ThSG1qVKSaMyYfnxbesN",1,0],[1,50,0,0]],[110,"Auto",33554432,13,[-300],[[[2,-298,[1,"899Re/CpBM35kpQCW+26CL"],[5,90,90]],-299],4,1],[0,"3e0ZB8lYxDyJyIxa4PoFXp",1,0],[1,150,0,0]],[46,"Mask",33554432,9,[8],[[2,-301,[1,"feECfps7ND1b09NzuX03jM"],[5,1136,640]],[98,45,-302,[1,"377H7K2WJNaIvg03vVGXsa"]]],[0,"5brVXKwEpPYIU1YbZ0qvsk",1,0]],[212,"Toast",33554432,9,[19],[[[2,-303,[1,"a4YPPR5MBCV7KNPYjnXC3e"],[5,0,0]],-304],4,1],[0,"1fMGQGGpxCkJIrHm9QP76/",1,0]],[46,"Cursor",33554432,9,[-308],[[2,-305,[1,"39Ct5LL+lKmJJcKInxyh17"],[5,0,0]],[178,-307,[1,"49VKgGHEBExZWNMxrNDmgo"],-306]],[0,"235/bP1ztNlIN66TJjLZnZ",1,0]],[17,"Image",33554432,72,[[8,-309,[1,"17AAJhvHhAEKrI5oW7nVAL"],[5,30,32],[0,0.1,0.9]],[35,-310,[1,"8aerI7lV5OdbAYyTmUG5nS"],75]],[0,"2cYLFJVQhOkaGPUJ0CN4ON",1,0],[1,-10000,0,0]],[80,"Left",false,33554432,10,[[-311,[87,1,0,-312,[1,"a2ZEJysbdCJIbTJI38f6q2"],[4,4278190080],76,77],[51,-313,[1,"aaO0LidN5OpYINzp2RtoPQ"]]],1,4,4],[0,"94N9OrJOZCMKNmLlKYf2OR",1,0],[1,-568,0,0]],[80,"Right",false,33554432,10,[[-314,[87,1,0,-315,[1,"00g6jeMZ1Naq23iEmQ1wIM"],[4,4278190080],78,79],[51,-316,[1,"9blQY5j6BCPL4znJK+M8JQ"]]],1,4,4],[0,"0cl3mZ7lFDKaXs1O+e2mx7",1,0],[1,568,0,0]],[80,"Top",false,33554432,10,[[-317,[87,1,0,-318,[1,"e1dMh3YTZEx6lk8SGV63Fm"],[4,4278190080],80,81],[51,-319,[1,"c6z51MRXNDVYrh0FcCQ8x0"]]],1,4,4],[0,"50KUaOSkJLPr71tPvTrB2V",1,0],[1,0,320,0]],[80,"Bottom",false,33554432,10,[[-320,[87,1,0,-321,[1,"16fGpGHLlNi49Q/qeBS20D"],[4,4278190080],82,83],[51,-322,[1,"c8hllsyNVBZajuNTwhjfs3"]]],1,4,4],[0,"13T/kouvBHz4t/jU/xTE63",1,0],[1,0,-320,0]],[46,"DataMgr",0,5,[-324],[[272,-323,[1,"50JnAAeBlM35ylQWFT2ZiH"]]],[0,"091LCDpwxMY7n3ufsyEEBD",1,0]],[92,0,{},78,[82,"a6BxCH1ftPgKzWqOL9CaHW",-325,[89,"2fQOTkOs1MB42bEQ+U8qOq",1,[[59,"PropertyRes",["_name"],33],[36,["_lpos"],33,[1,0,0,0]],[36,["_lrot"],33,[3,0,0,0,1]],[36,["_euler"],33,[1,0,0,0]]]],0]],[46,"GameCtrl",0,5,[-327],[[273,-326,[1,"7cFeEJzaxDlKLeNTFJ3OAY"]]],[0,"f2YRbSdBxNmJRqiyCTtoUJ",1,0]],[37,"MonsterMgr",0,5,[[274,-328,[1,"f4JDI186BKd6cBEScLal8W"]],[275,-329,[1,"cey2o6U2BBkr2mO4o0HecJ"]]],[0,"c1BeIAyKhNLJdsvKcMqJni",1,0]],[103,"PlayerLayer",512,33554432,2,[11],[[2,-330,[1,"30cNLQw0pB4ZXh3WjroQ//"],[5,1136,640]],[75,45,100,100,-331,[1,"27/S6dQ8NKA4sm8fh65ZCb"]]],[0,"cceHhrn+BDLJLtL4uG7bZ6",1,0]],[92,0,{},20,[82,"19m3e/BMxGVo7baRPyfSmJ",-332,[89,"9fBDAxUl1LmqIfUFV4sTcN",1,[[59,"Scene",["_name"],35],[36,["_lpos"],35,[1,0,0,0]],[36,["_lrot"],35,[3,0,0,0,1]],[36,["_euler"],35,[1,0,0,0]]]],1]],[17,"BarBG2",33554432,4,[[8,-333,[1,"ed8PFChddNkZgVdm8gPW3K"],[5,460,47],[0,0,1]],[85,1,0,-334,[1,"2dk5XWS0BLXKqeFUOf5JZD"],[4,2013265920],6]],[0,"57tEvsJshOfZD9uS2G1ThT",1,0],[1,-375,21,0]],[17,"Tower_L",33554432,4,[[2,-335,[1,"82FlytuWZA57CWp48+34TH"],[5,95,163]],[35,-336,[1,"25tiB46VtCDZ/edZ407HjD"],7]],[0,"af7sJVWptMA5kh4MWbjGhg",1,0],[1,-576,4,0]],[17,"Tower_R",33554432,4,[[2,-337,[1,"e3mi6Xu5VLFIvUH21ao3Mz"],[5,95,163]],[35,-338,[1,"7aljwuipJC9a5cGpwLFvE9"],8]],[0,"5eArg+DalMo6ExWFAyGGNV",1,0],[1,576,4,0]],[131,"Level_1",512,33554432,12,[[2,-339,[1,"64KVTbVDZBWbJqMuMwyl8m"],[5,5,6]],[84,-340,[1,"65AMyvmkZNBbhVnd2iCL5a"],[4,4294944592],9]],[0,"35bVTaLttCYqMbSdPRbdHx",1,0],[1,0,-6,0]],[107,"Level_2",512,33554432,12,[[2,-341,[1,"4dqgx59OtKQrU8kYVAocTE"],[5,15,6]],[84,-342,[1,"01D0HuYsBAe7OPSjK5cQ69"],[4,4294944592],10]],[0,"3c/PryBc1M17lYUcfqZ+Ou",1,0]],[131,"Level_3",512,33554432,12,[[2,-343,[1,"daNU1AlspG8qK0oSYv6926"],[5,23,8]],[84,-344,[1,"34sg7wmOFHeKTO5JLmJFoI"],[4,4294944592],11]],[0,"d8nGPph3JHc5BnJMz4YLYB",1,0],[1,0,5,0]],[109,"BetNum",33554432,4,[[[8,-345,[1,"5849wvQWRN4bOPKN3dxAX/"],[5,80,39.9],[0,0.5,0.45]],-346],4,1],[0,"4dfaaz3sFAX7dtiIeIruvI",1,0],[1,-17,0,0]],[109,"CoinNum",33554432,4,[[[8,-347,[1,"f6FbWbxpVDD7PJdKzVh/8s"],[5,176,39.9],[0,0.5,0.45]],-348],4,1],[0,"7f8kqdSZdEC5Tyh/8PeC5r",1,0],[1,-252,0,0]],[46,"BitmapLabel",33554432,11,[25],[[2,-349,[1,"38sPZWbNFC27pyACmF6kQ6"],[5,0,0]]],[0,"a4iTZxmfFG/6GmFGThhGqV",1,0]],[17,"BetText",33554432,25,[[2,-350,[1,"7dkh1/rxpCgrrNqoC6Zw7d"],[5,30.02,25.2]],[117,"Bet",20,20,20,false,-351,[1,"0aBK6WYI5PmYPaPvcqbd4I"],[4,4294959501]]],[0,"3azaDuA3VGXLBj95D8flOU",1,0],[1,-18,40,0]],[17,"PlayerName",33554432,25,[[2,-352,[1,"5dvakNjtVMHpjzt7QGSRHb"],[5,56.69,25.2]],[117,"Player",20,20,20,false,-353,[1,"38BD3afK9J/bH2+Ta+UNNl"],[4,4294959501]]],[0,"b2bfoGgTFKZav5YgZ/9VUb",1,0],[1,-252,40,0]],[109,"Session",33554432,25,[[[8,-354,[1,"a2LlbWpkpAG4OB9yF1/e0/"],[5,160.17,20.16],[0,0,0.5]],-355],4,1],[0,"044NnKMHhDnr2uCeVmk8wf",1,0],[1,-96,-35,0]],[22,"RoomBtn",33554432,7,[14],[[2,-356,[1,"d34RPJJlRJi7udVpCcfJsn"],[5,0,0]]],[0,"5f/92rAqJGgpIuVtqLNZ9p",1,0],[1,-442,-271,0]],[160,"Arrow",512,33554432,14,[[2,-357,[1,"6dATLvE0lCnJUW6EB9aRv0"],[5,39,30]],[35,-358,[1,"5bUS5J0ulDPab0l8jgswfa"],22]],[0,"9fe395DpBPaIYECCfdP1Rb",1,0],[1,0,30,0],[1,0.7,0.56,1]],[29,"RollEf_01",false,33554432,27,[[2,-359,[1,"f2Sbw2r2xMqITHvXYwqgFk"],[5,70,70]],[39,1,0,false,-360,[1,"417scIpblNnJT5Jpn6fR5B"],32,33]],[0,"7a+hXk8BJLMpsEevyp3+wb",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,27,[[2,-361,[1,"d788zB+SFK9a++bD6PgFEX"],[5,70,70]],[39,1,0,false,-362,[1,"7fI/ZnQelH1oNLSGqCQ2+i"],34,35]],[0,"c0Q0BDCftGWavjHLjzD+Ts",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,27,[[2,-363,[1,"55UXbAfzFIoYGa3gpBUx7V"],[5,65,65]],[88,1,0,-364,[1,"2bfgLNlgdIsIGeUS5YNNR7"],36,37]],[0,"23micrSFZAa7vccnydhmTo",1,0],[1,1.4,1.4,1]],[29,"RollEf_01",false,33554432,28,[[2,-365,[1,"07Le77hwRH8rTT0aVyE+Tt"],[5,70,70]],[39,1,0,false,-366,[1,"637JTlnZpIy5w8OJWTosIm"],40,41]],[0,"91EDxYa+hBhoY5OR/AUuTw",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,28,[[2,-367,[1,"8egPbVJwJIsaKr1L5xO68m"],[5,70,70]],[39,1,0,false,-368,[1,"fe8W10YMJBFKv03Sn++GIb"],42,43]],[0,"b1waktwzNBwKSwMnPXxzcJ",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,28,[[2,-369,[1,"6eDnmQe6BBTIzqk6UexdPr"],[5,65,65]],[88,1,0,-370,[1,"1aIjaYWyhOBZVyfgELeR1U"],44,45]],[0,"09G97Sv4pEZ6I7/Se6E+JX",1,0],[1,1.4,1.4,1]],[29,"RollEf_01",false,33554432,29,[[2,-371,[1,"abi+n/FnZMipmbfk0vH65P"],[5,70,70]],[39,1,0,false,-372,[1,"f2Mqe3wThBaoNlJQdB0lJ2"],48,49]],[0,"07xFyFkIVP+aFO2wCAtspl",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,29,[[2,-373,[1,"a7YoKeGYFORYc+Ogop0t94"],[5,70,70]],[39,1,0,false,-374,[1,"dcp7+13c5E6J0jXNtq+6E/"],50,51]],[0,"179W2fbclM3IQQXLj+MbOp",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,29,[[2,-375,[1,"062Grd9CNMEKNF99Awx8N/"],[5,65,65]],[88,1,0,-376,[1,"b3FZdYhktKOLlPKU4wIwAU"],52,53]],[0,"5cdE9k4C9NIqbxDX+Dfsdx",1,0],[1,1.4,1.4,1]],[29,"RollEf_01",false,33554432,30,[[2,-377,[1,"b4sLMm3wNC9rptufTts9Zm"],[5,70,70]],[39,1,0,false,-378,[1,"58FOXk1DFASaX4NgrAq/mn"],56,57]],[0,"d7vSLwM3dCMIEL/wJ2aRfc",1,0],[1,-1.4,-1.4,1]],[29,"RollEf_02",false,33554432,30,[[2,-379,[1,"70fvJ/ANVDPIkqDSCK/fJz"],[5,70,70]],[39,1,0,false,-380,[1,"85MX+gRqNEDJD0+2LKOEUV"],58,59]],[0,"d6ZhrVzJJF6av1RLWxoyzk",1,0],[1,1.4,1.4,1]],[29,"CardLight",false,33554432,30,[[2,-381,[1,"c3mr5fHZlHBpvVhnucZWOl"],[5,65,65]],[88,1,0,-382,[1,"c11eS6CRRMKqvx7iH0jS0K"],60,61]],[0,"a5B3ko+wlK8YDT+Sq2YTXo",1,0],[1,1.4,1.4,1]],[37,"BG",33554432,31,[[2,-383,[1,"76IjOUiW5CHobRoNHvmNDs"],[5,84,25]],[85,1,0,-384,[1,"8cNmvIPU9Fdrw9Jm8n+jxk"],[4,2885681152],64]],[0,"e4jzXQjztO65gBGKjU1aKJ",1,0]],[17,"Icon",33554432,31,[[2,-385,[1,"a2bQwYX5ZCNrdoIKnP7vuP"],[5,20,20]],[35,-386,[1,"65eGX4Y39EhYq+ehIFvJYH"],65]],[0,"89Mj8deYpCz6OwUsvmeJTH",1,0],[1,-31,-0.2,0]],[17,"CostNum",33554432,31,[[8,-387,[1,"f8rqJHAsBI4r5zulD2V5ZJ"],[5,60,24],[0,0.5,0.45]],[112,"0",16,16,16,2,false,false,-1,-388,[1,"4dRJKPMbhK7o9kM9spMI64"],66]],[0,"f8PeYLsZpDUrXmrvxNN8Au",1,0],[1,10,0,0]],[37,"BG",33554432,32,[[2,-389,[1,"73yuYY+xBH0JlH4BiHUtj0"],[5,84,25]],[85,1,0,-390,[1,"94WEorm4RJFYFZzggWzs3E"],[4,2885681152],67]],[0,"51obbI15NAZJ3CUNhLuinN",1,0]],[17,"Icon",33554432,32,[[2,-391,[1,"43INahu1tHEJduf/TDdeIt"],[5,20,20]],[35,-392,[1,"80eRrOyzJKi4+gtNBNo4HY"],68]],[0,"17LUM8zKRBDLqJ2kVx4e7Z",1,0],[1,-31,-0.2,0]],[17,"CostNum",33554432,32,[[8,-393,[1,"7dIfRjfBVKFZlU9JonG2wr"],[5,60,24],[0,0.5,0.45]],[112,"0",16,16,16,2,false,false,-1,-394,[1,"aabjDQnNtOnYh5NWnmV1wF"],69]],[0,"78q3M5XwtH7aZV1MIbu8LB",1,0],[1,10,0,0]],[17,"Aim",33554432,17,[[2,-395,[1,"7eNDs7CHBLF7lfDpkjNHMu"],[5,90,90]]],[0,"56ygZkNAVL/amW9BY8bFfG",1,0],[1,50,0,0]],[17,"Auto",33554432,17,[[2,-396,[1,"e0CsGV//ZJ656b+F6MxUne"],[5,90,90]]],[0,"cfaTjnK81EI7/E7x9jTg5S",1,0],[1,150,0,0]],[22,"RoomBtn",33554432,57,[58],[[2,-397,[1,"0dBtsSnyNMEq5mnyfijhc2"],[5,0,0]]],[0,"09oYQr3ANHo5nJpvOnymjR",1,0],[1,-442,-271,0]],[37,"Image",33554432,67,[[2,-398,[1,"f237jedXNJNYg3ekBZUrdQ"],[5,90,90]],[35,-399,[1,"47Vi0JXgFIYp2usehbwU02"],70]],[0,"a5YZ0A7ixM54Xh2yv239l9",1,0]],[37,"Image",33554432,68,[[2,-400,[1,"deLyAuKGtDebom3NKKOnoh"],[5,90,90]],[35,-401,[1,"737zavJvlNl4+ZVAuoV2cF"],71]],[0,"45uyM6FDRLkIw1BBX/7EpD",1,0]],[37,"Image",33554432,69,[[2,-402,[1,"1fAYd6b7BANpGq6BD/4haj"],[5,90,90]],[35,-403,[1,"47kh5U3z9I4o+37auL9deZ"],72]],[0,"8cNMmjmsZLi5/IN1CFnFJJ",1,0]],[37,"Image",33554432,43,[[2,-404,[1,"c57WwTK7BAlKwDDzFt3EAj"],[5,90,90]],[35,-405,[1,"f13dobVs5MgKWmm2BnJS05"],73]],[0,"d30Cl+JxFNtLO0Ccp+J4/O",1,0]],[103,"UILayer",512,33554432,2,[9],[[2,-406,[1,"32bvM/BjFBBLkicGK0wZX7"],[5,1136,640]],[98,45,-407,[1,"4d6Ul7oPhOKo5QIKJb+Ewa"]]],[0,"5b9HR/wilJY7PJxkCNCyAV",1,0]],[37,"BG",33554432,19,[[2,-408,[1,"daNQBR4OlIDYKBDyf/ZjpZ"],[5,550,80]],[116,1,0,-409,[1,"e1gjwfiINHLpuXW6I1WQHP"],74]],[0,"cfpLmyX3ZBo7DwALSuxK7P",1,0]],[109,"Text",33554432,19,[[[2,-410,[1,"e6xhQdS6lJmJU5w5aih3o7"],[5,520,60]],-411],4,1],[0,"08bQB9wQBMNokzK13k/0Fy",1,0],[1,0,0.3,0]],[163,"Camera",0,1,[-412,-413],[0,"adsvgWSaNMAK1wf3daCny+",1,0]],[132,"3D Camera",0,126,[[276,0,100,320,2000,1074790401,-414,[1,"3cB1mDXcBNfIGjcsgQv4Ra"],[4,4282200893]],[180,-415,[1,"59+h8akI5N94HBj/q8eqgb"]]],[0,"f8d7DnerZCFo1pn82ZkVMQ",1,0],[1,0,363,902],[3,-0.1993679344171972,0,0,0.9799247046208296],[1,-23,0,0]],[17,"UI Camera",0,126,[[277,0,200,320,2000,6,41943040,-416,[1,"6fa9fxmPJOpoN6aomLrlVy"],[4,4278190080]],[180,-417,[1,"32rPil2ldBnbQNB8f7uHpb"]]],[0,"f3B8DT/MpEA4PzqUNk4hmh",1,0],[1,0,0,1000]],[37,"Initializer",0,5,[[278,-418,[1,"25bZfy+mpH4K7v0jrACK82"]]],[0,"02LDqJM7hIZ7uJ35T+zuTh",1,0]],[37,"RoleTurret",0,80,[[279,-419,[1,"81Qm/GnCJLPJtD2Y9crJHJ"]]],[0,"3cwYpqtuBAJ4lxuz22O2Uf",1,0]],[37,"ShootingMgr",0,5,[[280,-420,[1,"66oZPWSPtJZrCP9VrMJxQd"]]],[0,"ceBi1i5LJCb5KJw0oOgaxD",1,0]],[37,"SoundMgr",0,5,[[281,-421,[1,"29lhBpeM1Kt4T65YvNHNzf"]]],[0,"85wQKvIRZGWKXLSftLru9U",1,0]],[37,"EffectMgr",0,5,[[282,-422,[1,"c5vMF38odHCqfgqvXBin32"]]],[0,"ba70RcSDBKOLb450hX4R80",1,0]],[204,"UICtrl",0,5,[3],[0,"e4fGvQNWJP96iXY4Hi3oNu",1,0]],[92,0,{},37,[82,"97CfmgVDND27mBF7ys+wq6",-423,[89,"e4MNineuRD3KB6FeFo/sDN",2,[[59,"Sight_Aim",["_name"],21],[36,["_lpos"],21,[1,-1000,-1000,0]],[36,["_lrot"],21,[3,0,0,-1,6.123233995736766e-17]],[36,["_euler"],21,[1,0,0,-180]],[59,false,["_active"],21]]],3]],[92,0,{},37,[82,"7evMwbm6hJl7cJZ8Ys66Rg",-424,[89,"e3Od7enJNPx5s2OR1PYENG",2,[[59,"Sight",["_name"],22],[36,["_lpos"],22,[1,-1000,-1000,0]],[36,["_lrot"],22,[3,0,0,0,1]],[36,["_euler"],22,[1,0,0,0]],[59,false,["_active"],22]]],4]],[169,"0",24,24,24,2,false,false,-1,90,[1,"3ai9/eqm5BKIY1VI+vMdc4"]],[169,"0",24,24,24,2,false,false,-1,91,[1,"781lND8mxDZ5uBHIUUVcs7"]],[175,3,1.05,23,[1,"8edNiVXhtOeIdfOEaQrLp4"]],[175,3,1.05,24,[1,"24IFpAvmBMaYgyDDNZ+ejc"]],[117,"000000000000000000",16,16,16,false,95,[1,"05FJF3fuRFYIVeDJHEopaT"],[4,4293433932]],[90,43,[1,"35QLuV7GdMNKzEqHyC2xBF"]],[90,67,[1,"037xsQD7tDSKdfqzDyT9n2"]],[90,68,[1,"ffdpgEagxNmoKCdbORxkge"]],[90,69,[1,"2fAKO5DSxKkqiwf0x6JKwU"]],[168,"",29,28,28,2,125,[1,"3cxBi78EBGG75uV0Cwfdkp"]],[177,71,[1,"84J2pQQjNF9rsgVjZyWSYM"],19,146],[8,74,[1,"57JvckZBFFSKWDKLIyzF7L"],[5,100,640],[0,1,0.5]],[8,75,[1,"ddNvb4qxNF9KZFAzQEImTl"],[5,100,640],[0,0,0.5]],[8,76,[1,"2b9jEsRSVB2J8kGlU3KMfT"],[5,1136,100],[0,0.5,0]],[8,77,[1,"e2NM9a8/tEboGPONC+t3zs"],[5,1136,100],[0,0.5,1]]],0,[0,-1,2,0,-2,83,0,-3,79,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,11,2,0,12,3,0,4,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,126,0,-3,20,0,17,36,0,17,36,0,17,36,0,17,36,0,4,2,0,-1,59,0,-2,61,0,-3,63,0,-4,65,0,-1,55,0,-2,56,0,-3,116,0,-4,117,0,-1,47,0,-2,49,0,-3,51,0,-4,53,0,-1,142,0,-2,143,0,-3,144,0,-4,145,0,0,4,0,-1,38,0,-2,84,0,-3,85,0,-4,86,0,-5,12,0,-6,90,0,-7,91,0,-8,23,0,-9,24,0,-1,129,0,-2,78,0,-3,80,0,-4,81,0,-5,131,0,-6,132,0,-7,133,0,-8,134,0,0,6,0,0,6,0,0,6,0,-1,41,0,-2,26,0,-3,42,0,0,7,0,0,7,0,-1,96,0,-2,13,0,-3,16,0,-4,17,0,-5,57,0,0,8,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,-1,70,0,-2,71,0,-3,72,0,-4,10,0,0,10,0,23,151,0,24,150,0,25,149,0,26,148,0,0,10,0,-1,74,0,-2,75,0,-3,76,0,-4,77,0,0,11,0,-1,37,0,-2,34,0,-4,92,0,0,12,0,0,12,0,-1,87,0,-2,88,0,-3,89,0,0,13,0,-1,43,0,-2,67,0,-3,68,0,-4,69,0,0,14,0,0,14,0,0,14,0,-1,97,0,-2,15,0,0,15,0,0,15,0,-1,44,0,-2,45,0,-3,46,0,0,16,0,-1,47,0,-2,49,0,-3,51,0,-4,53,0,0,17,0,-1,55,0,-2,56,0,-3,116,0,-4,117,0,0,18,0,-1,59,0,-2,61,0,-3,63,0,-4,65,0,0,19,0,0,19,0,-1,124,0,-2,125,0,0,20,0,0,20,0,-1,83,0,0,23,0,0,23,0,-3,139,0,-1,39,0,0,24,0,0,24,0,-3,140,0,-1,40,0,0,25,0,-1,93,0,-2,94,0,-3,95,0,0,26,0,0,26,0,0,26,0,0,26,0,0,27,0,-1,98,0,-2,99,0,-3,100,0,0,28,0,-1,101,0,-2,102,0,-3,103,0,0,29,0,-1,104,0,-2,105,0,-3,106,0,0,30,0,-1,107,0,-2,108,0,-3,109,0,0,31,0,-1,110,0,-2,111,0,-3,112,0,0,32,0,-1,113,0,-2,114,0,-3,115,0,0,34,0,0,37,0,-1,135,0,-2,136,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,-2,142,0,-1,122,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,0,46,0,0,46,0,0,46,0,0,47,0,-1,48,0,0,48,0,0,48,0,0,49,0,-1,50,0,0,50,0,0,50,0,0,51,0,-1,52,0,0,52,0,0,52,0,0,53,0,-1,54,0,0,54,0,0,54,0,0,55,0,0,56,0,0,57,0,-1,118,0,0,58,0,0,58,0,0,58,0,0,59,0,-1,60,0,0,60,0,0,60,0,0,60,0,0,61,0,-1,62,0,0,62,0,0,62,0,0,62,0,0,63,0,-1,64,0,0,64,0,0,64,0,0,64,0,0,65,0,-1,66,0,0,66,0,0,66,0,0,66,0,0,67,0,-2,143,0,-1,119,0,0,68,0,-2,144,0,-1,120,0,0,69,0,-2,145,0,-1,121,0,0,70,0,0,70,0,0,71,0,-2,147,0,0,72,0,27,73,0,0,72,0,-1,73,0,0,73,0,0,73,0,-1,148,0,0,74,0,0,74,0,-1,149,0,0,75,0,0,75,0,-1,150,0,0,76,0,0,76,0,-1,151,0,0,77,0,0,77,0,0,78,0,-1,79,0,4,79,0,0,80,0,-1,130,0,0,81,0,0,81,0,0,82,0,0,82,0,4,83,0,0,84,0,0,84,0,0,85,0,0,85,0,0,86,0,0,86,0,0,87,0,0,87,0,0,88,0,0,88,0,0,89,0,0,89,0,0,90,0,-2,137,0,0,91,0,-2,138,0,0,92,0,0,93,0,0,93,0,0,94,0,0,94,0,0,95,0,-2,141,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,0,115,0,0,116,0,0,117,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,121,0,0,121,0,0,122,0,0,122,0,0,123,0,0,123,0,0,124,0,0,124,0,0,125,0,-2,146,0,-1,127,0,-2,128,0,0,127,0,0,127,0,0,128,0,0,128,0,0,129,0,0,130,0,0,131,0,0,132,0,0,133,0,4,135,0,4,136,0,9,1,2,1,20,3,69,147,3,70,8,3,71,140,3,72,139,3,73,138,3,74,137,3,75,141,3,76,34,3,0,134,4,1,11,6,1,34,8,1,70,9,1,123,11,1,82,14,1,96,18,1,57,19,1,71,25,1,92,27,1,48,28,1,50,29,1,52,30,1,54,31,1,55,32,1,56,58,1,118,424],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,138,139,140],[18,18,18,18,18,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,-1,7,2,3,3,2,3,2,-1,7,2,21,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,3,2,3,2,3,2,-1,7,2,2,15,2,2,15,2,2,2,2,2,2,3,2,3,2,3,2,3,2,2,15,15,21,21],[488,489,135,158,159,162,163,51,51,164,165,166,167,37,37,38,38,160,1,161,50,50,169,1,1,52,1,52,53,53,54,54,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,1,12,1,12,1,27,13,13,55,56,36,55,56,36,171,172,173,170,175,176,28,29,28,29,28,29,28,29,174,168,36,37,38]],[[{"name":"Ray","rect":{"x":332,"y":368,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[{"name":"S_coin0004","rect":{"x":310,"y":156,"width":150,"height":150},"offset":{"x":0,"y":0},"originalSize":{"width":150,"height":150},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[25]],[[{"name":"FrameFx","rect":{"x":104,"y":786,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[33,"Mudesa_Petrification"],[144,"Mudesa_Petrification",33554432,[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15],[[2,-2,[1,"381pk7EhhF1IXn8zlDYL8w"],[5,0,0]],[40,-3,[1,"f3h4tkhNNAs6pW48mscmsJ"],[27],28],[4,-4,[1,"63J2KO+LpPOIGdMx2SyXoA"]]],[0,"52XlQACX5C/7OpDwwuimio",-1,0],[1,2,2,1]],[122,"SunLight",false,33554432,1,[-19],[[2,-16,[1,"c6GKZIZOZFrYJlfGENKrdb"],[5,150,149]],[24,1,-17,[1,"a2VmeSFkJMPbkfLKeETnfI"],[4,4294929657],17,18],[4,-18,[1,"a3qO89JbhDqaFS4Eub1ChJ"]]],[0,"62TLTPI9pI1Z6RSFT9kvxt",1,0]],[143,"start_effect",33554432,1,[-22,-23],[[2,-20,[1,"beHmjWUTNOxJdOaAyQs8G3"],[5,0,0]],[4,-21,[1,"6e71mwDSpHHYSBPmpIBMNK"]]],[0,"97U9zKr8BB1pA8gM1glJif",1,0],[1,2,2,1]],[143,"Img_LightRadial_Hard",33554432,3,[-27],[[2,-24,[1,"d05ekXd/1PmLbcqbe2tQBV"],[5,256,256]],[24,1,-25,[1,"71qvf8b/ZENpA83uKYETM+"],[4,4294945874],25,26],[4,-26,[1,"90ilxym7BFy7r9pVYO/o1b"]]],[0,"c513mZANlPEJgSCuDUL0Gb",1,0],[1,0.5,0.5,1]],[105,"particlesystem",false,33554432,1,[[2,-28,[1,"ecjhmQaE5KgJLPujDRIwFj"],[5,0,0]],[264,1,0.2,200,2,0.5,0,360,10,5,50,100,0,20,-10,20,true,1,-29,[1,"53UsNYrZ5B7JD7crlpMURx"],[0,50,20],[4,4294950912],[4,4293752319],[4,4294901997],[4,4294967040],0],[4,-30,[1,"f7cQcSh/hBKbFLEHl7blzP"]]],[0,"faehfYnDdNO7dZ42RxbYNZ",1,0]],[57,"Petrifation_eye",33554432,1,[[2,-31,[1,"97o4kvXxZIAbZWTTWVo+hX"],[5,221,116]],[86,1,-32,[1,"69A+EcFtNG4peUL1zhdhOh"],1,2],[4,-33,[1,"79whn/LUBNvoOHJUcR8zk3"]]],[0,"69AvfpEe5PDrYF5gUM2epi",1,0],[1,0,0,1]],[29,"CircleLight01",false,33554432,1,[[2,-34,[1,"ed1QOvIvRJlIGMLLcCAG1i"],[5,108,108]],[24,1,-35,[1,"85OC+yKGxKNKiGC8kyFL9Z"],[4,4294926054],3,4],[4,-36,[1,"9dWLKaLmVPVYl3y9bLw+D5"]]],[0,"00pNWCKgFKy4c5I9FZOS3V",1,0],[1,0.3,0.3,0]],[29,"CircleLight02",false,33554432,1,[[2,-37,[1,"69bwB0EEhMzaa8Jx4vW2Vh"],[5,108,108]],[24,1,-38,[1,"14nJy6oD5PyoROts/AMoSD"],[4,4294926054],5,6],[4,-39,[1,"48T1tWaDxLP7eHS3dotlKc"]]],[0,"f0GjK/rcRDDpoCcBjlI9ap",1,0],[1,0.3,0.3,0]],[29,"CircleLight03",false,33554432,1,[[2,-40,[1,"ac+OYiUEZDwKiXki8TcA8O"],[5,108,108]],[24,1,-41,[1,"d5ragRctFCs5ONfOZ3RJuq"],[4,4294926054],7,8],[4,-42,[1,"56B/Ws2npNV6ZOG5va6gYK"]]],[0,"68LLe6anRD4IWeXMqB88vZ",1,0],[1,0.3,0.3,0]],[130,"Light_slide01",false,33554432,1,[[2,-43,[1,"fcxXBdYGlNGYbtDEQZHgZV"],[5,186,187]],[24,1,-44,[1,"9aSk/Moh5MBI+JAhTBiLKW"],[4,4292762879],9,10],[15,0,-45,[1,"c3FA+Ac3VAyYDOSbSescKr"]]],[0,"40q2H30CVLh4koviJuuRut",1,0],[1,1.7,-0.9,0],[1,0.5,0.5,0]],[130,"Light_slide02",false,33554432,1,[[2,-46,[1,"84rlL3aLdD3LRcmUetfDc/"],[5,186,187]],[24,1,-47,[1,"ecrbhH9YRAU4rNPM8xG9xy"],[4,4292762879],11,12],[15,0,-48,[1,"192E+Zr29BhJiRw9mcb+N3"]]],[0,"f8K/mN1XdH3ZIFAAkqRFgS",1,0],[1,1.7,-0.9,0],[1,0.5,0.5,0]],[29,"Light_effect_blur",false,33554432,1,[[2,-49,[1,"c3n7AZ72JAo6iS3dEpgxSj"],[5,186,187]],[24,1,-50,[1,"84XKnePbFAZb37IA9TVVPE"],[4,4294921215],13,14],[4,-51,[1,"bfPRlXyPVJZoupfWsJX0yB"]]],[0,"3ewCTL5qRM9rn+omt2Rjug",1,0],[1,1.756,1.054,0]],[57,"Img_LightDot_Blur",33554432,2,[[2,-52,[1,"89lo+YfD9Ozp6LIx8ghdxc"],[5,30,30]],[24,1,-53,[1,"49rPXB/NVDSad4wGll5q5V"],[4,4285530111],15,16],[4,-54,[1,"27jEl+S2VJqoo+9k/7JsvY"]]],[0,"205gzXcSBF57+TYbN0LOfK",1,0],[1,2,2,1]],[29,"CircleLight_In",false,33554432,1,[[2,-55,[1,"6eo1s+crRM151qO8RP455O"],[5,108,108]],[24,1,-56,[1,"e9f1WDrVBN3oKiWL+7PSzv"],[4,4294915527],19,20],[4,-57,[1,"66hujSq8NOEr8Behg+BBO0"]]],[0,"abSRXb88REzqgFLeZDdZNX",1,0],[1,2,2,1]],[57,"Super_Circle",33554432,3,[[2,-58,[1,"58Nkgbud5O64v3qy0wKB6d"],[5,111,111]],[24,1,-59,[1,"dbQLYsK25M06qG2S/Hnddw"],[4,4294465023],21,22],[4,-60,[1,"4e5FIjHLdOwr30Rc4o4PH7"]]],[0,"056J81xvJFu4wzPUKtEj8h",1,0],[1,0.4,0.4,1]],[57,"a_effect_01",33554432,4,[[2,-61,[1,"8ddFJaVxZB37d7Tzqqj2fO"],[5,30,30]],[24,1,-62,[1,"0aWE7ehjZHK5uqQ3KxNA3a"],[4,4294536191],23,24],[4,-63,[1,"a3pDdL2XVJNacA/rijO1Qd"]]],[0,"73ykpBFphB35H7hyy9FFKE",1,0],[1,2.6,2.6,2.6]]],0,[0,4,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,-6,10,0,-7,11,0,-8,12,0,-9,2,0,-10,14,0,-11,3,0,0,2,0,0,2,0,0,2,0,-1,13,0,0,3,0,0,3,0,-1,15,0,-2,4,0,0,4,0,0,4,0,0,4,0,-1,16,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,9,1,63],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,-1,7],[490,1,491,1,39,1,39,1,39,1,26,1,26,1,26,1,492,1,81,1,39,1,156,1,80,1,155,279,279]],[[{"name":"Img_LightRadial_Hard","rect":{"x":365,"y":2,"width":256,"height":256},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[7]],[[[125,"dcc/imported-specular-glossiness",[{"hash":2838361292,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]},{"name":"emissiveScaleMap","type":28,"count":1,"stageFlags":16,"binding":9,"defines":["USE_EMISSIVESCALE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":12,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nout mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_debug_view_mode;\n  mediump vec4 cc_debug_view_composite_pack_1;\n  mediump vec4 cc_debug_view_composite_pack_2;\n  mediump vec4 cc_debug_view_composite_pack_3;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    fragColorX = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * (In.tangent.w > 0.0 ? 1.0 : -1.0);\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_surfaceTransform;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float emissiveScale;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying mediump float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nvec3 RotationVecFromAxisY(vec3 v, float cosTheta, float sinTheta)\n{\n    vec3 result;\n    result.x = dot(v, vec3(cosTheta, 0.0, -sinTheta));\n    result.y = v.y;\n    result.z = dot(v, vec3(sinTheta, 0.0,  cosTheta));\n    return result;\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float NativePCFShadowFactorSoft5X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 twoTap = oneTap * 2.0;\n    vec2 offset1 = shadowNDCPos.xy + vec2(-twoTap.x, -twoTap.y);\n    vec2 offset2 = shadowNDCPos.xy + vec2(-oneTap.x, -twoTap.y);\n    vec2 offset3 = shadowNDCPos.xy + vec2(0.0, -twoTap.y);\n    vec2 offset4 = shadowNDCPos.xy + vec2(oneTap.x, -twoTap.y);\n    vec2 offset5 = shadowNDCPos.xy + vec2(twoTap.x, -twoTap.y);\n    vec2 offset6 = shadowNDCPos.xy + vec2(-twoTap.x, -oneTap.y);\n    vec2 offset7 = shadowNDCPos.xy + vec2(-oneTap.x, -oneTap.y);\n    vec2 offset8 = shadowNDCPos.xy + vec2(0.0, -oneTap.y);\n    vec2 offset9 = shadowNDCPos.xy + vec2(oneTap.x, -oneTap.y);\n    vec2 offset10 = shadowNDCPos.xy + vec2(twoTap.x, -oneTap.y);\n    vec2 offset11 = shadowNDCPos.xy + vec2(-twoTap.x, 0.0);\n    vec2 offset12 = shadowNDCPos.xy + vec2(-oneTap.x, 0.0);\n    vec2 offset13 = shadowNDCPos.xy + vec2(0.0, 0.0);\n    vec2 offset14 = shadowNDCPos.xy + vec2(oneTap.x, 0.0);\n    vec2 offset15 = shadowNDCPos.xy + vec2(twoTap.x, 0.0);\n    vec2 offset16 = shadowNDCPos.xy + vec2(-twoTap.x, oneTap.y);\n    vec2 offset17 = shadowNDCPos.xy + vec2(-oneTap.x, oneTap.y);\n    vec2 offset18 = shadowNDCPos.xy + vec2(0.0, oneTap.y);\n    vec2 offset19 = shadowNDCPos.xy + vec2(oneTap.x, oneTap.y);\n    vec2 offset20 = shadowNDCPos.xy + vec2(twoTap.x, oneTap.y);\n    vec2 offset21 = shadowNDCPos.xy + vec2(-twoTap.x, twoTap.y);\n    vec2 offset22 = shadowNDCPos.xy + vec2(-oneTap.x, twoTap.y);\n    vec2 offset23 = shadowNDCPos.xy + vec2(0.0, twoTap.y);\n    vec2 offset24 = shadowNDCPos.xy + vec2(oneTap.x, twoTap.y);\n    vec2 offset25 = shadowNDCPos.xy + vec2(twoTap.x, twoTap.y);\n    float block1, block2, block3, block4, block5, block6, block7, block8, block9, block10, block11, block12, block13, block14, block15, block16, block17, block18, block19, block20, block21, block22, block23, block24, block25;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset1), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset2), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset3), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset4), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset5), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset6), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset7), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset8), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block9 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset9), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block10 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset10), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block11 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset11), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block12 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset12), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block13 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset13), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block14 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset14), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block15 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset15), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block16 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset16), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block17 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset17), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block18 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset18), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block19 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset19), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block20 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset20), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block21 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset21), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block22 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset22), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block23 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset23), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block24 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset24), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block25 = step(shadowNDCPos.z, dot(texture2D(shadowMap, offset25), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, offset1).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, offset2).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, offset3).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, offset4).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, offset5).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, offset6).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, offset7).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, offset8).x);\n      block9 = step(shadowNDCPos.z, texture2D(shadowMap, offset9).x);\n      block10 = step(shadowNDCPos.z, texture2D(shadowMap, offset10).x);\n      block11 = step(shadowNDCPos.z, texture2D(shadowMap, offset11).x);\n      block12 = step(shadowNDCPos.z, texture2D(shadowMap, offset12).x);\n      block13 = step(shadowNDCPos.z, texture2D(shadowMap, offset13).x);\n      block14 = step(shadowNDCPos.z, texture2D(shadowMap, offset14).x);\n      block15 = step(shadowNDCPos.z, texture2D(shadowMap, offset15).x);\n      block16 = step(shadowNDCPos.z, texture2D(shadowMap, offset16).x);\n      block17 = step(shadowNDCPos.z, texture2D(shadowMap, offset17).x);\n      block18 = step(shadowNDCPos.z, texture2D(shadowMap, offset18).x);\n      block19 = step(shadowNDCPos.z, texture2D(shadowMap, offset19).x);\n      block20 = step(shadowNDCPos.z, texture2D(shadowMap, offset20).x);\n      block21 = step(shadowNDCPos.z, texture2D(shadowMap, offset21).x);\n      block22 = step(shadowNDCPos.z, texture2D(shadowMap, offset22).x);\n      block23 = step(shadowNDCPos.z, texture2D(shadowMap, offset23).x);\n      block24 = step(shadowNDCPos.z, texture2D(shadowMap, offset24).x);\n      block25 = step(shadowNDCPos.z, texture2D(shadowMap, offset25).x);\n    #endif\n    vec2 coef = fract(shadowNDCPos.xy * shadowMapResolution);\n    vec2 v1X1 = mix(vec2(block1, block6), vec2(block2, block7), coef.xx);\n    vec2 v1X2 = mix(vec2(block2, block7), vec2(block3, block8), coef.xx);\n    vec2 v1X3 = mix(vec2(block3, block8), vec2(block4, block9), coef.xx);\n    vec2 v1X4 = mix(vec2(block4, block9), vec2(block5, block10), coef.xx);\n    float v1 = mix(v1X1.x, v1X1.y, coef.y) + mix(v1X2.x, v1X2.y, coef.y) + mix(v1X3.x, v1X3.y, coef.y) + mix(v1X4.x, v1X4.y, coef.y);\n    vec2 v2X1 = mix(vec2(block6, block11), vec2(block7, block12), coef.xx);\n    vec2 v2X2 = mix(vec2(block7, block12), vec2(block8, block13), coef.xx);\n    vec2 v2X3 = mix(vec2(block8, block13), vec2(block9, block14), coef.xx);\n    vec2 v2X4 = mix(vec2(block9, block14), vec2(block10, block15), coef.xx);\n    float v2 = mix(v2X1.x, v2X1.y, coef.y) + mix(v2X2.x, v2X2.y, coef.y) + mix(v2X3.x, v2X3.y, coef.y) + mix(v2X4.x, v2X4.y, coef.y);\n    vec2 v3X1 = mix(vec2(block11, block16), vec2(block12, block17), coef.xx);\n    vec2 v3X2 = mix(vec2(block12, block17), vec2(block13, block18), coef.xx);\n    vec2 v3X3 = mix(vec2(block13, block18), vec2(block14, block19), coef.xx);\n    vec2 v3X4 = mix(vec2(block14, block19), vec2(block15, block20), coef.xx);\n    float v3 = mix(v3X1.x, v3X1.y, coef.y) + mix(v3X2.x, v3X2.y, coef.y) + mix(v3X3.x, v3X3.y, coef.y) + mix(v3X4.x, v3X4.y, coef.y);\n    vec2 v4X1 = mix(vec2(block16, block21), vec2(block17, block22), coef.xx);\n    vec2 v4X2 = mix(vec2(block17, block22), vec2(block18, block23), coef.xx);\n    vec2 v4X3 = mix(vec2(block18, block23), vec2(block19, block24), coef.xx);\n    vec2 v4X4 = mix(vec2(block19, block24), vec2(block20, block25), coef.xx);\n    float v4 = mix(v4X1.x, v4X1.y, coef.y) + mix(v4X2.x, v4X2.y, coef.y) + mix(v4X3.x, v4X3.y, coef.y) + mix(v4X4.x, v4X4.y, coef.y);\n    float fAvg = (v1 + v2 + v3 + v4) * 0.0625;\n    return fAvg;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft5X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft5X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 2.9) {\n      return CCGetSpotLightShadowFactorSoft5X(pos, worldPos);\n    }else if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float realtimeShadow = 1.0;\n    #if CC_DIR_SHADOW_PCF_TYPE == 3\n      realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 2\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 1\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    #endif\n    #if CC_DIR_SHADOW_PCF_TYPE == 0\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    #endif\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float realtimeShadow = 1.0;\n      #if CC_DIR_SHADOW_PCF_TYPE == 3\n        realtimeShadow = CCGetDirLightShadowFactorSoft5X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 2\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 1\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      #endif\n      #if CC_DIR_SHADOW_PCF_TYPE == 0\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      #endif\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 2\n          shadow = CCCSMFactorBase(position, N, s.shadowBias);\n        #endif\n      } else {\n        #if CC_DIR_LIGHT_SHADOW_TYPE == 1\n          shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n        #endif\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec3 lightmap = s.lightmap.rgb;\n    #if CC_USE_HDR\n        lightmap.rgb *= cc_exposure.w * cc_exposure.x;\n    #endif\n    vec3 finalColor = diffuse * lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    vec3 rotationDir = RotationVecFromAxisY(R.xyz, cc_surfaceTransform.z, cc_surfaceTransform.w);\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(rotationDir, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, rotationDir, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_EMISSIVESCALE_MAP\n  uniform sampler2D emissiveScaleMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_MAX || DCC_APP_NAME == DCC_APP_MAYA\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb * specularFactor;\n  float inFactor = 1.0;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, inFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n    #if DCC_APP_NAME == DCC_APP_MAYA\n      baseColor.a = 1.0 - baseColor.a;\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = 1.0;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  vec3 emissiveColor = emissive.rgb;\n  #if USE_EMISSIVE_MAP\n      emissiveColor.rgb = SRGBToLinear(texture2D(emissiveMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_EMISSIVESCALE_MAP\n      vec4 emissiveScaleColor = texture2D(emissiveScaleMap, TEXTURE_UV);\n      emissiveScaleColor.rgb = SRGBToLinear(emissiveScaleColor.rgb);\n      emissiveColor.rgb *= emissiveScaleColor.rgb;\n  #else\n      emissiveColor.rgb *= emissiveScale;\n  #endif\n  s.emissive = emissiveColor.rgb;\n  #if CC_USE_LIGHTMAP && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW  && CC_SHADOW_TYPE == 2\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW && CC_SHADOW_TYPE == 2\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCFragOutput(CCStandardShadingBase(s, v_shadowPos));\n    #if CC_USE_FOG != 4\n      CC_APPLY_FOG(color, s.position.xyz);\n    #endif\n    gl_FragData[0] = color;\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":142,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_DIR_SHADOW_PCF_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_DIR_LIGHT_SHADOW_TYPE","type":"number","range":[0,3]},{"name":"CC_USE_HDR","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_EMISSIVESCALE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2373376484,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScale","type":13,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_vertexId","format":11,"location":12,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":13,"defines":[]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4  tilingOffset;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float emissiveScale;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  layout(std140) uniform CCCSM {\n    highp vec4 cc_csmViewDir0[4];\n    highp vec4 cc_csmViewDir1[4];\n    highp vec4 cc_csmViewDir2[4];\n    highp vec4 cc_csmAtlas[4];\n    highp mat4 cc_matCSMViewProj[4];\n    highp vec4 cc_csmProjDepthInfo[4];\n    highp vec4 cc_csmProjInfo[4];\n    highp vec4 cc_csmSplitsInfo;\n  };\n#endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n    mediump vec4 cc_debug_view_mode;\n    mediump vec4 cc_debug_view_composite_pack_1;\n    mediump vec4 cc_debug_view_composite_pack_2;\n    mediump vec4 cc_debug_view_composite_pack_3;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_surfaceTransform;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_LIGHTMAP_DISABLED 0\n#define CC_LIGHTMAP_ALL_IN_ONE 1\n#define CC_LIGHTMAP_CC_LIGHTMAP_INDIRECT_OCCLUSION 2\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#define DCC_APP_OTHERS 0\n#define DCC_APP_MAX 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#define DCC_APP_MAYA 5\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).TRANSPARENCY_MAP_CHANNEL;\n      #if DCC_APP_NAME == DCC_APP_MAYA\n        alpha = 1.0 - alpha;\n      #endif\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocal","defines":["!USE_INSTANCING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":57,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":114}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,5]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"TRANSPARENCY_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"emissiveScale":{"type":13,"value":[1]},"emissiveScaleMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[18,".bin",2206579180,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":14448,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14448,"count":258,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]]},"minPosition",8,[1,-31.940139770507812,-3.93682599067688,-0.027217745780944824],"maxPosition",8,[1,9.629841804504395,3.499999761581421,4.479310035705566]]],-1],0,0,[],[],[]],[[[65,"Skin-0",3882453104,["Dummy_Root/Dummy_floor01","Dummy_Root/Dummy_floor02","Dummy_Root/Dummy_Circle02","Dummy_Root/Dummy_Circle03","Dummy_Root/Dummy_Circle","Dummy_Root/Dummy_Point01","Dummy_Root/Dummy_Point02","Dummy_Root/Dummy_Point03","Dummy_Root/Dummy_Point04","Dummy_Root/Dummy_Point05","Dummy_Root/Dummy_Point06","Dummy_Root/Dummy_Point07","Dummy_Root/Dummy_Point08","Dummy_Root/Dummy_Point09","Dummy_Root/Dummy_Point10","Dummy_Root/Dummy_Smoke01","Dummy_Root/Dummy_Smoke02","Dummy_Root/Dummy_Smoke03","Dummy_Root/Dummy_Smoke04","Dummy_Root/Dummy_Smoke05"],[[[7,1,0,0,0,0,1,0,0,0,0,1,0,0,2.9279194624365346e-9,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,2.9279194624365346e-9,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,2.9279194624365346e-9,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,2.9279194624365346e-9,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,0,2.9279194624365346e-9,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-3.4200496673583984,1.0723604759732552e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-4.096024513244629,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-4.771999359130859,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-5.44797420501709,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-6.12394905090332,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-6.799923896789551,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-7.475898742675781,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-8.151873588562012,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-8.827848434448242,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,-9.503823280334473,1.0544962947278691e-7,-2.3185341358184814,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,7.1484551429748535,1.413394570350647,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,12.715518951416016,1.413394570350647,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,18.282583236694336,1.413394570350647,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,23.849647521972656,1.413394570350647,0.026889078319072723,1],[7,1,0,0,0,0,1,0,0,0,0,1,0,29.416711807250977,1.413394570350647,0.026889078319072723,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["a4p7jiTvJEhI0JwTlStgGL"]}],[1],0,[],[],[]],[[[124,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294902015]]],11]]],0,0,[0],[8],[24]],[[[19],[47,"Pertrifation_Magic",[-3,-4],[[63,-2,[1,"b51lHLivJUcJn6hfVbiyG8"],[3],4]],[0,"bd+5pWP4Fay4+muuc2bzse",-1,0]],[205,"Dummy_Root",1,[[10,"Dummy_Point08",-5,[0,"02E0g2VehVg4UX/A2+6dcQ",1,0],[1,0.20117998123168945,0.6602775454521179,-2.2697525024414062]],[79,"Dummy_floor01",-6,[0,"10eDUQm9BfGLQueT3ibfGO",1,0],[1,0.009999999776482582,0.009999999776482582,0.009999999776482582]],[79,"Dummy_floor02",-7,[0,"7fY8pG0MFYT56nEXo1bIDn",1,0],[1,0.5516632795333862,0.5516632795333862,0.5516632795333862]],[79,"Dummy_Circle",-8,[0,"beDfTxd+tcELE9yfCkKm0A",1,0],[1,1,1,0.2977459132671356]],[79,"Dummy_Circle02",-9,[0,"35jRWorzFdw5qBluRq5n5w",1,0],[1,1,1,0.28946611285209656]],[55,"Dummy_Circle03",-10,[0,"5ecrN2I+RZRadHhXvhAgu9",1,0]],[53,"Dummy_Point01",-11,[0,"9eVvR82ihd9bWwodOoX3US",1,0],[1,0.7864680290222168,-0.8531680107116699,-1.187727689743042],[1,0.4755224585533142,0.4755224585533142,0.4755224585533142]],[10,"Dummy_Point02",-12,[0,"efuC5NsPparaWRTIdsFTxO",1,0],[1,-1.108907699584961,-0.7674927115440369,-1.491006851196289]],[10,"Dummy_Point03",-13,[0,"0aiPyn9dlXzKFUwn2pAoMk",1,0],[1,1.2173337936401367,-2.0456507205963135,-1.9255261421203613]],[53,"Dummy_Point04",-14,[0,"29VcYDExZdzLSYJRv+GOw7",1,0],[1,-1.7891664505004883,-0.6040046215057373,-1.3890291452407837],[1,1,1,0.6123722195625305]],[10,"Dummy_Point05",-15,[0,"298j1GSH5Ut72lx7UOE6nH",1,0],[1,1.2290339469909668,0.34297364950180054,-2.0524373054504395]],[10,"Dummy_Point06",-16,[0,"a5naF/r6xbf6k0NlGcQzde",1,0],[1,0.450685977935791,-0.4535011351108551,-2.364563465118408]],[10,"Dummy_Point07",-17,[0,"8a6iP/Rq9T6o4/fP5MZOak",1,0],[1,-0.6587028503417969,0.8387623429298401,-2.080812931060791]],[10,"Dummy_Point09",-18,[0,"15wInPp0ZZupyUdOnzCFNN",1,0],[1,-0.22737884521484375,-1.4907286167144775,-1.9085965156555176]],[10,"Dummy_Point10",-19,[0,"0dAIunCVBaD5NzFCZZoiny",1,0],[1,0.12270355224609375,1.3433730602264404,-1.9426894187927246]],[10,"Dummy_Smoke01",-20,[0,"656kmjHUJX86siFePiPY7V",1,0],[1,-0.31920480728149414,-0.07571756839752197,0]],[10,"Dummy_Smoke02",-21,[0,"c5dB/FstZYJIr5y7NqtVH1",1,0],[1,0.3638153076171875,0.7897380590438843,0]],[53,"Dummy_Smoke03",-22,[0,"76z1xaZ29bsI91+Y6mtb98",1,0],[1,0.22771072387695312,0.3502238988876343,0],[1,0.6828734874725342,0.6828734874725342,0.6828734874725342]],[53,"Dummy_Smoke04",-23,[0,"8awwbYmxdfYo8DvxCYZVmI",1,0],[1,-0.6131057739257812,1.192104697227478,0],[1,0.7139825820922852,0.7139825820922852,1]],[53,"Dummy_Smoke05",-24,[0,"87RO5lHb9Tk7NAqMwxKy8L",1,0],[1,-0.07251453399658203,0.17154979705810547,0],[1,0.8058562278747559,0.8058562278747559,1]]],[0,"4eUvdchYVf1bsmYKzmnCuT",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[60,"Pertrifation",1,[[64,-25,[1,"88/RYvMuZZE7fRSggMahw2"],[0],[7],1,1,2]],[0,"91GeIvjehdyrHDLFm6qGe9",1,0],[1,0,0.026889078319072723,-2.9279194624365346e-9],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,4,1,0,0,1,0,-1,3,0,-2,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,0,3,0,9,1,25],[0,0,0,0,0],[-1,6,13,-1,7],[493,152,153,49,49]],[[[33,"Monster_1"],[94,"Monster_1",[-12],[[[2,-2,[1,"1dLmPDxAFEqI4dwgZiixLU"],[5,0,0]],[149,true,45,3,[8],-7,[1,"dfu9wfwrxKU5pBM1do28TW"],[-6],[-5],[-4],-3],-8,[66,8,4,-9,[1,"1cJN5Q4FFNmJ0eLPujQOaf"]],[70,true,-11,[1,"17VgmCX91AgJ0a+1oWtbb+"],[-10]]],4,4,1,4,4],[0,"8aaK6h9gBBmIvJm6DiSdKE",-1,0]],[134,"RootNode",[-14,-15,-16],[-13],[0,"f4VA/k/NNIlrjRLm1rtFoG",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,0.85,0.85,0.85],[1,90,0,0]],[81,"Bip001 Head",[[6,"Bip001 Ponytail2",-17,[0,"56lTOMbYFKhJIEPsRMpFVT",1,0],[1,0.7309236526489258,-0.20838302373886108,-0.8963431119918823],[3,0.6679535496049743,-0.09525776637217243,-0.5855556119796552,0.4493201962910538],[1,139.78949789530517,66.97263675074133,-40.802940363668796]],[6,"Bip001 Ponytail1",-18,[0,"0cqRVHfjFAH7LTPtSsE3G4",1,0],[1,0.7309243679046631,-0.20838811993598938,0.896341860294342],[3,0.6679534810912875,-0.09526105825821561,0.5855550677278262,-0.44932030950739044],[1,-139.78963832468108,-66.97252319735894,-40.803245258708685]],[12,"Bone001",-19,[0,"24iyfmnJVJPLst1NqXpArQ",1,0],[1,0.23102712631225586,-0.012794464826583862,-0.0028872638940811157],[3,0.43989485404303036,0.5536178338122633,0.5536182510447758,0.43989390036871606],[1,1.8299593925476074,3.9113073348999023,1.0000003576278687],[1,-90.00032987398343,-179.99963918946202,76.93997301150233]],[12,"Bone002(mirrored)",-20,[0,"62AADFTqJKmJNhcEpRIVUv",1,0],[1,0.3994934558868408,0.3463112413883209,0.8539997935295105],[3,0.12832695290901933,0.6939007068257342,0.6888785982532211,0.1657717680804249],[1,1.0000001192092896,2.5227441787719727,2.5227441787719727],[1,-88.87384116627811,176.6584709675091,23.984254347028244]],[12,"Bone002",-21,[0,"dd/cThhE1BBJxhEN3EAMxW",1,0],[1,0.3994925022125244,0.3463137447834015,-0.854405403137207],[3,0.16577254484621295,0.6888772948690436,0.6939019664990452,0.1283261348201419],[1,1.0000001192092896,2.5227441787719727,2.52274489402771],[1,-91.12641034454995,-176.65828548299848,23.984243436499742]]],[0,"281GIygQtM/aA0Xhg7b0F9",1,0],[1,0.11547505855560303,-2.384185791015625e-7,1.4901161193847656e-8],[3,0.21855604612286272,-0.14265291369107463,-0.39686334067226187,0.8799902782127995],[1,24.724315039472742,-6.867027025990421,-49.53716549290688]],[77,"RootNode",1,[-23,-24,-25],[[40,-22,[1,"9dzKFAsvBHaqy5sOvj2GdZ"],[21,22,23,24],25]],[0,"c9a4PyP4xJBqrgSzom3ecb",1,0]],[43,"Bip001 R Hand",[[-26,-27,[12,"Bip001 Xtra03",-28,[0,"9b0IPJo+FHeKMMbU6zrlKN",1,0],[1,0.5625670552253723,0.0499730110168457,-0.14904722571372986],[3,2.769653615433874e-17,1.809382091943093e-18,0.06518985266978557,0.9978728792330673],[1,-1,-0.9999999403953552,-0.9999999403953552],[1,3.1805546799054723e-15,2.3849277809574134e-23,7.47550803827268]],[6,"Arrow",-29,[0,"a2QMjDmZ1ORLZQuvQfv0Ch",1,0],[1,0.5625670552253723,0.049973249435424805,-0.14904718101024628],[3,0.4420144916144607,0.5396862103493203,0.554774947565669,-0.4534167411059147],[1,-90.36132314565269,-101.42820230445534,-1.4892990904038912]]],1,1,4,4],[0,"f2LYgUXFJCHbDP6CqlOjz7",1,0],[1,0.6166061162948608,5.960464477539063e-8,-2.384185791015625e-7],[3,0.6427267960766593,0.038269859825068836,0.23171133419173243,0.7292102173180854],[1,85.86874285757823,-15.219012522450516,22.77583036531013]],[76,"Bip001 Pelvis",[-30,-31,-32],[0,"60yzCSJz5NLpNPce+7pYdW",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[20,"Bip001 Neck",[-33,-34,3],[0,"32g7UZs/JMNrZUM5X0WaTO",1,0],[1,0.6768171787261963,0.15322065353393555,2.086162567138672e-7],[3,4.055758844002599e-9,-6.085637671091869e-7,0.21922260545111746,0.975674868621127],[1,0.000017415107088059545,-0.00007538787597744712,25.326753973748463]],[20,"Bip001 L Hand",[-35,-36,-37],[0,"11as3acddFp4XXWT+fwC1m",1,0],[1,0.6166059970855713,1.1920928955078125e-7,-4.440892098500626e-16],[3,-0.7990774265971298,-0.03123658054146155,-0.03345202924011602,0.5994835311154961],[1,-106.21849016139093,-5.216394200449093,0.5622531709952947]],[72,"RootNode",[-39],[[40,-38,[1,"a6fWqk73JOYZK1Ck1/v0ZA"],[15,16,17],18]],[0,"a3nVra+pRFtIaCWQpz/QMF",1,0],[1,20,20,20]],[100,"Board",9,[2],[[74,1,0,-40,[1,"0cCuiskZ1LlaHSvmTemF09"],[13],[7],14]],[0,"a0su2CFCRCmJZKMm6sW+Sh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[62,"Bip001",2,[[6,[6,"Bip001 Prop2",-41,[0,"9ckhZFhu1MTbm//lbqecBe",1,0],[1,1.0301166772842407,1.111129641532898,0.49495887756347656],[3,-0.2621321666150639,0.10140532208708476,-0.4220818559857,0.8618878086652425],[1,-35.88350780585138,-4.266098462190038,-51.32815955609408]]],1,4],[0,"82Iu+rVT5LBJ0LEQ4l2rG7",1,0],[1,0.21241571009159088,1.6857624053955078,-0.08181066066026688],[3,0.3868835620531944,0.5824645240072677,0.5954899272054546,-0.39553499754492205],[1,-90.49137861532786,-112.81935128696949,-1.1679014525824076]],[48,"Odds",4,[-42,-43],[0,"8d4GsIhIlAWrE+ZvZl4/NS",1,0]],[108,"OddsNum",12,[[[2,-44,[1,"beJ1C1UwZCj6qesWfHhS+t"],[5,33.26,32]],-45],4,1],[0,"4bIwSQVu5AS4I22dSZzJlt",1,0],[1,1.5,0,47]],[78,"FloorNode",4,[-46],[0,"7c80YY5chCnriEJeTgwykj",1,0],[1,20,20,20]],[44,"Island",14,[[113,1,-47,[1,"49p0jiI7FAvLutCKyT7f4x"],[0],[7],1]],[0,"d8nbfQVKtInq683JH1tcoq",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[48,"MonsterNode",4,[9],[0,"74MTyvR+hFjZ2kgzfuoQqs",1,0]],[10,"AimNode",2,[0,"9a/ypI+8JP14JHdzmnAj41",1,0],[1,0,2.6,0]],[133,"monster_SP_003",2,[-48],[0,"49iTr8tIJOt7sBzGjZH+qA",1,0],[1,0,0,0.27233123779296875],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[95,1,0,18,[1,"e5cIxSttRMpbzv+HDt7qPf"],[2],[7],2],[3,"Bip001 Spine",6,[-49],[0,"62SkBRkpVKmpNwcYk1JL1U",1,0],[1,0.5362532138824463,-0.000027492642402648926,0.00003293156623840332],[3,-0.0626470216124493,0.0008323212876850389,0.10528544964901893,0.9924664387356216],[1,-7.315574854034366,0.8697009440166139,12.056741026881431]],[3,"Bip001 Spine1",20,[7],[0,"ebaY+XfkNLC5ToHS8FFI2V",1,0],[1,0.3254878520965576,-0.00042563676834106445,-2.2351741790771484e-8],[3,4.052505797313992e-9,-4.570422801866873e-7,0.1615790242191507,0.9868597767323268],[1,0.000009412150089117354,-0.00005461160209925486,18.59712064516628]],[3,"Bip001 L Clavicle",7,[-50],[0,"73GfxCt/lPD73q1BGRP8r7",1,0],[1,-0.23194658756256104,-0.05289769172668457,0.3379833400249481],[3,0.6922066060569303,0.05921824892212726,0.6295043688662004,0.34794750049987333],[1,151.53137764187986,-76.42817007119379,31.335704040167588]],[3,"Bip001 L UpperArm",22,[-51],[0,"58n90CsmNMVKzozzgvGaNC",1,0],[1,0.30420202016830444,2.220446049250313e-16,0],[3,-0.03516248692485733,0.10148895759591135,-0.057785221740658754,0.9925343616962273],[1,-3.3541054581784464,11.471509497992189,-6.998585784973345]],[3,"Bip001 L Forearm",23,[8],[0,"d6HUhiRCdFS40y4tiXxM/x",1,0],[1,0.8095186948776245,-2.220446049250313e-16,0],[3,-3.76084897451355e-18,-5.549216491478636e-17,-0.12972134149043774,0.99155048966854],[1,-1.295820715970739e-15,-6.582649457529001e-15,-14.906980019114167]],[5,"Bip001 L Finger0",8,[[6,"Bip001 L Finger01",-52,[0,"b0aowYqz1OwYs1ATEQBBm+",1,0],[1,0.2010941505432129,-2.384185791015625e-7,0],[3,-3.1086664759593104e-17,-2.396586232030648e-17,-0.128277062255567,0.9917383703876146],[1,-4.017335208491269e-15,-3.288788235607612e-15,-14.74008332214748]]],[0,"4cKgPAWrxPyLS7GHZfaj5+",1,0],[1,0.18366515636444092,0.08750510215759277,-0.2487459033727646],[3,0.18730141087813754,0.29772969866318366,0.19575264909195036,0.9153994256009083],[1,14.85797181377037,32.30571250819388,28.02872139485945]],[5,"Bip001 L Finger1",8,[[6,"Bip001 L Finger11",-53,[0,"8dMWGZCxZPDJToLvoWdFBM",1,0],[1,0.25066137313842773,-2.384185791015625e-7,-1.1920928955078125e-7],[3,0.11442987224098876,0.0722619046549411,0.6772431496421911,0.7232051837046496],[1,50.12814321526683,-34.94164360750437,84.94420564984019]]],[0,"78F5IzlRNJCK1Z2MTXFlV5",1,0],[1,0.6013392210006714,-0.13587689399719238,0.0038456320762634277],[3,0.06863654504987901,-0.007909200269603909,0.497245736222112,0.8648544080038219],[1,14.315166481366587,-9.209641794564254,59.205003970099604]],[166,"Bip001 Xtra02",8,[[6,"Bip001 Xtra01",-54,[0,"01QqPtKW1By7QB9FRy7qH0",1,0],[1,-0.9686437249183655,0.001702427864074707,-0.04353618621826172],[3,0.49959906326780007,-0.5004020272301052,0.4999959705925219,0.5000026165103334],[1,89.9536127161176,-90.0456257186297,-0.00012496445388052133]]],[0,"bbejwxONBINrLEQcZw/Y+9",1,0],[1,0.48668181896209717,0.023917198181152344,-0.0013571381568908691],[3,-0.009432721897708676,0.7073243867415635,0.7067633282194213,0.00942515583310075],[1,-1,-1,-1.0000001192092896],[1,-89.95455050294514,178.47193012587815,-0.0012192227913642968]],[3,"Bip001 R Clavicle",7,[-55],[0,"44GW+aZAZNf5+cgm+qyQ/R",1,0],[1,-0.23194658756256104,-0.05289602279663086,-0.3379831612110138],[3,-0.5802943092335913,0.18333232345523134,0.7818198775660636,0.13566669779352952],[1,-153.63301195667708,106.84036643697453,-0.03664442824743834]],[3,"Bip001 R UpperArm",28,[-56],[0,"17g+/N35hKKqhW8jRf5+of",1,0],[1,0.30420199036598206,1.1920928955078125e-7,2.384185791015625e-7],[3,0.327832041816628,-0.3910554333267635,0.20974182995934504,0.8340324725028775],[1,45.56227423792257,-52.49483242936449,5.362804558798637]],[3,"Bip001 R Forearm",29,[5],[0,"70I5RHmAJMoqjS7oEUMacG",1,0],[1,0.8095186948776245,-5.960464477539063e-8,4.76837158203125e-7],[3,-1.3001013711053673e-17,6.0686364324403e-17,-0.24992689739106624,0.9682647086207754],[1,3.37687128716487e-16,7.269233437164174e-15,-28.946372787758218]],[5,"Bip001 R Finger0",5,[[6,"Bip001 R Finger01",-57,[0,"a0PN9gyhhJgY+93XHTQONR",1,0],[1,0.2010939121246338,0,7.450580596923828e-8],[3,-2.7417235588812424e-9,-2.2202492645387136e-8,-0.1637667592815935,0.9864990869506185],[1,-7.677779813548689e-7,-0.0000027064949108156315,-18.851201008803898]]],[0,"f2MjwUzgZF/pIpgiU97o0Y",1,0],[1,0.18366503715515137,0.08750486373901367,0.24874591827392578],[3,-0.15196199379330574,-0.1546453948417958,0.20306108443237844,0.9548604873413367],[1,-14.626540411556743,-15.035550850560178,25.771961092294386]],[5,"Bip001 R Finger1",5,[[6,"Bip001 R Finger11",-58,[0,"71aUV1fVhPa4dplIsoXjFA",1,0],[1,0.25066089630126953,-1.7881393432617188e-7,-8.940696716308594e-8],[3,-0.18979510588450263,-0.0917580049512305,0.6663175794450954,0.7152476281904676],[1,-74.99507747308931,51.957606887078136,81.11286431785388]]],[0,"15k4tUCXNOs7evpsKp0sVe",1,0],[1,0.6013389825820923,-0.13587737083435059,-0.0038456320762634277],[3,-0.13725067481393444,-0.02388796921630775,0.5636696735932483,0.8141671304229381],[1,-31.01961135428213,17.678679012914063,67.5780414835638]],[3,"Bip001 L Thigh",6,[-59],[0,"d2KoMyZExGxqE3CD+7OD6r",1,0],[1,-4.76837158203125e-7,6.109476089477539e-7,0.39173296093940735],[3,0.30937396698431907,0.9320705297556373,0.16010970962870055,-0.09948445605241163],[1,-25.42641235548575,-160.1651607743909,33.015087465802466]],[3,"Bip001 L Calf",33,[-60],[0,"7boob/PEFCB5xrlF2giaGd",1,0],[1,0.8068879842758179,0,-1.1102230246251565e-16],[3,4.889408066761731e-18,1.1587415157292893e-17,-0.38876579228205926,0.9213366153319333],[1,1.4797032328896018e-15,2.0655620714136336e-15,-45.7554503377869]],[5,"Bip001 L Foot",34,[[6,"Bip001 L Toe0",-61,[0,"11xA79iZNGa5uRWvbw9isD",1,0],[1,0.3933432996273041,0.5062161684036255,1.1102230246251565e-16],[3,-4.248147327481467e-7,3.746581475640428e-7,0.7071076454532336,0.7071059169185784],[1,0,-0.0000688442584882134,90]]],[0,"d1d89x3pdK1rc8vxSMCDFi",1,0],[1,0.6499096155166626,-5.960464477539063e-8,0],[3,-0.003532187979292712,-0.04334159153822223,0.08134179484255306,0.9957371854574906],[1,0.000969919811449351,-4.984775593493526,9.340205789403797]],[3,"Bip001 R Thigh",6,[-62],[0,"6d5dNhhkxIoab6YVeiQ2zM",1,0],[1,5.960464477539062e-7,-4.6193599700927734e-7,-0.39173293113708496],[3,0.16421231782199572,0.8232233005847396,-0.5114095259218553,0.18384234780452113],[1,64.88540480365165,151.81959725881825,4.722469862636056]],[3,"Bip001 R Calf",36,[-63],[0,"3dPKiZtmdChI1adhorKzAG",1,0],[1,0.8068878650665283,0,-5.551115123125783e-17],[3,6.0393474178547e-18,1.249476999408854e-17,-0.4351808444897823,0.9003430638313152],[1,2.0059705801552415e-15,2.5598632754296132e-15,-51.59360370145537]],[5,"Bip001 R Foot",37,[[6,"Bip001 R Toe0",-64,[0,"fbirFNyVNK77YE8RuDimxC",1,0],[1,0.3933432698249817,0.5062160491943359,2.9802322387695312e-8],[3,9.954481498485821e-8,-3.166553935521659e-7,0.7071067215818603,0.7071068407911518],[1,0,0.00001613192644172858,90]]],[0,"1f/aOiZ6dA9oyj7ypne/9u",1,0],[1,0.6499095559120178,4.470348358154297e-8,5.551115123125783e-17],[3,-0.0369472358302712,0.07241062891535255,0.20946258513555946,0.9744316435814847],[1,-6.419948336187248,9.851497017899225,23.757293207621018]],[126,true,2,[1,"ac2O0I9Y1GJKRaqyfcXw5D"],[3,4,5,6,7,8,9,10,11,12]],[9,"Board",12,[[83,"Quad<ModelComponent>",0,-65,[1,"142iVbqA5BdosytAKiKq8x"],[19],[7],20]],[0,"dc7KbQilBASL9s5eFfBMIw",1,0],[1,0,-3.4,45],[1,65,28,1]],[111,"X2",26,26,32,false,false,13,[1,"d6J+uMQyJFYKuudlWgOy7Q"]],[96,true,1,[1,"c14uwfnD5Nboe6RPF1RQtA"],[1,0,20,0],[1,70,160,70]]],0,[0,4,1,0,0,1,0,20,41,0,-1,42,0,-1,17,0,-1,39,0,0,1,0,-3,42,0,0,1,0,-1,19,0,0,1,0,-1,4,0,-1,39,0,-1,17,0,-2,18,0,-3,11,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,0,4,0,-1,14,0,-2,16,0,-3,12,0,-1,31,0,-2,32,0,1,5,0,1,5,0,-1,20,0,-2,33,0,-3,36,0,-1,22,0,-2,28,0,-1,25,0,-2,26,0,-3,27,0,0,9,0,-1,10,0,0,10,0,1,11,0,-1,40,0,-2,13,0,0,13,0,-2,41,0,-1,15,0,0,15,0,-1,19,0,-1,21,0,-1,23,0,-1,24,0,1,25,0,1,26,0,1,27,0,-1,29,0,-1,30,0,1,31,0,1,32,0,-1,34,0,-1,35,0,1,35,0,-1,37,0,-1,38,0,1,38,0,0,40,0,9,1,2,1,10,3,1,7,5,1,30,6,1,11,7,1,21,8,1,24,9,1,16,65],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,19,39,41,41,42],[-1,6,-1,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,6,-1,-2,-3,7,-1,6,-1,-2,-3,-4,7,6,13,7,3,15,16],[19,65,494,48,138,139,140,141,142,143,144,145,146,19,67,20,30,31,20,68,17,21,32,33,34,21,136,137,48,8,35,22]],[[[114,"number_8",32,{"commonHeight":32,"fontSize":32,"atlasName":"number_8_0.png","fontDefDictionary":{"33":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":459,"y":0,"width":45,"height":122}},"34":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":325,"y":0,"width":66,"height":122}},"35":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":392,"y":0,"width":66,"height":122}},"36":{"xOffset":0,"yOffset":0,"xAdvance":64,"rect":{"x":297,"y":369,"width":64,"height":118}},"37":{"xOffset":0,"yOffset":0,"xAdvance":102,"rect":{"x":0,"y":0,"width":102,"height":122}},"38":{"xOffset":0,"yOffset":0,"xAdvance":74,"rect":{"x":181,"y":0,"width":74,"height":122}},"39":{"xOffset":0,"yOffset":6,"xAdvance":5,"rect":{"x":362,"y":369,"width":5,"height":7}},"40":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":469,"y":123,"width":45,"height":122}},"41":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":469,"y":246,"width":45,"height":122}},"43":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":0,"y":123,"width":66,"height":122}},"44":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":67,"y":369,"width":45,"height":122}},"45":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":113,"y":369,"width":45,"height":122}},"46":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":159,"y":369,"width":45,"height":122}},"47":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":67,"y":123,"width":66,"height":122}},"48":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":134,"y":123,"width":66,"height":122}},"49":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":201,"y":123,"width":66,"height":122}},"50":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":268,"y":123,"width":66,"height":122}},"51":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":335,"y":123,"width":66,"height":122}},"52":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":402,"y":123,"width":66,"height":122}},"53":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":0,"y":246,"width":66,"height":122}},"54":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":67,"y":246,"width":66,"height":122}},"55":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":134,"y":246,"width":66,"height":122}},"56":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":201,"y":246,"width":66,"height":122}},"57":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":268,"y":246,"width":66,"height":122}},"58":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":205,"y":369,"width":45,"height":122}},"59":{"xOffset":0,"yOffset":0,"xAdvance":45,"rect":{"x":251,"y":369,"width":45,"height":122}},"61":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":335,"y":246,"width":66,"height":122}},"88":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":402,"y":246,"width":66,"height":122}},"95":{"xOffset":0,"yOffset":0,"xAdvance":77,"rect":{"x":103,"y":0,"width":77,"height":122}},"120":{"xOffset":0,"yOffset":0,"xAdvance":66,"rect":{"x":0,"y":369,"width":66,"height":122}},"126":{"xOffset":0,"yOffset":0,"xAdvance":68,"rect":{"x":256,"y":0,"width":68,"height":122}}},"kerningDict":{}}]],0,0,[0],[19],[495]],[[{"name":"card_04","rect":{"x":96,"y":932,"width":90,"height":90},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[5],[3]],[[[23,"Material #0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"albedoScale":1,"specularFactor":0,"shininessExponent":2,"emissiveScale":0},"mainColor",8,[4,4291480266],"specularColor",8,[4,4294177779],"emissive",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[10,8],[496,4]],[[{"fmt":"1","w":0,"h":0},-1],[3],0,[],[],[]],[[[65,"Skin-0",3988250067,["Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf","Bip001/Bip001 Pelvis/Bip001 L Thigh","Bip001/Bip001 Pelvis","Bip001/Bip001 Pelvis/Bip001 L Thigh/Bip001 L Calf/Bip001 L Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1","Bip001/Bip001 Pelvis/Bip001 Spine","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger0/Bip001 L Finger01/Bip001 L Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger1/Bip001 L Finger11/Bip001 L Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2/Bip001 L Finger21/Bip001 L Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm/Bip001 L Hand/Bip001 L Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 L Clavicle/Bip001 L UpperArm/Bip001 L Forearm","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf","Bip001/Bip001 Pelvis/Bip001 R Thigh","Bip001/Bip001 Pelvis/Bip001 R Thigh/Bip001 R Calf/Bip001 R Foot","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger0/Bip001 R Finger01/Bip001 R Finger02","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger1/Bip001 R Finger11/Bip001 R Finger12","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2/Bip001 R Finger21/Bip001 R Finger22","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bip001 R Finger2","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002_L/Bone003_L","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002_L","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 Head/Bone002/Bone003","Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Bone001"],[[[7,1.1655831855250653e-7,0.0000013746938520853291,-1,0,-0.9985249638557434,-0.054294683039188385,-1.9102496651157708e-7,0,-0.05429467931389809,0.9985250234603882,0.000001366337642139115,0,0.0005720365443266928,0.000157751448568888,0.0004971836460754275,1],[7,2.2202652871783357e-7,0.0000013616433989227517,-1,0,-0.9997417330741882,0.022725660353899002,-1.9102495230072236e-7,0,0.022725660353899002,0.999741792678833,0.0000013663374147654395,0,0.0011411462910473347,0.00011325218656565994,0.0004971836460754275,1],[7,0.0000013868000223737909,0.0000027577070795814507,1,0,1,4.370756556681954e-8,-0.0000013868002497474663,0,-4.371138828673793e-8,1,-0.0000027577070795814507,0,-0.0011382779339328408,0.0001391562254866585,1.1902625551840629e-9,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,4.371145223558415e-8,-4.371133144331907e-8,0,4.371138828673793e-8,1,0.000001370906943520822,0,0.00017384449893143028,0.00014853170432616025,0.0004971836460754275,1],[7,0.0000013430886838250444,-0.000001402693328600435,1,0,1,4.371327477770137e-8,-0.0000013430886838250444,0,-4.371138828673793e-8,1,0.0000014026934422872728,0,-0.0027075340040028095,0.00013915609451942146,3.827102634801349e-9,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-0.002641996368765831,0.0001413121062796563,1.9662385608576471e-10,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-0.0020674346014857292,0.00014120611012913287,1.9632988290663178e-10,1],[7,1.0916177961561857e-9,-0.0000014026936696609482,1,0,0.9999996423721313,-0.0007962742238305509,-2.2085464568277757e-9,0,0.0007962742238305509,0.9999997019767761,0.0000014026923054188956,0,-0.0014776475727558136,0.00014080249820835888,1.9521041727532662e-10,1],[7,0.7121366858482361,-0.026373090222477913,0.7015453577041626,0,-0.6942238807678223,0.12225385010242462,0.7093005180358887,0,-0.1044730693101883,-0.9921483993530273,0.06875262409448624,0,0.0011542842257767916,-0.000382125232135877,-0.002327027963474393,1],[7,0.9967145323753357,-0.0000013744473790211487,0.08099529892206192,0,-0.08099530637264252,-4.3567780494413455e-8,0.9967144727706909,0,-0.0000013664028983839671,-1,-1.5474840608931117e-7,0,-0.00012795563088729978,-0.00009854287054622546,-0.002555231796577573,1],[7,0.07877091318368912,0.6905190944671631,0.7190123796463013,0,-0.864624559879303,-0.31168225407600403,0.3940541744232178,0,0.49620521068573,-0.6527157425880432,0.5724882483482361,0,0.0010106010595336556,-0.0004110212903469801,-0.0019003321649506688,1],[7,0.2134808450937271,0.6613981127738953,0.7190123200416565,0,-0.9091275334358215,-0.1349390745162964,0.39405420422554016,0,0.35764947533607483,-0.7377968430519104,0.5724883675575256,0,0.0006776420632377267,-0.000555665057618171,-0.001900332048535347,1],[7,0.7115260362625122,-0.7015135884284973,0.0401175320148468,0,-0.7025516629219055,-0.7092545032501221,0.05813179165124893,0,-0.012326705269515514,-0.06954692304134369,-0.9975025057792664,0,0.0001760657614795491,0.0023267678916454315,-0.00032732635736465454,1],[7,0.3606254458427429,0.5941134691238403,0.7190123796463013,0,-0.9156920909881592,0.07892780750989914,0.3940541744232178,0,0.17736278474330902,-0.8004997968673706,0.5724883079528809,0,0.0003465541813056916,-0.0006535050924867392,-0.001900332048535347,1],[7,0.6940129995346069,-0.6991953253746033,0.17167401313781738,0,-0.7027259469032288,-0.7097221612930298,-0.04970782250165939,0,0.1565963178873062,-0.08614189177751541,-0.9838990569114685,0,-0.000505986507050693,0.0023713831324130297,-0.00005785703979199752,1],[7,0.5135367512702942,-0.8407188653945923,0.17167401313781738,0,-0.847786009311676,-0.5280038714408875,-0.04970782250165939,0,0.13243483006954193,-0.12001602351665497,-0.9838990569114685,0,-0.00014941066910978407,0.0024729440920054913,-0.0000578569779463578,1],[7,0.30522778630256653,-0.9366772174835205,0.17167402803897858,0,-0.9468979835510254,-0.3176688253879547,-0.0497078113257885,0,0.10109564661979675,-0.1473855823278427,-0.9838990569114685,0,0.00023800470808055252,0.0024852606002241373,-0.000057857148931361735,1],[7,0.44053593277931213,-0.8977053761482239,-0.007281626109033823,0,-0.896538257598877,-0.43951570987701416,-0.05518027022480965,0,0.04633523151278496,0.030837150290608406,-0.9984499216079712,0,0.00010435032163513824,0.0024041507858783007,-0.0002051175106316805,1],[7,0.22102874517440796,-0.9752401113510132,-0.0072816042229533195,0,-0.9738686084747314,-0.22030599415302277,-0.05518027022480965,0,0.05220981687307358,0.019287753850221634,-0.9984499216079712,0,0.0005060083931311965,0.002350856317207217,-0.00020511759794317186,1],[7,0.5593971610069275,-0.8288677334785461,-0.007281619124114513,0,-0.827851414680481,-0.5582265853881836,-0.05518026649951935,0,0.04167234152555466,0.03689578175544739,-0.9984499216079712,0,-0.000033785363484639674,0.0023957702796906233,-0.0002051175688393414,1],[7,0.7115260362625122,0.03955892473459244,0.7015453577041626,0,-0.7025516629219055,0.05756701901555061,0.7093005180358887,0,-0.012326705269515514,-0.9975576400756836,0.06875261664390564,0,0.0006280219531618059,-0.00032547354931011796,-0.002327027963474393,1],[7,-4.400118598368863e-7,0.000001353582661067776,-1,0,-0.9985249638557434,-0.054294683039188385,3.658705054476741e-7,0,-0.05429467931389809,0.9985250234603882,0.000001375476358589367,0,0.000572036427911371,0.00015775143401697278,-0.0004971834714524448,1],[7,-3.345173809066182e-7,0.0000013834358014719328,-1,0,-0.9997417330741882,0.022725660353899002,3.658705054476741e-7,0,0.022725660353899002,0.999741792678833,0.000001375476358589367,0,0.0011411461746320128,0.00011325218656565994,-0.0004971834714524448,1],[7,4.371138828673793e-8,0.000001370906943520822,-1,0,-1,4.371145223558415e-8,-4.371133144331907e-8,0,4.371138828673793e-8,1,0.000001370906943520822,0,0.00017384454258717597,0.00014853168977424502,-0.0004971834132447839,1],[7,-0.9967145323753357,-0.0000013673665080204955,0.08099529892206192,0,-0.08099530637264252,-4.3567780494413455e-8,-0.9967144727706909,0,0.0000013664028983839671,-1,-6.732562241040796e-8,0,-0.00012795536895282567,-0.00009854286327026784,0.002555231796577573,1],[7,-0.71213698387146,0.02637038379907608,0.7015451788902283,0,-0.694223940372467,0.12225383520126343,-0.7093005180358887,0,-0.1044711247086525,-0.9921483993530273,-0.06875452399253845,0,0.001154284575022757,-0.0003821251739282161,0.0023270277306437492,1],[7,-0.07876954972743988,-0.6905208826065063,0.7190108299255371,0,-0.864624559879303,-0.3116822838783264,-0.3940541446208954,0,0.4962054193019867,-0.6527138948440552,-0.5724902153015137,0,0.0010106011759489775,-0.00041102111572399735,0.0019003319321200252,1],[7,-0.21347984671592712,-0.6614001989364624,0.7190107703208923,0,-0.9091275334358215,-0.1349390745162964,-0.3940541744232178,0,0.3576500415802002,-0.7377950549125671,-0.5724903345108032,0,0.0006776421214453876,-0.0005556649412028491,0.0019003319321200252,1],[7,-0.36062493920326233,-0.5941157937049866,0.7190107107162476,0,-0.9156920909881592,0.07892782241106033,-0.3940541446208954,0,0.1773637980222702,-0.8004981279373169,-0.5724903345108032,0,0.00034655426861718297,-0.000653505208902061,0.0019003318157047033,1],[7,-0.711526095867157,0.7015134692192078,0.04012027010321617,0,-0.7025517225265503,-0.7092545032501221,-0.05813179537653923,0,-0.012324756011366844,-0.0695488452911377,0.9975025057792664,0,0.00017606597975827754,0.0023267678916454315,0.000327326386468485,1],[7,-0.6940125226974487,0.699195146560669,0.17167672514915466,0,-0.7027259469032288,-0.7097221612930298,0.049707818776369095,0,0.15659822523593903,-0.08614383637905121,0.9838985800743103,0,-0.0005059862160123885,0.002371382899582386,0.00005785699613625184,1],[7,-0.5135363340377808,0.8407185673713684,0.17167674005031586,0,-0.8477860689163208,-0.5280038714408875,0.049707818776369095,0,0.13243626058101654,-0.120018370449543,0.9838985800743103,0,-0.0001494104362791404,0.0024729440920054913,0.000057857061619870365,1],[7,-0.30522751808166504,0.9366768002510071,0.17167678475379944,0,-0.9468979835510254,-0.3176688253879547,0.049707815051078796,0,0.1010965034365654,-0.14738819003105164,0.9838985800743103,0,0.0002380047953920439,0.00248526013456285,0.00005785717803519219,1],[7,-0.4405358135700226,0.8977054953575134,-0.007278908509761095,0,-0.896538257598877,-0.43951570987701416,0.05518027022480965,0,0.046336427330970764,0.030834708362817764,0.998449981212616,0,0.00010435043805046007,0.0024041507858783007,0.0002051175688393414,1],[7,-0.22102861106395721,0.975240170955658,-0.007278896868228912,0,-0.9738686084747314,-0.22030599415302277,0.05518026649951935,0,0.05221041291952133,0.019285108894109726,0.998449981212616,0,0.0005060084513388574,0.002350856550037861,0.00020511758339125663,1],[7,-0.5593970417976379,0.8288678526878357,-0.007278898265212774,0,-0.827851414680481,-0.5582266449928284,0.05518026649951935,0,0.04167386516928673,0.03689352422952652,0.998449981212616,0,-0.00003378530527697876,0.0023957702796906233,0.00020511758339125663,1],[7,-0.711526095867157,-0.03956165909767151,0.7015451788902283,0,-0.7025517225265503,0.057567015290260315,-0.7093005776405334,0,-0.012324756011366844,-0.997557520866394,-0.06875453889369965,0,0.0006280221859924495,-0.00032547354931011796,0.002327027963474393,1],[7,0.29374268651008606,0.8125469088554382,0.5034708380699158,0,-0.9543904662132263,0.21986691653728485,0.2019839733839035,0,0.05342486873269081,-0.5398390889167786,0.8400712013244629,0,0.001465494162403047,-0.0005668497178703547,-0.00113012851215899,1],[7,0.29374268651008606,0.8125466108322144,0.5034711360931396,0,-0.9543904662132263,0.2198667973279953,0.20198404788970947,0,0.05342486873269081,-0.5398393869400024,0.8400709629058838,0,0.002551818499341607,-0.000566848844755441,-0.0011301282793283463,1],[7,-0.293742835521698,0.81254643201828,-0.5034716129302979,0,-0.9543903470039368,-0.2198668122291565,0.20198437571525574,0,0.05342495068907738,0.5398398637771606,0.8400708436965942,0,0.0025517193134874105,0.0005671214312314987,-0.0011302982456982136,1],[7,-0.07324494421482086,0.8125466108322144,-0.5034716129302979,0,-0.23797789216041565,-0.21986669301986694,0.20198434591293335,0,0.013321571983397007,0.5398399829864502,0.8400707244873047,0,0.0003653971361927688,0.0005671213730238378,-0.0011302981292828918,1],[7,-0.0713939219713211,0.8160340189933777,0.5735774040222168,0,0.04999026656150818,-0.571394681930542,0.8191512823104858,0,0.9961945414543152,0.08715570718050003,3.504117387365113e-7,0,0.0006206301623024046,0.0021527307108044624,0.00008291999984066933,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["fd+bn0ExVPFawLpQLlYeJI@42c68"]}],[1],0,[],[],[]],[[[18,".bin",2260903681,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":191688,"length":45216,"count":11304,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":191688,"count":3423,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]]},"minPosition",8,[1,-0.002956308424472809,-0.00003947727236663923,-0.0009733585175126791],"maxPosition",8,[1,0.0024950827937573195,0.004312566015869379,0.0037812625523656607]]],-1],0,0,[],[],[]],[[[19],[47,"monster_M_002",[-3,-4],[[63,-2,[1,"48k3OQliNVg4cHGHKfjLox"],[3,4,5,6,7,8,9,10,11,12],13]],[0,"9av12uQZJdCIM/X6S1hH53",-1,0]],[43,"Bip001 R Hand",[[-5,-6,-7,[6,"Bone001",-8,[0,"1c1eHNFJNcN7GJJ8MPmtvi",1,0],[1,0.000643588078673929,0.00034593974123708904,-0.0006129161338321865],[3,0.11868524619846767,-0.7058448832215561,0.00910963682124117,0.6982935111267624],[1,10.416027227954366,-89.80281454689548,-8.90660909621888]]],1,1,1,4],[0,"f7tDuflAJdlpxKsfWurh52",1,0],[1,0.0004519561480265111,-1.1920929521291868e-10,1.1920929521291868e-10],[3,0.5964287987374773,-0.4160418719084868,-0.5640234229992932,0.39122810119367996],[1,-179.56574806419022,87.1029971265809,-69.65272106783692]],[76,"Bip001 Pelvis",[-9,-10,-11],[0,"d1VYKPk39Q1o2I8zenzGqM",1,0],[3,-0.49999999254917427,-0.49999999254917427,-0.49999930709576956,0.5000007078049009],[1,-89.99991974527727,-89.99991974527727,-0.0000017074910602964197]],[128,"Bip001 Neck",[-12,-13,-14],[0,"53DWWqb/paULFnne+y7dsy",1,0],[1,0.0005745618254877627,-1.059472580777765e-7,1.1175870992530257e-11]],[20,"Bip001 L Hand",[-15,-16,-17],[0,"e23Elve8xZgKkZnNkgYsUK",1,0],[1,0.0004519563226494938,0,-4.768371808516747e-10],[3,-0.7197403146494361,0.07071066485433336,-0.021397549167777467,0.690301402456783],[1,-92.13710840366332,3.8649978245349477,-7.546347686770484]],[3,"Bip001 Head",4,[-18,-19],[0,"a5oN8Uj01cQpDJGpsrypJ1",1,0],[1,0.00006542586925206706,2.980232380322967e-11,7.450580950807417e-12],[3,0.16448967388555488,-0.030339841223360507,-0.03998917397089642,0.9851007599147868],[1,18.83997433095512,-2.682695212833428,-5.092729969260947]],[27,"monster_M_002",1,[[64,-20,[1,"7eqAhmaxtbHbqd+enlBY8L"],[0],[7],1,1,2]],[0,"59hs1vk8BX1KG0Tfavz2kY",1,0],[1,1000,1000,1000]],[101,"Bip001",1,[3],[0,"c2TyJNk/FTJr56eD+Z67ZX",1,0],[1,4.549185916857823e-9,1.1032437086105347,-0.13915622234344482],[3,0.43490220731595924,0.5575482670331837,0.5575482670331837,-0.43490220731595924],[1,1000,1000,1000],[1,-90,-104.08967786384524,0]],[3,"Bip001 Spine",3,[-21],[0,"64w7A2EONfvro2TchhaH4T",1,0],[1,0.0003394206869415939,-4.653036569379765e-7,1.829117479701381e-8],[3,-0.018151096998625202,0.013077236711244016,-0.06467891484135505,0.9976553320324056],[1,-1.995371407482132,1.3721875648803608,-7.442390960664102]],[3,"Bip001 Spine1",9,[4],[0,"fbj4Oi1WlWqqZ79zinzid/",1,0],[1,0.0005897345254197717,-3.9991735434341535e-7,1.5303491807117098e-8],[3,-0.01814388679296552,0.013085294581744258,-0.06507609817849007,0.9976295283739435],[1,-1.9940322753932724,1.37244185093429,-7.48799819947627]],[3,"Bip001 L Clavicle",4,[-22],[0,"25kyjqZPFShLZvWHgSLR8C",1,0],[1,-0.00010560297960182652,0.00004074850585311651,0.0003344969591125846],[3,0.677865982735192,-0.00027080910540324825,0.7351853854873542,0.0002916825181468945],[1,179.95452816764305,-94.64577495493981,0.0035372631450796234]],[3,"Bip001 L UpperArm",11,[-23],[0,"49Pf0g0PBYA7REjoRsz7FY",1,0],[1,0.00046746869338676333,-2.980232380322967e-11,-2.3841859042583735e-10],[3,0.2342728707186164,0.3320228503900319,0.4151664732363183,0.8139495367433133],[1,10.964314107548283,38.509962024462595,56.24457549833544]],[3,"Bip001 L Forearm",12,[5],[0,"cbPBIoM31QBqgfGn5H2bNv",1,0],[1,0.0005590323125943542,0,2.3841859042583735e-10],[3,5.65100810537721e-17,-3.9038569837675736e-18,-0.26612561962346276,0.9639383562137301],[1,7.133426349124773e-15,1.5053228661982261e-15,-30.867696050918518]],[3,"Bip001 L Finger0",5,[-24],[0,"02pBJJJ9xQRZa9TOP1ZPhG",1,0],[1,0.00023967331799212843,0.00014286900113802403,-0.0004948174464516342],[3,0.7954107112020119,0.36232776292935137,-0.017146662276656566,0.4855372124652153],[1,108.71929735395798,27.226779695829745,34.03837772471035]],[5,"Bip001 L Finger01",14,[[6,"Bip001 L Finger02",-25,[0,"63Hvm88OpdZYVFyKcGvCwJ",1,0],[1,0.00018937468121293932,-1.1920929521291868e-10,-1.1102230773579206e-19],[3,-8.55630159337847e-8,-2.991014714508513e-8,0.17030754626889644,0.9853909577847058],[1,-0.000009636868172074958,-0.000001812700843094837,19.61140184380602]]],[0,"e0jSQ4AARWPZMUq1CFkz9f",1,0],[1,0.00023663484898861498,8.940696794024205e-11,2.220446154715841e-19],[3,-0.12695624178454093,0.34479010768295576,0.35805246922611206,0.8583707378499136],[1,-33.1636269219007,53.46915005433693,31.812217564105133]],[3,"Bip001 L Finger1",5,[-26],[0,"1dPGyPGmRa9ouLGI2eLQIa",1,0],[1,0.0006793693173676729,-0.000044916392653249204,-0.00039534253301098943],[3,0.057922254540318414,0.08386472510179711,0.6053125784368728,0.7894354962241509],[1,-2.215421756610105,13.824662642876707,74.88969004329314]],[5,"Bip001 L Finger11",16,[[6,"Bip001 L Finger12",-27,[0,"c0AWrQPZRaLpej/K3+3bv1",1,0],[1,0.00019368088396731764,5.960464760645934e-11,-2.7755576933948015e-20],[3,2.999211801673349e-9,2.209641161664545e-9,0.5931460924324373,0.8050948472274124],[1,4.2688680492833406e-7,-1.8197462970722907e-14,72.76116754092097]]],[0,"carKD0CYFQ0K8nNBVihgF0",1,0],[1,0.00021117401774972677,1.788139358804841e-10,-2.980232380322967e-11],[3,1.8282907738632515e-8,-5.862084629619377e-9,0.3635171076939075,0.9315875226804274],[1,0.0000029847729003340937,-0.0000018857717454709265,42.632702873946975]],[3,"Bip001 L Finger2",5,[-28],[0,"fa9EgkGZBX1ZA3Z81ZiFIS",1,0],[1,0.0006930004456080496,0.00002112102447426878,0.00011955380614381284],[3,0.0068743857657225915,0.024180291256471056,0.5952475675843565,0.8031490457069618],[1,-3.486203875770557,6.030560033289887,73.03388152079633]],[5,"Bip001 L Finger21",18,[[6,"Bip001 L Finger22",-29,[0,"53aDIJ0ENZ1qAXUzqr+rSr",1,0],[1,0.00015562379849143326,-1.1920929521291868e-10,-5.960464760645934e-11],[3,6.631042965797781e-9,-7.1113778589080044e-9,0.4430544469816753,0.896494705511283],[1,0.0000017159189696084672,-0.0000017570091559250577,52.59785976218243]]],[0,"95CM9707dQJZUWhnLv6Oo3",1,0],[1,0.00019230162433814257,1.1920929521291868e-10,0],[3,-1.503030757889046e-8,1.5068826100374977e-8,0.5713737574213713,0.8206899715057955],[1,-0.000006915547279760837,0.0000069187180379212386,69.69215539259096]],[3,"Bip001 R Clavicle",4,[-30],[0,"58yRrj6+9W56Az0I+4GZ3I",1,0],[1,-0.00010560273949522525,0.000040750415791990235,-0.0003344968135934323],[3,0.7324102535346906,0.008083021284145332,-0.6807523383177392,-0.009281118418647972],[1,-179.85155348688016,85.81117260281312,1.402538006038033]],[3,"Bip001 R UpperArm",20,[-31],[0,"a4ZubgqQJX4qva6JEOaYK4",1,0],[1,0.0004674687224905938,-8.940696794024205e-11,4.440892309431682e-19],[3,0.2768523942235921,-0.3629799719153935,-0.1494353983248861,0.8770788753176351],[1,25.185117856927807,-38.68594049383647,-27.588426136494274]],[3,"Bip001 R Forearm",21,[2],[0,"de5ZA23j5UK5Lcn0AGbM3w",1,0],[1,0.0005590322543866932,2.220446154715841e-19,2.220446154715841e-19],[3,-4.018720246434876e-17,1.0877765557318148e-17,-0.26127519492222145,0.9652643536971389],[1,-4.770832113816848e-15,2.4299574130096035e-23,-30.291482307855876]],[3,"Bip001 R Finger0",2,[-32],[0,"17jPSxz/5emZ//fypfmd66",1,0],[1,0.0002396731433691457,0.00014286887017078698,0.0004948172718286514],[3,0.8733841763266084,0.3718339497029145,0.06145269041637853,-0.3084852690667919],[1,-132.36699021162025,-25.1911491570172,37.70479658760034]],[5,"Bip001 R Finger01",23,[[6,"Bip001 R Finger02",-33,[0,"992QoFUv5S+7P4VmQh6zbE",1,0],[1,0.0001893745647976175,1.1920929521291868e-10,-2.980232380322967e-11],[3,-4.022040485042011e-9,6.865899859921853e-9,0.17030751733098085,0.9853909627861206],[1,-6.243716194728664e-7,9.063502540607003e-7,19.611398478602542]]],[0,"b1k9/3IGNceIh0hvi3tWUX",1,0],[1,0.0002366349071962759,0,-2.980232380322967e-11],[3,4.045502698807993e-9,1.6161362422824326e-8,0.21663702065631893,0.976252222164515],[1,5.669043200343704e-8,0.0000018844253851228138,25.023170893488082]],[3,"Bip001 R Finger1",2,[-34],[0,"9eAHj9WvJYaqYDGUPndOf0",1,0],[1,0.0006793689681217074,-0.00004491650906857103,0.00039534253301098943],[3,0.009113826079809796,-0.07570287769801669,0.28626180392958417,0.9551126593723939],[1,4.156597855056979,-10.2975628649371,33.05505537332765]],[5,"Bip001 R Finger11",25,[[6,"Bip001 R Finger12",-35,[0,"b6kq0exk1agKrPhLu33FYJ",1,0],[1,0.00019368088396731764,-2.3841859042583735e-10,2.220446154715841e-19],[3,-3.6689687373840244e-8,1.0982785407034726e-10,0.4034012218628792,0.9150231987220514],[1,-0.000005710801600485053,0.0000025314436745534186,47.58195642086441]]],[0,"e8i/NKdONdPKXXZqxi/Izx",1,0],[1,0.00021117401774972677,2.3841859042583735e-10,2.220446154715841e-19],[3,1.2589395177430805e-8,7.971934143701468e-9,0.5349874442666183,0.8448600088044598],[1,0.0000017075472925031882,0,64.68611983683789]],[3,"Bip001 R Finger2",2,[-36],[0,"13NbPsuTpSVpIayNVbe2rW",1,0],[1,0.0006930003291927278,0.00002112090623995755,-0.00011955380614381284],[3,0.048569476845778746,-0.037587276624799396,0.2709650029608054,0.9606280079850414],[1,7.631731423056465,-6.609937632450422,31.127346408035912]],[5,"Bip001 R Finger21",27,[[6,"Bip001 R Finger22",-37,[0,"aduT3eTvxRWomny2sW6Rko",1,0],[1,0.0001556236675241962,2.3841859042583735e-10,2.220446154715841e-19],[3,-1.1912820891560163e-8,-4.306576406982378e-9,0.6015089123766053,0.7988660891110057],[1,-0.0000028718181645482688,0.0000015445979407293868,73.95608428738743]]],[0,"e4B9hUXMdYLL+RI7mr45AP",1,0],[1,0.00019230150792282075,0,4.440892309431682e-19],[3,6.331824312310557e-9,-2.50943831199738e-8,0.3816704996353062,0.9242984527240837],[1,0.0000024951200892660454,-0.000004141430946201762,44.87439139520141]],[5,"Bone002",6,[[53,"Bone003",-38,[0,"a9Il/5pOFWuqngGT0LOjA9",1,0],[1,0.001086325035430491,-2.220446154715841e-19,1.1920929521291868e-10],[1,4.010416030883789,1,1]]],[0,"695dfCDdZVI4C9hipN4VxH",1,0],[1,0.00008079480903688818,0.0006462070741690695,-0.00028033502167090774],[3,-0.04806676497249688,0.8656930905908311,0.477253287062901,0.14315851003705757],[1,-57.274840065804355,162.89265852056477,3.0624050742292286]],[5,"Bone002_L",6,[[10,"Bone003_L",-39,[0,"51cJ+XwUxax6StT2i3gMb3",1,0],[1,0.0010863241041079164,1.3877788466974007e-20,0]]],[0,"afwmV8QEtY65d4AJvgJvPe",1,0],[1,0.00008079480903688818,0.0006462060264311731,0.0002800010552164167],[3,0.14315834630576715,0.4772521253773445,0.8656937473393654,-0.048066958748526664],[1,-122.72530689519644,-162.89266068949823,3.062354149812223]],[3,"Bip001 L Thigh",3,[-40],[0,"02+LvYrBheHIKEimWi7x+L",1,0],[1,-5.9604643443123e-10,7.301568794026991e-10,0.0004971832386218011],[3,0.1354613898577543,0.9630391586322488,0.20977282499221833,-0.10100075590548893],[1,-26.237175717414804,-165.07266162379992,12.622990378948503]],[3,"Bip001 L Calf",31,[-41],[0,"6bfGKc451UX7Vh/rNnIpwc",1,0],[1,0.0005586643237620592,-2.980232380322967e-11,-5.960464760645934e-11],[3,-8.207540303763634e-19,-5.139041891189983e-18,-0.15771083356932877,0.9874853381062767],[1,-1.9547279917915018e-16,-6.275728624987515e-16,-18.14809942118991]],[5,"Bip001 L Foot",32,[[6,"Bip001 L Toe0",-42,[0,"31GS9Uc41REawutGuII4ZL",1,0],[1,0.00015166863158810884,0.0003206004621461034,0],[3,1.8165636417350667e-7,-1.1337155053374444e-7,0.7071069003958129,0.7071066619772297],[1,0,0.000029438678910844032,90]]],[0,"06YMWUkr9Y3o8RxQ84Wyu7",1,0],[1,0.00040651304880157113,1.4901161901614834e-11,5.960464760645934e-11],[3,0.025023986192876404,-0.06892631351332956,0.0044822833534505346,0.9972977852960572],[1,2.89646882460216,-7.9151543663288955,0.3145966797217339]],[3,"Bip001 R Thigh",3,[-43],[0,"aftZksVH5X9ZcHvqGoSIii",1,0],[1,7.152557435219364e-10,-6.407499530958205e-10,-0.0004971831804141402],[3,0.11044586746887225,0.9739300274510702,-0.1780380505520052,0.08697393025411475],[1,21.86211982402449,167.73856564081996,10.612381433993844]],[3,"Bip001 R Calf",34,[-44],[0,"4fnZzxWihSHIC+7Bo4Enia",1,0],[1,0.0005586642655543983,-1.1102230773579206e-19,5.960464760645934e-11],[3,0,0,-0.23612197889357045,0.9717234231422972],[1,0,0,-27.31553762302394]],[5,"Bip001 R Foot",35,[[6,"Bip001 R Toe0",-45,[0,"9dW05aLT5Q7pA4UEYseUx8",1,0],[1,0.00015166863158810884,0.0003206004330422729,-5.960464760645934e-11],[3,-9.954460892746618e-8,4.7969376847873315e-8,0.7071067215818948,0.7071068407911865],[1,0,-0.000016131893048700825,90]]],[0,"98x8YHkLFQRoO/kFGQvTz2",1,0],[1,0.0004065130196977407,-1.4901161901614834e-11,5.960464760645934e-11],[3,-0.030164936254364942,0.062159690381467826,0.11393756304954693,0.9910824795337575],[1,-4.35011252605776,7.667070222269022,12.831992338615702]]],0,[0,4,1,0,0,1,0,-1,7,0,-2,8,0,-1,23,0,-2,25,0,-3,27,0,1,2,0,-1,9,0,-2,31,0,-3,34,0,-1,11,0,-2,20,0,-3,6,0,-1,14,0,-2,16,0,-3,18,0,-1,29,0,-2,30,0,0,7,0,-1,10,0,-1,12,0,-1,13,0,-1,15,0,1,15,0,-1,17,0,1,17,0,-1,19,0,1,19,0,-1,21,0,-1,22,0,-1,24,0,1,24,0,-1,26,0,1,26,0,-1,28,0,1,28,0,1,29,0,1,30,0,-1,32,0,-1,33,0,1,33,0,-1,35,0,-1,36,0,1,36,0,9,1,2,1,22,3,1,8,4,1,10,5,1,13,45],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,7],[497,113,114,47,104,105,106,107,108,109,110,111,112,47]]]]
