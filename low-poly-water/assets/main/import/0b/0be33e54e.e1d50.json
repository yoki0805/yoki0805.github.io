[1,["3bP27T5tBI5I2RDISTXjXa","ccicvZildAz6yqqe1WM8GS","ecpdLyjvZBwrvm+cedCcQy"],["node","_effectAsset","scene","_parent"],[["cc.Node",["_name","_is3DNode","_id","_components","_trs","_parent","_contentSize","_children","_eulerAngles"],0,9,7,1,5,2,5],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],1],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Canvas",["_fitWidth","node","_designResolution"],2,1,5],["cc.Widget",["_alignFlags","node"],2,1],["cc.MeshRenderer",["node","_materials"],3,1,3],["f7631WjSoBERZM1bCn4RDrf",["lengthPtNum","widthPtNum","unitSize","node"],0,1],["cc.Scene",["_name","autoReleaseAssets","_children","_anchorPoint","_trs"],1,2,5,7],["cc.Camera",["_clearFlags","_depth","_ortho","node"],0,1],["cc.Label",["_string","_fontSize","_lineHeight","_styleFlags","_N$horizontalAlign","_N$verticalAlign","node","_materials"],-3,1,3]],[[1,0,1,2,4],[2,0,1,3],[3,0,1,3],[0,0,2,7,3,6,4,3],[0,0,1,5,3,4,8,3],[0,0,1,5,3,4,3],[0,0,5,3,6,4,2],[4,0,1,2,2],[5,0,1,2],[6,0,1,1],[7,0,1,2,3,4],[8,0,1,2,3,4,3],[9,0,1,2,3,4],[10,0,1,2,3,4,5,6,7,7]],[[[[0,"low-poly-water",[{"hash":2418422400,"record":null,"name":"low-poly-water|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform VALUE {\n  vec4 viewPos;\n  vec4 lightPos;\n};\nin vec3 a_position;\nin vec3 a_normal;\nout float v_illu;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  vec4 wpos = cc_matWorld * pos;\n  pos = cc_matViewProj * wpos;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  vec3 ldir = normalize(lightPos.xyz - wpos.xyz);\n  vec3 vdir = normalize(viewPos.xyz - wpos.xyz);\n  vec3 hdir = normalize(ldir + vdir);\n  vec3 norm = normalize(a_normal);\n  float shininess = 16.;\n  float factorSpec = 2.;\n  float ambi = .8;\n  float diff = max(dot(norm, ldir), .0);\n  float spec = factorSpec * pow(max(dot(norm, hdir), .0), shininess);\n  v_illu = ambi + diff + spec;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin float v_illu;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(.0, .2, .5, 1.);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  o.rgb = v_illu * o.rgb;\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nuniform vec4 viewPos;\nuniform vec4 lightPos;\nattribute vec3 a_position;\nattribute vec3 a_normal;\nvarying float v_illu;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  vec4 wpos = cc_matWorld * pos;\n  pos = cc_matViewProj * wpos;\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  vec3 ldir = normalize(lightPos.xyz - wpos.xyz);\n  vec3 vdir = normalize(viewPos.xyz - wpos.xyz);\n  vec3 hdir = normalize(ldir + vdir);\n  vec3 norm = normalize(a_normal);\n  float shininess = 16.;\n  float factorSpec = 2.;\n  float ambi = .8;\n  float diff = max(dot(norm, ldir), .0);\n  float spec = factorSpec * pow(max(dot(norm, hdir), .0), shininess);\n  v_illu = ambi + diff + spec;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying float v_illu;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(.0, .2, .5, 1.);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(o);\n  o.rgb = v_illu * o.rgb;\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"VALUE","binding":0,"members":[{"name":"viewPos","type":16,"count":1},{"name":"lightPos","type":16,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":1,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"low-poly-water|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"low-poly-water",{"0":{"props":{},"defines":{}}}]],0,0,[0],[1],[0]],[[[2,"Game",null],[3,"Canvas","eb+zzMDv1C/L4FnFma53E3",[-3,-4,-5],[[7,true,-1,[5,1136,640]],[8,45,-2]],[5,1136,640],[568,320,0,0,0,0,1,1,1,1]],[4,"LowPolyWater",true,1,[[9,-6,[0]],[10,51,41,10,-7]],[0,60,-180,0.49999999999999994,0,0,0.8660254037844387,3,3,3],[1,60,0,0]],[11,"New Node",true,[1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[5,"Main Camera",true,1,[[12,7,-1,false,-8]],[0,0,341.2140090910689,0,0,0,1,1,1,1]],[6,"Tip",1,[[13,"Touch the surface and move.",60,60,1,1,1,-9,[1]]],[5,825.73,75.6],[0,-272,0,0,0,0,1,0.66,0.66,1]]],0,[0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,5,0,0,2,0,0,2,0,0,4,0,0,5,0,2,3,1,3,3,9],[0,0],[-1,-1],[1,2]]]]